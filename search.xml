<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/11/06/gdb/"/>
      <url>/2020/11/06/gdb/</url>
      
        <content type="html"><![CDATA[<p>Breakpoint 1, expireGenericCommand (c=0x7ffff6cc9c80, basetime=1604656253010, unit=0) at expire.c:406<br>406        robj <em>key = c-&gt;argv[1], </em>param = c-&gt;argv[2];<br>(gdb) c<br>Continuing.</p><p>Breakpoint 2, expireGenericCommand (c=0x7ffff6cc9c80, basetime=1604656253010, unit=0) at expire.c:443<br>443            setExpire(c,c-&gt;db,key,when);<br>(gdb) p key.ptr<br>$29 = (void <em>) 0x7ffff6c285b3<br>(gdb) p </em>(char <em>)$29<br>$30 = 97 ‘a’<br>(gdb) p </em>(char *)$29@10<br>$31 = “aaa\000\000\200|\034\245\001”<br>(gdb)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 数据建模</title>
      <link href="/2019/11/16/2019-11-12-elasticsearch-num8/"/>
      <url>/2019/11/16/2019-11-12-elasticsearch-num8/</url>
      
        <content type="html"><![CDATA[<h2 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h2><ul><li>英文为Data Modeling ,为创建数据模型的过程</li><li>数据模型( Data Model )</li></ul><p>对现实世界进行抽象描述的一种工具和方法<br>通过抽象的实体及实体之间联系的形式去描述业务规则,从而实现对现实世界的映射</p><h3 id="数据建模的过程"><a href="#数据建模的过程" class="headerlink" title="数据建模的过程"></a>数据建模的过程</h3><p>概念模型</p><ul><li>确定系统的核心需求和范围边界,设计实体和实体间的关系<br>逻辑模型</li><li>进一步梳理业务需求,确定每个实体的属性、关系和约束等<br>物理模型</li><li>结合具体的数据库产品,在满足业务读写性能等需求的前提下确定最终的定义</li><li>mysql,MongoDB,elasticsearch等</li><li>第三范式</li></ul><h3 id="ES数据建模配置"><a href="#ES数据建模配置" class="headerlink" title="ES数据建模配置"></a>ES数据建模配置</h3><p>ES是基于Lucene以倒排索引为基础实现的存储体系,不遵循关系型数据库中的范式约定<br><img src="/img/in-post/2019-11-16/1.png" alt=""></p><h4 id="Mapping字段的相关设置"><a href="#Mapping字段的相关设置" class="headerlink" title="Mapping字段的相关设置"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html" target="_blank" rel="noopener">Mapping字段的相关设置</a></h4><p>enabled</p><ul><li>true | false</li><li>仅存储,不做搜索或聚合分析</li></ul><p>index</p><ul><li>true | false</li><li>是否构建倒排索引</li></ul><p>index_options</p><ul><li>docs | freqs I positions | offsets</li><li>存储倒排索引的哪些信息</li></ul><p>norms</p><ul><li>true | false</li><li>是否存储归一化相关参数,如果字段仅用于过滤和聚合分析,可关闭</li></ul><p>doc values</p><ul><li>true | false</li><li>是否启用doc values ,用于排序和聚合分析</li></ul><p>field data</p><ul><li>false I true</li><li>是否为text类型启用fielddata ,实现排序和聚合分析</li></ul><p>store</p><ul><li>false | true</li><li>是否存储该字段值</li></ul><p>coerce</p><ul><li>true l false</li><li>是否开启自动数据类型转换功能,比如字符串转为数字、浮点转为整型等</li></ul><p>multifields多字段</p><ul><li>灵活使用多字段特性来解决多样的业务需求</li></ul><p>dynamic</p><ul><li>true | false | strict</li><li>控制mapping自动更新</li></ul><p>date_detection</p><ul><li>true | false</li><li>是否自动识别日期类型</li></ul><h4 id="Mapping字段属性的设定流程"><a href="#Mapping字段属性的设定流程" class="headerlink" title="Mapping字段属性的设定流程"></a>Mapping字段属性的设定流程</h4><ol><li>是何种类型</li><li>是否需要检索</li><li>是否需要另行存储</li><li>是否需要排序和聚合分析</li></ol><h5 id="是何种类型？"><a href="#是何种类型？" class="headerlink" title="是何种类型？"></a>是何种类型？</h5><p>字符串类型</p><ul><li>需要分词则设定为text类型,否则设置为keyword类型</li></ul><p>枚举类型</p><ul><li>基于性能考虑将其设定为keyword类型,即便该数据为整型</li></ul><p>数值类型</p><ul><li>尽量选择贴近的类型,比如byte即可表示所有数值时,即选用byte ,不要用long</li></ul><p>其他类型</p><ul><li>比如布尔类型、日期、地理位置数据等</li></ul><h5 id="是否需要检索"><a href="#是否需要检索" class="headerlink" title="是否需要检索"></a>是否需要检索</h5><p>完全不需要检索、排序、聚合分析的字段</p><ul><li>enabled设置为false</li></ul><p>不需要检索的字段</p><ul><li>index设置为false</li></ul><p>需要检索的字段,可以通过如下配置设定需要的存储粒度</p><ul><li>index-options结合需要设定</li><li>norms不需要归一化数据时关闭即可</li></ul><h5 id="是否需要排序和聚合分析"><a href="#是否需要排序和聚合分析" class="headerlink" title="是否需要排序和聚合分析"></a>是否需要排序和聚合分析</h5><p>不需要排序或者聚合分析功能</p><ul><li>doc values设定为false</li><li>fielddata设定为false</li></ul><h5 id="是否需要另行存储？"><a href="#是否需要另行存储？" class="headerlink" title="是否需要另行存储？"></a>是否需要另行存储？</h5><p>是否需要专门存储当前字段的数据?</p><ul><li>store设定为true ,即可存储该字段的原始内容(与_source中的不相关)</li><li>一般结合_source的enabled设定为false时使用</li></ul><h3 id="数据建模示例"><a href="#数据建模示例" class="headerlink" title="数据建模示例"></a>数据建模示例</h3><h4 id="博客文章-blog-index"><a href="#博客文章-blog-index" class="headerlink" title="博客文章 blog_index"></a>博客文章 blog_index</h4><ul><li>标题title</li><li>发布日期publish-date</li><li>作者author</li><li>摘要abstract</li><li>网络地址url</li><li>内容content</li></ul><p>blog_index的mapping设置如下：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "title": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "fields": &#123;</span><br><span class="line">          "keyword": &#123;</span><br><span class="line">            "type": "keyword",</span><br><span class="line">            "ignore_above": 100</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "publish_date": &#123;</span><br><span class="line">        "type": "date"</span><br><span class="line">      &#125;,</span><br><span class="line">      "author": &#123;</span><br><span class="line">        "type": "keyword",</span><br><span class="line">        "ignore_above": 100</span><br><span class="line">      &#125;,</span><br><span class="line">      "abstract": &#123;</span><br><span class="line">        "type": "text"</span><br><span class="line">      &#125;,</span><br><span class="line">      "url": &#123;</span><br><span class="line">        "enabled": false</span><br><span class="line">      &#125;,</span><br><span class="line">      "content": &#123;</span><br><span class="line">        "type": "text"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>content</code>内容非常大的时候，_source每次返回会很耗费es性能</p><p>blog_index的mapping设置如下（都加了store：true专门存储每个字段原始值；不存入_source中了）：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "_source": &#123;</span><br><span class="line">      "enabled": false</span><br><span class="line">    &#125;,</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "title": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "fields": &#123;</span><br><span class="line">          "keyword": &#123;</span><br><span class="line">            "type": "keyword",</span><br><span class="line">            "ignore_above": 100</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "store": true</span><br><span class="line">      &#125;,</span><br><span class="line">      "publish_date": &#123;</span><br><span class="line">        "type": "date",</span><br><span class="line">        "store": true</span><br><span class="line">      &#125;,</span><br><span class="line">      "author": &#123;</span><br><span class="line">        "type": "keyword",</span><br><span class="line">        "ignore_above": 100,</span><br><span class="line">        "store": true</span><br><span class="line">      &#125;,</span><br><span class="line">      "abstract": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "store": true</span><br><span class="line">      &#125;,</span><br><span class="line">      "content": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "store": true</span><br><span class="line">      &#125;,</span><br><span class="line">      "url": &#123;</span><br><span class="line">        "type": "keyword",</span><br><span class="line">        "doc_values": false,</span><br><span class="line">        "norms": false,</span><br><span class="line">        "ignore_above": 100,</span><br><span class="line">        "store": true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新增一条数据:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "title":"Blog Number One",</span><br><span class="line">  "author":"alfred"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET blog_index/_search</span><br></pre></td></tr></table></figure><p>此时查询不返回_source，如果想查看文档内容:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET blog_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "stored_fields": ["title","publish_date","author","abstract","url"], </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "title": "blog"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "highlight": &#123;</span><br><span class="line">    "fields":&#123;</span><br><span class="line">      "title": &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"blog_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"fields"</span> : &#123;</span><br><span class="line">          <span class="attr">"author"</span> : [</span><br><span class="line">            <span class="string">"alfred"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"title"</span> : [</span><br><span class="line">            <span class="string">"Blog Number One"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"highlight"</span> : &#123;</span><br><span class="line">          <span class="attr">"title"</span> : [</span><br><span class="line">            <span class="string">"&lt;em&gt;Blog&lt;/em&gt; Number One"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Nested-Object"><a href="#Nested-Object" class="headerlink" title="Nested_Object"></a>Nested_Object</h4><p>关联关系处理</p><p>ES不擅长处理关系型数据库中的关联关系,比如文章表blog与评论表comment之间通过blogid关联,在ES中可以通过如下两种手段变相解决</p><ul><li>Nested Object<br>0 Parent/Child</li></ul><p>评论Comment</p><ul><li>文章Id blog-id</li><li>评论人username</li><li>评论日期date</li><li>评论内容content</li></ul><p>插入两条数据<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  "title": "Blog Number One",</span><br><span class="line">  "author": "alfred",</span><br><span class="line">  "comments": [</span><br><span class="line">    &#123;</span><br><span class="line">      "username": "lee",</span><br><span class="line">      "date": "2017-01-02",</span><br><span class="line">      "content": "awesome article!"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "username": "fax",</span><br><span class="line">      "date": "2017-04-02",</span><br><span class="line">      "content": "thanks!"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询username包含lee并且content包含thanks<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET blog_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "comments.username": "lee"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "comments.content": "thanks"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据返回:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"_index"</span> : <span class="string">"blog_index"</span>,</span><br><span class="line">   <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">   <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">   <span class="attr">"_score"</span> : <span class="number">0.5753642</span>,</span><br><span class="line">   <span class="attr">"_source"</span> : &#123;</span><br><span class="line">     <span class="attr">"title"</span> : <span class="string">"Blog Number One"</span>,</span><br><span class="line">     <span class="attr">"author"</span> : <span class="string">"alfred"</span>,</span><br><span class="line">     <span class="attr">"comments"</span> : [</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">"username"</span> : <span class="string">"lee"</span>,</span><br><span class="line">         <span class="attr">"date"</span> : <span class="string">"2017-01-02"</span>,</span><br><span class="line">         <span class="attr">"content"</span> : <span class="string">"awesome article!"</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">"username"</span> : <span class="string">"fax"</span>,</span><br><span class="line">         <span class="attr">"date"</span> : <span class="string">"2017-04-02"</span>,</span><br><span class="line">         <span class="attr">"content"</span> : <span class="string">"thanks!"</span></span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>不符合想要的结果</p><p>重新设置mapping<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index_nested</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">        "title":&#123;</span><br><span class="line">          "type": "text",</span><br><span class="line">          "fields": &#123;</span><br><span class="line">            "keyword":&#123;</span><br><span class="line">              "type":"keyword",</span><br><span class="line">              "ignore_above": 100</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "publish_date":&#123;</span><br><span class="line">          "type":"date"</span><br><span class="line">        &#125;,</span><br><span class="line">        "author":&#123;</span><br><span class="line">          "type":"keyword",</span><br><span class="line">          "ignore_above": 100</span><br><span class="line">        &#125;,</span><br><span class="line">        "abstract":&#123;</span><br><span class="line">          "type": "text"</span><br><span class="line">        &#125;,</span><br><span class="line">        "url":&#123;</span><br><span class="line">          "enabled":false</span><br><span class="line">        &#125;,</span><br><span class="line">        "comments":&#123;</span><br><span class="line">          "type":"nested", </span><br><span class="line">          "properties": &#123;</span><br><span class="line">            "username":&#123;</span><br><span class="line">              "type":"keyword",</span><br><span class="line">              "ignore_above":100</span><br><span class="line">            &#125;,</span><br><span class="line">            "date":&#123;</span><br><span class="line">              "type":"date"</span><br><span class="line">            &#125;,</span><br><span class="line">            "content":&#123;</span><br><span class="line">              "type":"text"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据插入:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index_nested/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  "title": "Blog Number One",</span><br><span class="line">  "author": "alfred",</span><br><span class="line">  "comments": [</span><br><span class="line">    &#123;</span><br><span class="line">      "username": "lee",</span><br><span class="line">      "date": "2017-01-02",</span><br><span class="line">      "content": "awesome article!"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "username": "fax",</span><br><span class="line">      "date": "2017-04-02",</span><br><span class="line">      "content": "thanks!"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET blog_index_nested/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "nested": &#123;</span><br><span class="line">      "path": "comments",</span><br><span class="line">      "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">          "must": [</span><br><span class="line">            &#123;</span><br><span class="line">              "match": &#123;</span><br><span class="line">                "comments.username": "lee"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "match": &#123;</span><br><span class="line">                "comments.content": "awesome"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果符合预期</p><h4 id="Parent-Child"><a href="#Parent-Child" class="headerlink" title="Parent_Child"></a>Parent_Child</h4><p>ES还提供了类似关系数据库中join的实现方式,使用join数据类型实现</p><p>mapping:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELETE blog_index_parent_child</span><br><span class="line">PUT blog_index_parent_child</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "join": &#123;</span><br><span class="line">        "type": "join",</span><br><span class="line">        "relations": &#123;</span><br><span class="line">          "blog": "comment"   # blog为父类型，comment为子类型</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关联关系处理之Parent/Child</p><p>创建父类型文档<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index_parent_child/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "title":"blog",</span><br><span class="line">  "join":"blog"      # 指明父类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT blog_index_parent_child/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  "title":"blog2",</span><br><span class="line">  "join":"blog"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建子类型文档:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT blog_index_parent_child/_doc/comment-1?routing=1</span><br><span class="line">&#123;</span><br><span class="line">  "comment":"comment world",</span><br><span class="line">  "join":&#123;</span><br><span class="line">    "name":"comment",</span><br><span class="line">    "parent":1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT blog_index_parent_child/_doc/comment-2?routing=2</span><br><span class="line">&#123;</span><br><span class="line">  "comment":"comment hello",</span><br><span class="line">  "join":&#123;</span><br><span class="line">    "name":"comment",     #指明子类型</span><br><span class="line">    "parent":2   #父文档id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>routing值的作用是为了确保父子文档在一个shard上，一般值为父文档id</p></blockquote><p>常见 query语法包括如下几种:</p><ul><li><code>parent_id</code>返回某父文档的子文档</li><li><code>has_child</code>返回包含某子文档的父文档</li><li><code>has_parent</code>返回包含某父文档的子文档</li></ul><p><code>parent_id</code>返回id=2的父文档的子文档</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET blog_index_parent_child/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "parent_id":&#123;</span><br><span class="line">      "type":"comment",</span><br><span class="line">      "id":"2"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"blog_index_parent_child"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"comment-2"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">0.87546873</span>,</span><br><span class="line">    <span class="attr">"_routing"</span> : <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"comment"</span> : <span class="string">"comment hello"</span>,</span><br><span class="line">      <span class="attr">"join"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"comment"</span>,</span><br><span class="line">        <span class="attr">"parent"</span> : <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>has_child</code>返回包含某子文档的父文档</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET blog_index_parent_child/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "has_child": &#123;</span><br><span class="line">      "type": "comment",</span><br><span class="line">      "query": &#123;</span><br><span class="line">        "match": &#123;</span><br><span class="line">          "comment": "world"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog_index_parent_child/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "has_child": &#123;</span><br><span class="line">      "type": "comment",</span><br><span class="line">      "query": &#123;</span><br><span class="line">        "match": &#123;</span><br><span class="line">          "_id": "comment-1"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关键词<code>has_child</code>，type为子文档名称,match里面只能接一个查询条件</p></blockquote><p>返回结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"blog_index_parent_child"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"title"</span> : <span class="string">"blog"</span>,</span><br><span class="line">      <span class="attr">"join"</span> : <span class="string">"blog"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>has_parent</code>返回包含某父文档的子文档</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET blog_index_parent_child/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "has_parent": &#123;</span><br><span class="line">      "parent_type": "blog",</span><br><span class="line">      "query": &#123;</span><br><span class="line">        "match": &#123;</span><br><span class="line">          "title": "blog"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog_index_parent_child/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "has_parent": &#123;</span><br><span class="line">      "parent_type": "blog",</span><br><span class="line">      "query": &#123;</span><br><span class="line">        "match": &#123;</span><br><span class="line">          "_id": "1"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"blog_index_parent_child"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"comment-1"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"_routing"</span> : <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"comment"</span> : <span class="string">"comment world"</span>,</span><br><span class="line">      <span class="attr">"join"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"comment"</span>,</span><br><span class="line">        <span class="attr">"parent"</span> : <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nested-vs-parent-child"><a href="#nested-vs-parent-child" class="headerlink" title="nested vs parent_child"></a>nested vs parent_child</h4><table><thead><tr><th>对比</th><th>nested object</th><th>parent_child</th></tr></thead><tbody><tr><td>优点</td><td>文档存储在一起，读取性能更高</td><td>父子文档独立更新，互不影响</td></tr><tr><td>缺点</td><td>更新父文档或子文档时需要更新整个文档</td><td>为了维护join的关系，读取时需要占用部分内存，性能较差</td></tr><tr><td>场景</td><td>读多写少</td><td>写少读多</td></tr></tbody></table><h4 id="reindex"><a href="#reindex" class="headerlink" title="reindex"></a>reindex</h4><p>指重建所有数据的过程,一般发生在如下情况:</p><ul><li>mapping设置变更,比如字段类型变化、分词器字典更新等</li><li>index设置变更,比如分片数更改等</li><li>迁移数据</li></ul><p>ES提供了现成的API用于完成该工作</p><ul><li>update-by.query在现有索引上重建</li><li>_reindex在其他索引上重建</li></ul><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html</a></p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST blog_index/_update_by_query?conflicts=proceed</span><br></pre></td></tr></table></figure><blockquote><p>索引重建，如果遇到版本冲突覆盖并继续</p></blockquote><p>Reindex-_reindex</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /_reindex</span><br><span class="line">&#123;</span><br><span class="line">  "source": &#123;</span><br><span class="line">    "index":"demo_common"</span><br><span class="line">  &#125;,</span><br><span class="line">  "dest":&#123;</span><br><span class="line">    "index":"demo_common_new"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h3><p>防止字段过多<br>字段过多主要有如下的坏处:</p><ul><li>难于维护,当字段成百上千时,基本很难有人能明确知道每个字段的含义</li><li>mapping的信息存储在cluster state里面,过多的字段会导致mapping过大,最终导致更新变慢<br>通过设置index.mapping.total_fields.limit可以限定索引中最大字段数,默认是1000<br>可以通过key/value的方式解决字段过多的问题,但并不完美</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PUT demo_common</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "doc":&#123;</span><br><span class="line">      "properties": &#123;</span><br><span class="line">        "url":&#123;</span><br><span class="line">          "type": "keyword"</span><br><span class="line">        &#125;,</span><br><span class="line">        "@timestamp":&#123;</span><br><span class="line">          "type": "date"</span><br><span class="line">        &#125;,</span><br><span class="line">        "cookies":&#123;</span><br><span class="line">          "properties": &#123;</span><br><span class="line">            "username":&#123;</span><br><span class="line">              "type":"keyword"</span><br><span class="line">            &#125;,</span><br><span class="line">            "startTime":&#123;</span><br><span class="line">              "type":"date"</span><br><span class="line">            &#125;,</span><br><span class="line">            "age":&#123;</span><br><span class="line">              "type":"integer"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的设置可以转换为:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PUT demo_key_value</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "doc": &#123;</span><br><span class="line">      "properties": &#123;</span><br><span class="line">        "url": &#123;</span><br><span class="line">          "type": "keyword"</span><br><span class="line">        &#125;,</span><br><span class="line">        "@timestamp": &#123;</span><br><span class="line">          "type": "date"</span><br><span class="line">        &#125;,</span><br><span class="line">        "cookies": &#123;</span><br><span class="line">          "type": "nested",</span><br><span class="line">          "properties": &#123;</span><br><span class="line">            "cookieName":&#123;</span><br><span class="line">              "type":"keyword"</span><br><span class="line">            &#125;,</span><br><span class="line">            "cookieValueKeyword":&#123;</span><br><span class="line">              "type":"keyword"</span><br><span class="line">            &#125;,</span><br><span class="line">            "cookieValueInteger":&#123;</span><br><span class="line">              "type":"integer"</span><br><span class="line">            &#125;,</span><br><span class="line">            "cookieValueDate":&#123;</span><br><span class="line">              "type":"date"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然通过这种方式可以极大地减少Field数目,但也有一些明显的坏处</p><ul><li>query语句复杂度飙升,且有一些可能无法实现,比如聚合分析相关的</li><li>不利于在Kibana中做可视化分析</li></ul><p>查询对比<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET demo_common/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "range": &#123;</span><br><span class="line">      "cookies.age": &#123;</span><br><span class="line">        "gte": 10,</span><br><span class="line">        "lte": 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET demo_key_value/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "nested": &#123;</span><br><span class="line">      "path": "cookies",</span><br><span class="line">      "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">          "filter": [</span><br><span class="line">            &#123;</span><br><span class="line">              "term": &#123;</span><br><span class="line">                "cookies.cookieName": "age"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              "range": &#123;</span><br><span class="line">                "cookies.cookieValueInteger": &#123;</span><br><span class="line">                  "gte": 15,</span><br><span class="line">                  "lte": 20</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 聚合分析</title>
      <link href="/2019/11/12/2019-11-12-elasticsearch-num7/"/>
      <url>/2019/11/12/2019-11-12-elasticsearch-num7/</url>
      
        <content type="html"><![CDATA[<p>什么是聚合分析<br>搜索引擎用来回答如下问题:</p><ul><li>请告诉我地址为北京的所有订单?</li><li>请告诉我最近1天内创建但没有付款的所有订单?</li></ul><p>聚合分析可以回答如下问题:</p><ul><li>请告诉我最近1周每天的订单成交量有多少?</li><li>请告诉我最近1个月每天的平均订单金额是多少?</li><li>请告诉我最近半年卖的最火的前5个商品是哪些?</li><li>聚合分析,英文为Aggregation ,是es除搜索功能外提供的针对es数据做统计分析的功能</li></ul><p>功能丰富,提供<code>Bucket</code>, <code>Metric</code>, <code>Pipeline</code>等多种分析方式,可以满足大部分的分析需求<br>实时性高,所有的计算结果都是即时返回的,而hadoop等大数据系统一般都是T+1级别的</p><p><code>aggregation</code>属于_search的一部分，一般情况下，将size设定为0<br><code>aggregation</code>语法</p><p><img src="/img/in-post/2019-11-12/1.png" alt=""></p><p>示例:获取所有年份的电影数<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "aggre_year": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field":"year"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">9743</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="attr">"aggre_year"</span> : &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span> : <span class="number">172</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span> : <span class="number">6333</span>,</span><br><span class="line">      <span class="attr">"buckets"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1078</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2015</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">274</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2014</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">271</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2002</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">268</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2006</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">265</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2007</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">259</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">1996</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">252</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">249</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2009</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">248</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">2005</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">246</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>aggs</code>下面同级的<code>aggregation_name</code>可以存在多个,但是<code>aggs</code>的直属下级不能含有<code>aggs</code><br>错误示例：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "age_filter": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "range": &#123;</span><br><span class="line">          "age": &#123;</span><br><span class="line">            "gte": 10,</span><br><span class="line">            "lte": 20</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "aggs": &#123;</span><br><span class="line">      "max_age": &#123;</span><br><span class="line">        "max": &#123;</span><br><span class="line">          "field": "age"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了便于理解, es将聚合分析主要分为如下4类</p><ul><li><code>Bucket</code>,分桶类型,类似SOL中的GROUP BY语法</li><li><code>Metric</code>,指标分析类型,如计算最大值、最小值、平均值等等</li><li><code>Pipeline</code> ,管道分析类型,基于上一级的聚合分析结果进行再分析</li><li><code>Matrix</code> ,矩阵分析类型</li></ul><h2 id="Metric聚合分析"><a href="#Metric聚合分析" class="headerlink" title="Metric聚合分析"></a>Metric聚合分析</h2><p>主要分如下两类:</p><p>单值分析,只输出一个分析结果</p><ul><li>min,max,avg,sum</li><li>cardinality<br>多值分析,输出多个分析结果</li><li>stats,extended stats</li><li>percentile, percentile rank</li><li>top hits</li></ul><h3 id="min-max-avg-sum"><a href="#min-max-avg-sum" class="headerlink" title="min,max,avg,sum"></a>min,max,avg,sum</h3><p>多个聚合分析<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "max_year": &#123;</span><br><span class="line">      "max": &#123;</span><br><span class="line">        "field":"year"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "min_year": &#123;</span><br><span class="line">      "min": &#123;</span><br><span class="line">        "field":"year"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "sum_year": &#123;</span><br><span class="line">      "sum": &#123;</span><br><span class="line">        "field":"year"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "avg_year": &#123;</span><br><span class="line">      "avg": &#123;</span><br><span class="line">        "field":"year"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Cardinality"><a href="#Cardinality" class="headerlink" title="Cardinality"></a>Cardinality</h3><p><code>cardinality</code> ,意为集合的势,或者基数,是指不同数值的个数,类似SQL中的distinct count概念</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0, </span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "count_of_year": &#123;</span><br><span class="line">      "cardinality": &#123;</span><br><span class="line">        "field": "year"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stats"><a href="#Stats" class="headerlink" title="Stats"></a>Stats</h3><p><code>stats</code>返回一系列数值类型的统计值,包含min, max, avg, sum和count<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0, </span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "stats_of_year": &#123;</span><br><span class="line">      "stats": &#123;</span><br><span class="line">        "field": "year"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">7</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">9743</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="attr">"stats_of_year"</span> : &#123;</span><br><span class="line">      <span class="attr">"count"</span> : <span class="number">9743</span>,</span><br><span class="line">      <span class="attr">"min"</span> : <span class="number">0.0</span>,</span><br><span class="line">      <span class="attr">"max"</span> : <span class="number">2018.0</span>,</span><br><span class="line">      <span class="attr">"avg"</span> : <span class="number">1772.895925279688</span>,</span><br><span class="line">      <span class="attr">"sum"</span> : <span class="number">1.7273325E7</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><code>extended_stats</code>返回更多的统计指标,用法和<code>stats</code>一致</p></blockquote><h3 id="Percentile"><a href="#Percentile" class="headerlink" title="Percentile"></a>Percentile</h3><p><code>percentiles</code> 百分位数统计</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "per_of_year": &#123;</span><br><span class="line">      "percentiles": &#123;</span><br><span class="line">        "field": "year",</span><br><span class="line">        "percents": [</span><br><span class="line">          <span class="attribute">1,</span></span><br><span class="line">          5,</span><br><span class="line">          <span class="attribute">25,</span></span><br><span class="line">          50,</span><br><span class="line">          <span class="attribute">75,</span></span><br><span class="line">          95,</span><br><span class="line">          <span class="attribute">99</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0, </span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "per_of_year": &#123;</span><br><span class="line">      "percentile_ranks": &#123;</span><br><span class="line">        "field": "year",</span><br><span class="line">        "values": [2017,2018]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Top-Hits"><a href="#Top-Hits" class="headerlink" title="Top Hits"></a>Top Hits</h3><p><code>top_hits</code>一般用于分桶后获取该桶内最匹配的顶部文档列表,即详情数据</p><p>返回匹配度最接近的10个文档</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "top_year": &#123;</span><br><span class="line">      "top_hits": &#123;</span><br><span class="line">        "size": 10,</span><br><span class="line">        "sort": &#123;</span><br><span class="line">          "year": "asc"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bucket聚合分析"><a href="#Bucket聚合分析" class="headerlink" title="Bucket聚合分析"></a>Bucket聚合分析</h2><p>Bucket ,意为桶,即按照一定的规则将文档分配到不同的桶中,达到分类分析的目的<br>按照Bucket的分桶策略,常见的Bucket聚合分析如下:</p><ul><li>Terms</li><li>Range</li><li>Date Range</li><li>Histogram</li><li>Date Histogram</li></ul><h3 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h3><p>该分桶策略最简单,直接按照term来分桶,如果是text类型,则按照分词后的结果分桶<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "aggre_title": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field":"title.keyword"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>fielddata需要指定为true才能使用</p></blockquote><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p>通过指定数值的范围来设定分桶规则</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0, </span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "age_range": &#123;</span><br><span class="line">      "range": &#123;</span><br><span class="line">        "field": "age",</span><br><span class="line">        "ranges": [</span><br><span class="line">          &#123;</span><br><span class="line">            "to": 18</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            "from": 18,</span><br><span class="line">            "to": 20</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            "from": 20</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Date-Range"><a href="#Date-Range" class="headerlink" title="Date Range"></a>Date Range</h3><p>一通过指定日期的范围来设定分桶规则</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0, </span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "birth_range": &#123;</span><br><span class="line">      "range": &#123;</span><br><span class="line">        "field": "birth",</span><br><span class="line">        "format": "yyyy",</span><br><span class="line">        "ranges": [</span><br><span class="line">          &#123;</span><br><span class="line">            "to": 1980</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            "from": 1980,</span><br><span class="line">            "to": 1990</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            "from": 1990</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ranges里面设置key可自定义返回的key显示</p></blockquote><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0, </span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "year_hist": &#123;</span><br><span class="line">      "histogram": &#123;</span><br><span class="line">        "field": "year",</span><br><span class="line">        "interval": 100,</span><br><span class="line">        "extended_bounds": &#123;</span><br><span class="line">          "min": 0,</span><br><span class="line">          "max": 2019</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>interval</code>设定间隔，<code>extended_bounds</code>设定范围</p><h3 id="Date-Histogram"><a href="#Date-Histogram" class="headerlink" title="Date Histogram"></a>Date Histogram</h3><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0, </span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "year_hist": &#123;</span><br><span class="line">      "date_histogram": &#123;</span><br><span class="line">        "field": "birth",</span><br><span class="line">        "calendar_interval": "1y"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>interval可分为calendar_interval和fixed_interval<br>详情参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-aggregations-bucket-datehistogram-aggregation.html" target="_blank" rel="noopener">Date Histogram</a></p></blockquote><h3 id="bucket和metric聚合分析"><a href="#bucket和metric聚合分析" class="headerlink" title="bucket和metric聚合分析"></a>bucket和metric聚合分析</h3><p>Bucket聚合分析允许通过添加子分析来进一步进行分析,该子分析可以是Bucket也可以是Metric,这也使得es的聚合分析能力变得异常强大</p><p>分桶之后再分桶：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "jobs": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "size": 10</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "age_range": &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "field": "age",</span><br><span class="line">            "ranges": [</span><br><span class="line">              &#123;</span><br><span class="line">                "to": 18</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                "from": 18,</span><br><span class="line">                "to": 25</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                "from": 25</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">    "jobs" : &#123;</span><br><span class="line">      "doc_count_error_upper_bound" : 0,</span><br><span class="line">      "sum_other_doc_count" : 0,</span><br><span class="line">      "buckets" : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java and ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_range"</span> : &#123;</span><br><span class="line">            <span class="attr">"buckets"</span> : [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"*-18.0"</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"18.0-25.0"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"25.0-*"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_range"</span> : &#123;</span><br><span class="line">            <span class="attr">"buckets"</span> : [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"*-18.0"</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"18.0-25.0"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"25.0-*"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_range"</span> : &#123;</span><br><span class="line">            <span class="attr">"buckets"</span> : [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"*-18.0"</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"18.0-25.0"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"25.0-*"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"php engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_range"</span> : &#123;</span><br><span class="line">            <span class="attr">"buckets"</span> : [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"*-18.0"</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"18.0-25.0"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"25.0-*"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_range"</span> : &#123;</span><br><span class="line">            <span class="attr">"buckets"</span> : [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"*-18.0"</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"18.0-25.0"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">18.0</span>,</span><br><span class="line">                <span class="attr">"to"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span> : <span class="string">"25.0-*"</span>,</span><br><span class="line">                <span class="attr">"from"</span> : <span class="number">25.0</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span> : <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Pipeline聚合分析"><a href="#Pipeline聚合分析" class="headerlink" title="Pipeline聚合分析"></a>Pipeline聚合分析</h2><p>概念：支持聚合分析的结果再进行聚合分析</p><p>pipeline分析的结果会输出到原结果，具体分为两类</p><ul><li>Sibline: 结果和现有分析结果同级<ul><li>max,min,avg,sum bucket</li><li>stats,extended_stats bucket</li><li>Percentile</li></ul></li><li>Parent:结果内嵌到现有的聚合分析结果中<ul><li>Derivative 求导导数</li><li>Moving fn 滑动窗口</li><li>Cumulative Sum 累计求和</li></ul></li></ul><p>Sibline Demo<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "jobs": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "size": 10</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "age_avg": &#123;</span><br><span class="line">          "avg": &#123;</span><br><span class="line">            "field": "age"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "min_age": &#123;</span><br><span class="line">      "min_bucket": &#123;</span><br><span class="line">        "buckets_path": "jobs&gt;age_avg"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">    "jobs" : &#123;</span><br><span class="line">      "doc_count_error_upper_bound" : 0,</span><br><span class="line">      "sum_other_doc_count" : 0,</span><br><span class="line">      "buckets" : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"php engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">27.5</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java and ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">22.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">18.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">28.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">23.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    "min_age" : &#123;</span><br><span class="line">      "value" : 18.0,</span><br><span class="line">      "keys" : [</span><br><span class="line">        <span class="string">"java engineer"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Parent Demo</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "births": &#123;</span><br><span class="line">      "date_histogram": &#123;</span><br><span class="line">        "field": "birth",</span><br><span class="line">        "calendar_interval": "1y"</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "age_avg": &#123;</span><br><span class="line">          "avg": &#123;</span><br><span class="line">            "field": "age"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "mavg_age": &#123;</span><br><span class="line">          "moving_fn": &#123;</span><br><span class="line">            "buckets_path": "age_avg",</span><br><span class="line">            "window": 10,</span><br><span class="line">            "script": "MovingFunctions.min(values)"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">    "births" : &#123;</span><br><span class="line">      "buckets" : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1980-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">315532800000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">28.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"mavg_age"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1981-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">347155200000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1982-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">378691200000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1983-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">410227200000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1984-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">441763200000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1985-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">473385600000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">22.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"mavg_age"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">28.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1986-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">504921600000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1987-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">536457600000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1988-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">567993600000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1989-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">599616000000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">23.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"mavg_age"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">22.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1990-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">631152000000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">18.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"mavg_age"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">22.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1991-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">662688000000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1992-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">694224000000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">28.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"mavg_age"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">18.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key_as_string"</span> : <span class="string">"1993-01-01T00:00:00.000Z"</span>,</span><br><span class="line">          <span class="attr">"key"</span> : <span class="number">725846400000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">27.0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"mavg_age"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">18.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h2><p>es聚合分析默认作用范围是query的结果集,可以通过如下的方式改变其作用范围:</p><ul><li>filter</li><li>post_filter</li><li>global</li></ul><p>aggs只作用与query的结果集<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username": &#123;</span><br><span class="line">        "query": "alfred way",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "max_year": &#123;</span><br><span class="line">      "max": &#123;</span><br><span class="line">        "field": "age"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>为某个聚合分析设定过滤条件,从而在不更改整体query语句的情况下修改了作用范围</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "filter_age": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "range": &#123;</span><br><span class="line">          "age": &#123;</span><br><span class="line">            "gte": 10,</span><br><span class="line">            "lte": 20</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "max_age": &#123;</span><br><span class="line">          "max": &#123;</span><br><span class="line">            "field": "age"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">  "filter_age" : &#123;</span><br><span class="line">    "doc_count" : 1,</span><br><span class="line">    "max_age" : &#123;</span><br><span class="line">      "value" : 18.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="post-filter"><a href="#post-filter" class="headerlink" title="post-filter"></a>post-filter</h3><p>作用于文档过滤,但在聚合分析后生效</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "jobs": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "job.keyword"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "post_filter": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "job.keyword": "php engineer"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"php engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">27</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1993-08-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"6"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"jun way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"php engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">28</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1992-08-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="attr">"jobs"</span> : &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"php engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java and ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只过滤hits文档</p></blockquote><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>无视query过滤条件,基于全部文档进行分析</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username": &#123;</span><br><span class="line">        "query": "alfred way",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "max_year": &#123;</span><br><span class="line">      "max": &#123;</span><br><span class="line">        "field": "age"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "all": &#123;</span><br><span class="line">      "global": &#123;&#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "all_max_year": &#123;</span><br><span class="line">          "max": &#123;</span><br><span class="line">            "field": "age"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">    "all" : &#123;</span><br><span class="line">      "doc_count" : 6,</span><br><span class="line">      "all_max_year" : &#123;</span><br><span class="line">        "value" : 28.0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "max_year" : &#123;</span><br><span class="line">      "value" : 23.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>适用场景，整体和部分做对比</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>可以使用自带的关键数据进行排序,比如：</p><ul><li>_count文档数</li><li>_key按照key值排序</li></ul><h3 id="count文档数-排序"><a href="#count文档数-排序" class="headerlink" title="count文档数 排序"></a>count文档数 排序</h3><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "job_count": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 10,</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "order": [</span><br><span class="line">          &#123;"_count": "asc"&#125;, </span><br><span class="line">          &#123;"_key": "desc"&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Json-Object-排序"><a href="#Json-Object-排序" class="headerlink" title="Json Object 排序"></a>Json Object 排序</h3><p>类似<code>stats</code>这种包含多个值的可以用.指定哪个值排序<br>Demo1:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "job_count": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 10,</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "order": [</span><br><span class="line">          &#123;"age_stats.sum": "asc"&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "age_stats": &#123;</span><br><span class="line">          "stats": &#123;</span><br><span class="line">            "field": "age"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">    "job_count" : &#123;</span><br><span class="line">      "doc_count_error_upper_bound" : 0,</span><br><span class="line">      "sum_other_doc_count" : 0,</span><br><span class="line">      "buckets" : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_stats"</span> : &#123;</span><br><span class="line">            <span class="attr">"count"</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"min"</span> : <span class="number">18.0</span>,</span><br><span class="line">            <span class="attr">"max"</span> : <span class="number">18.0</span>,</span><br><span class="line">            <span class="attr">"avg"</span> : <span class="number">18.0</span>,</span><br><span class="line">            <span class="attr">"sum"</span> : <span class="number">18.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java and ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_stats"</span> : &#123;</span><br><span class="line">            <span class="attr">"count"</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"min"</span> : <span class="number">22.0</span>,</span><br><span class="line">            <span class="attr">"max"</span> : <span class="number">22.0</span>,</span><br><span class="line">            <span class="attr">"avg"</span> : <span class="number">22.0</span>,</span><br><span class="line">            <span class="attr">"sum"</span> : <span class="number">22.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_stats"</span> : &#123;</span><br><span class="line">            <span class="attr">"count"</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"min"</span> : <span class="number">23.0</span>,</span><br><span class="line">            <span class="attr">"max"</span> : <span class="number">23.0</span>,</span><br><span class="line">            <span class="attr">"avg"</span> : <span class="number">23.0</span>,</span><br><span class="line">            <span class="attr">"sum"</span> : <span class="number">23.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_stats"</span> : &#123;</span><br><span class="line">            <span class="attr">"count"</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"min"</span> : <span class="number">28.0</span>,</span><br><span class="line">            <span class="attr">"max"</span> : <span class="number">28.0</span>,</span><br><span class="line">            <span class="attr">"avg"</span> : <span class="number">28.0</span>,</span><br><span class="line">            <span class="attr">"sum"</span> : <span class="number">28.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"php engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age_stats"</span> : &#123;</span><br><span class="line">            <span class="attr">"count"</span> : <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"min"</span> : <span class="number">27.0</span>,</span><br><span class="line">            <span class="attr">"max"</span> : <span class="number">28.0</span>,</span><br><span class="line">            <span class="attr">"avg"</span> : <span class="number">27.5</span>,</span><br><span class="line">            <span class="attr">"sum"</span> : <span class="number">55.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Demo2:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "job_count": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 10,</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "order": [</span><br><span class="line">          &#123;"age_avg.value": "asc"&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "age_avg": &#123;</span><br><span class="line">          "avg": &#123;</span><br><span class="line">            "field": "age"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">    "job_count" : &#123;</span><br><span class="line">      "doc_count_error_upper_bound" : 0,</span><br><span class="line">      "sum_other_doc_count" : 0,</span><br><span class="line">      "buckets" : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">18.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java and ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">22.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">23.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"php engineer"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">27.5</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"age_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">28.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="聚合嵌套"><a href="#聚合嵌套" class="headerlink" title="聚合嵌套:"></a>聚合嵌套:</h3><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "jobs": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "size": 10,</span><br><span class="line">        "order": &#123;</span><br><span class="line">          "age_filter&gt;age_avg": "desc"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "age_filter": &#123;</span><br><span class="line">          "filter": &#123;</span><br><span class="line">            "range": &#123;</span><br><span class="line">              "age": &#123;</span><br><span class="line">                "gte": 10,</span><br><span class="line">                "lte": 20</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          "aggs": &#123;</span><br><span class="line">            "age_avg": &#123;</span><br><span class="line">              "avg": &#123;</span><br><span class="line">                "field": "age"</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合的精准度问题"><a href="#聚合的精准度问题" class="headerlink" title="聚合的精准度问题"></a>聚合的精准度问题</h2><p>Min聚合得执行流程</p><p><img src="/img/in-post/2019-11-12/2.png" alt=""></p><p>min执行过程中每次从shard中取出的都是最小值，所以不存在精准度问题</p><p>Terms聚合的执行流程</p><p><img src="/img/in-post/2019-11-12/3.png" alt=""></p><p>数据分散在多Shard上, Coordinating Node无法得悉数据全貌；所以不准确。</p><p>Terms不准确的解决办法</p><ul><li>设置Shard数为1,消除数据分散的问题,但无法承载大数据量</li><li>合理设置Shard Size大小,即每次从Shard上额外多获取数据,以提升准确度</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "jobs": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "size": 10,</span><br><span class="line">        "shard_size": 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shard_Size大小的设定方法<br>terms聚合返回结果中有如下两个统计值:</p><ul><li><code>doc_count_error_upper_bound</code>被遗漏的term可能的最大值</li><li><code>sum_other_other_doc_count</code>返回结果bucket的term外其他term的文档总数</li></ul><p>设定<code>show_term_doc_count_error</code>可以查看每个bucket误算的最大值</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "jobs": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "job.keyword",</span><br><span class="line">        "size": 10,</span><br><span class="line">        "show_term_doc_count_error": true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shard Size默认大小如下:</p><ul><li>shard size = (size x 1.5) +10</li><li>通过调整Shard Size的大小降低<code>doc_count_error_upper_bound</code>来提升准确度<ul><li>增大了整体的计算量,从而降低了响应时间</li></ul></li></ul><p>在ES的聚合分析中, <code>Cardinality</code>和<code>Percentile</code>分析使用的是近似统计算法</p><ul><li>结果是近似准确的,但不一定精准</li><li>可以通过参数的调整使其结果精准,但同时也意味着更多的计算时间和更大的性能消耗</li></ul><p>官方文档参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-aggregations.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-aggregations.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Search运行机制</title>
      <link href="/2019/11/12/2019-11-12-elasticsearch-num6/"/>
      <url>/2019/11/12/2019-11-12-elasticsearch-num6/</url>
      
        <content type="html"><![CDATA[<h2 id="Query-Then-Fetch"><a href="#Query-Then-Fetch" class="headerlink" title="Query-Then-Fetch"></a>Query-Then-Fetch</h2><p>Search执行的时候实际分两个步骤运作的</p><ul><li>Query阶段</li><li>Fetch阶段</li></ul><p>在es里被称为Query-Then-Fetch机制</p><h3 id="Search的运行机制-Query阶段"><a href="#Search的运行机制-Query阶段" class="headerlink" title="Search的运行机制-Query阶段"></a>Search的运行机制-Query阶段</h3><p>node3在接收到用户的search请求后,会先进行Query阶段(此时是CoordinatingNode角色)<br>node3在6个主副分片中随机选择3个分片,发送search request<br>被选中的3个分片会分别执行查询并排序,返回from+size个文档Id和排序值<br>node3整合3个分片返回的from+size个文档Id ,根据排序值排序后选取from到from+size的文档Id</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "from": 10,</span><br><span class="line">  "size": 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>表示从第10个文档开始，截取第10-29的文档</p></blockquote><h3 id="Search的运行机制-Fetch阶段"><a href="#Search的运行机制-Fetch阶段" class="headerlink" title="Search的运行机制-Fetch阶段"></a>Search的运行机制-Fetch阶段</h3><p>node3根据Query阶段获取的文档Id列表去对应的shard上获取文档详情数据a</p><ul><li>node3向相关的分片发送multi-get请求</li><li>3个分片返回文档详细数据</li><li>node3拼接返回的结果并返回给客户</li></ul><h3 id="Search的运行机制-相关性算分问题"><a href="#Search的运行机制-相关性算分问题" class="headerlink" title="Search的运行机制-相关性算分问题"></a>Search的运行机制-相关性算分问题</h3><p>相关性算分在shard与shard间是相互独立的,也就意味着同一个Term的IDF等值在不同shard上是不同的。文档的相关性算分和它所处的shard相关</p><p>在文档数量不多时,会导致相关性算分严重不准的情况发生</p><p>加上<code>explain</code>参数可查看文档内容所在shard<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "explain": true, </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "genre": &#123;</span><br><span class="line">        "query": "Comedy Children",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决思路有两个:</p><p>一是设置分片数为1个,从根本上排除问题,在文档数量不多的时候可以考虑该方。案,比如百万到千万级别的文档数量<br>二是使用<code>DFS Query-then-Fetch</code>查询方式.<code>DFS Query-then-Fetch</code>是在拿到所有文档后再重新完整的计算一次相关性算分,耗费更多的cpu和内存,执行性能也比较低下,一般不建议使用。使用方式如下:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search?search_type=dfs_query_then_fetch</span><br><span class="line">&#123;</span><br><span class="line">  "explain": false, </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "genre": &#123;</span><br><span class="line">        "query": "Comedy Children",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sorting"><a href="#sorting" class="headerlink" title="sorting"></a>sorting</h3><p>es默认会采用相关性算分排序,用户可以通过设定<code>sort</code>参数来自行设定排序规则</p><p>排序的过程实质是对字段原始内容排序的过程,这个过程中倒排索引无法发挥作用,需要用到正排索引,也就是通过文档Id和字段可以快速得到字段原始内容。</p><p>es对此提供了2种实现方式:</p><ul><li>fielddata默认禁用</li><li>doc values默认启用,除了text类型</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "sort": [</span><br><span class="line">    &#123;</span><br><span class="line">      "title": &#123;</span><br><span class="line">        "order": "desc"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Fielddata is disabled on text fields by default. Set fielddata=true on [title] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead."</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"search_phase_execution_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"all shards failed"</span>,</span><br><span class="line">    <span class="attr">"phase"</span>: <span class="string">"query"</span>,</span><br><span class="line">    <span class="attr">"grouped"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"failed_shards"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"movies"</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="string">"6pljLZ0vQQKObirnkOOsnw"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">          <span class="attr">"reason"</span>: <span class="string">"Fielddata is disabled on text fields by default. Set fielddata=true on [title] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead."</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"Fielddata is disabled on text fields by default. Set fielddata=true on [title] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead."</span>,</span><br><span class="line">      <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Fielddata is disabled on text fields by default. Set fielddata=true on [title] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead."</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法:</p><ul><li>使用keyword排序</li><li>fielddata开启<figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "sort": [</span><br><span class="line">    &#123;</span><br><span class="line">      "title.keyword": &#123;</span><br><span class="line">        "order": "desc"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Fileddata-vs-DocValues"><a href="#Fileddata-vs-DocValues" class="headerlink" title="Fileddata vs DocValues"></a>Fileddata vs DocValues</h3><table><thead><tr><th>对比</th><th>Fileddata</th><th>DocValues</th></tr></thead><tbody><tr><td>创建时机</td><td>搜索时即时创建</td><td>索引时创建</td></tr><tr><td>创建位置</td><td>JVM Heap</td><td>磁盘</td></tr><tr><td>优点</td><td>不占用磁盘空间</td><td>不占用Heap内存</td></tr><tr><td>缺点</td><td>文档过多时，即时创建花费时间长，内存占用高</td><td>减慢索引的速度，占用磁盘空间</td></tr></tbody></table><p>Fielddata默认是关闭的,可以通过如下api开启:</p><ul><li>此时字符串是按照分词后的term排序,往往结果很难符合预期</li><li>一般是在对分词做聚合分析的时候开启,</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT movies/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  "properties": &#123;</span><br><span class="line">    "title": &#123;</span><br><span class="line">      "type": "text",</span><br><span class="line">      "fielddata": true     # 可随时开启</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 开启后在查询不会报错</span><br><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "sort": [</span><br><span class="line">    &#123;</span><br><span class="line">      "title.keyword": &#123;</span><br><span class="line">        "order": "desc"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Doc Values默认是启用的,可以在创建索引的时候关闭:-如果后面要再开启doc values ,需要做reindex操作</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELETE test_doc_values</span><br><span class="line">PUT test_doc_values</span><br><span class="line">PUT test_doc_values/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  "properties": &#123;</span><br><span class="line">    "username": &#123;</span><br><span class="line">      "type": "keyword",</span><br><span class="line">      "doc_values": false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭后在排序会报错</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET test_doc_values/_search</span><br><span class="line">&#123;</span><br><span class="line">  "sort": [</span><br><span class="line">    &#123;</span><br><span class="line">      "username": &#123;</span><br><span class="line">        "order": "desc"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Can't load fielddata on [username] because fielddata is unsupported on fields of type [keyword]. Use doc values instead."</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"search_phase_execution_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"all shards failed"</span>,</span><br><span class="line">    <span class="attr">"phase"</span>: <span class="string">"query"</span>,</span><br><span class="line">    <span class="attr">"grouped"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"failed_shards"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_doc_values"</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="string">"6pljLZ0vQQKObirnkOOsnw"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">          <span class="attr">"reason"</span>: <span class="string">"Can't load fielddata on [username] because fielddata is unsupported on fields of type [keyword]. Use doc values instead."</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"Can't load fielddata on [username] because fielddata is unsupported on fields of type [keyword]. Use doc values instead."</span>,</span><br><span class="line">      <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Can't load fielddata on [username] because fielddata is unsupported on fields of type [keyword]. Use doc values instead."</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>text类型不支持Doc Values,Fielddata只能支持与text类型</p></blockquote><h3 id="分页与遍历"><a href="#分页与遍历" class="headerlink" title="分页与遍历"></a>分页与遍历</h3><p>分页与遍历-fromsize</p><p>es提供了3种方式来解决分页与遍历的问题:</p><ul><li>from/size</li><li>scroll</li><li>search_after<br>from/size最常用的分页方案</li></ul><p>from指明开始位置size指明获取总数</p><p><strong>深度分页是一个经典的问题:在数据分片存储的情况下如何获取前1000个文档?</strong><br>获取从990-1000的文档时,会在每个分片上都先获取1000个文档,然后再由.Coordinating Node聚合所有分片的结果后再排序选取前1000个文档<br>页数越深,处理文档越多,占用内存越多,耗时越长,尽量避免深度分页, es通过 index.max_result_window限定最多到10000条数据</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "from": 10,</span><br><span class="line">  "size": 10000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "from": 10000,</span><br><span class="line">  "size": 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Result window is too large, from + size must be less than or equal to: [10000] but was [10010]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting."</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"search_phase_execution_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"all shards failed"</span>,</span><br><span class="line">    <span class="attr">"phase"</span>: <span class="string">"query"</span>,</span><br><span class="line">    <span class="attr">"grouped"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"failed_shards"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"movies"</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="string">"6pljLZ0vQQKObirnkOOsnw"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">          <span class="attr">"reason"</span>: <span class="string">"Result window is too large, from + size must be less than or equal to: [10000] but was [10010]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting."</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"Result window is too large, from + size must be less than or equal to: [10000] but was [10010]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting."</span>,</span><br><span class="line">      <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"Result window is too large, from + size must be less than or equal to: [10000] but was [10010]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting."</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="分页与遍历-scroll"><a href="#分页与遍历-scroll" class="headerlink" title="分页与遍历-scroll"></a>分页与遍历-scroll</h3><p>遍历文档集的api ,以快照的方式来避免深度分页的问题</p><ul><li>不能用来做实时搜索,因为数据不是实时的</li><li>尽量不要使用复杂的sort条件,使用_doc最高效</li><li>使用稍嫌复杂</li></ul><p>第一步需要发起1个scroll search:</p><p>es在收到该请求后会根据查询条件创建文档Id合集的快照</p><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search?scroll=5m</span><br><span class="line">&#123;</span><br><span class="line">  "size": 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">5m至快照有效时常，size返回条数</span></span><br></pre></td></tr></table></figure><p>response<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_scroll_id"</span> : <span class="string">"DnF1ZXJ5VGhlbkZldGNoAgAAAAAAAAagFnY3WnRoVnRLVDNtWncyZ3k4QzlKU1EAAAAAAAAGnxZ2N1p0aFZ0S1QzbVp3Mmd5OEM5SlNR"</span>,</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">9743</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"movies"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"movieId"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"year"</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"title"</span>,</span><br><span class="line">          <span class="attr">"@version"</span> : <span class="string">"1"</span>,</span><br><span class="line">          <span class="attr">"genre"</span> : [</span><br><span class="line">            <span class="string">"genres"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"id"</span> : <span class="string">"movieId"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二步调用scroll search的api ,获取文档集合</p><p>不断迭代调用直到返回hits.hits数组为空时停止<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _search/scroll</span><br><span class="line">&#123;</span><br><span class="line">  "scroll": "5m",</span><br><span class="line">  "scroll_id": "DnF1ZXJ5VGhlbkZldGNoAgAAAAAAAAagFnY3WnRoVnRLVDNtWncyZ3k4QzlKU1EAAAAAAAAGnxZ2N1p0aFZ0S1QzbVp3Mmd5OEM5SlNR"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>过多的scroll调用会占用大量内存,可以通过clear api删除过多的scroll快照:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELETE _search/scroll</span><br><span class="line">&#123;</span><br><span class="line">  "scroll_id":["DnF1ZXJ5VGhlbkZldGNoAgAAAAAAAAagFnY3WnRoVnRLVDNtWncyZ3k4QzlKU1EAAAAAAAAGnxZ2N1p0aFZ0S1QzbVp3Mmd5OEM5SlNR"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE _search/scroll/_all</span><br></pre></td></tr></table></figure></p><h3 id="分页与遍历-search-after"><a href="#分页与遍历-search-after" class="headerlink" title="分页与遍历-search_after"></a>分页与遍历-search_after</h3><p>避免深度分页的性能问题,提供实时的下一页文档获取功能</p><ul><li>缺点是不能使用from参数,即不能指定页数</li><li>只能下一页,不能上一页</li><li>使用简单</li></ul><p>第一步为正常的搜索,但要指定sort值,并保证值唯一<br>第二步为使用上一步最后一个文档的sort值进行查询</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 1, </span><br><span class="line">  "sort": [</span><br><span class="line">    &#123;</span><br><span class="line">      "year": "desc",</span><br><span class="line">      "title": "desc"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">9743</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"movies"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"187717"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"year"</span> : <span class="number">2018</span>,</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"Won't You Be My Neighbor?"</span>,</span><br><span class="line">          <span class="attr">"@version"</span> : <span class="string">"1"</span>,</span><br><span class="line">          <span class="attr">"genre"</span> : [</span><br><span class="line">            <span class="string">"Documentary"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"id"</span> : <span class="string">"187717"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">2018</span>,</span><br><span class="line">          <span class="string">"you"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 1,</span><br><span class="line">  "sort": [</span><br><span class="line">    &#123;</span><br><span class="line">      "year": "desc",</span><br><span class="line">      "title": "desc"</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "search_after": [2018,"you"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何避免深度分页问题?<br>通过唯一排序值定位将每次要处理的文档数都控制在size内</p><p>返回排序值在search after之后的size个文档，假如size=10,有5个分片，Coordinating Node只需要聚合5个分片取10个文档共50个文档，然后在取前10个文档返回即可<br>有效的控制了聚合的文档的数量</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h3><table><thead><tr><th>类型</th><th>场景</th></tr></thead><tbody><tr><td>from/size</td><td>需要实时获取顶部的文档，可自由分页</td></tr><tr><td>scroll</td><td>需要全部文档，常用于导出，数据非实时</td></tr><tr><td>search after</td><td>需要全部的文档，不需要自由分页，数据实时</td></tr></tbody></table><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html" target="_blank" rel="noopener">search 官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Term Match</title>
      <link href="/2019/10/31/2019-10-31-elasticsearch-term/"/>
      <url>/2019/10/31/2019-10-31-elasticsearch-term/</url>
      
        <content type="html"><![CDATA[<h2 id="Term"><a href="#Term" class="headerlink" title="Term"></a>Term</h2><p><code>term query</code>会去倒排索引中寻找确切的<code>term</code>，它并不知道分词器的存在，这种查询适合<code>keyword</code>、<code>numeric</code>、<code>date</code>等明确值的</p><p>term：查询某个字段里含有某个关键词的文档</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "username": "alfred"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">"hits" : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.636667</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">28</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1980-05-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.48898652</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"4"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.39691794</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred junior way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1989-08-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></p><p>发现，<code>username</code>里有关<code>alfred</code>的关键字都查出来了，但是我只想精确匹配<code>alfred way</code>这个，按照下面的写法看看能不能查出来：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "username": "alfred way"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行发现无数据，从概念上看，<code>term</code>属于精确匹配，只能查单个词。我想用<code>term</code>匹配多个词怎么做？可以使用terms来：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "terms": &#123;</span><br><span class="line">      "username": ["alfred", "way"]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现全部查询出来，为什么？因为<code>terms</code>里的<code>[ ]</code>多个是或者的关系，只要满足其中一个词就可以。想要通知满足两个词的话，就得使用在search api那篇中提到的<code>bool</code>查询来做了</p><p>match查询：</p><p>match query 知道分词器的存在，会对field进行分词操作，然后再查询<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username": "alfred"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>match_all：查询所有文档<br>{ “match_all”: {}} 匹配所有的， 当不给查询条件时，默认。<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_all": &#123;</span><br><span class="line">      "boost": 1.2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>_score</code>随boost值改变而改变:</p><p>multi_match：可以指定多个字段<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "profile": "true", </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "multi_match": &#123;</span><br><span class="line">      "query" : "alfred java",</span><br><span class="line">      "fields":  ["username","job"]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">"hits" : [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">0.636667</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"username"</span> : <span class="string">"alfred way"</span>,</span><br><span class="line">      <span class="attr">"job"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">      <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">      <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">      <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">0.636667</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"username"</span> : <span class="string">"alfred"</span>,</span><br><span class="line">      <span class="attr">"job"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">      <span class="attr">"age"</span> : <span class="number">28</span>,</span><br><span class="line">      <span class="attr">"birth"</span> : <span class="string">"1980-05-07"</span>,</span><br><span class="line">      <span class="attr">"isMarried"</span> : <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">0.48898652</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"username"</span> : <span class="string">"lee"</span>,</span><br><span class="line">      <span class="attr">"job"</span> : <span class="string">"java and ruby engineer"</span>,</span><br><span class="line">      <span class="attr">"age"</span> : <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"birth"</span> : <span class="string">"1985-08-07"</span>,</span><br><span class="line">      <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"4"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">0.39691794</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"username"</span> : <span class="string">"alfred junior way"</span>,</span><br><span class="line">      <span class="attr">"job"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">      <span class="attr">"age"</span> : <span class="number">23</span>,</span><br><span class="line">      <span class="attr">"birth"</span> : <span class="string">"1989-08-07"</span>,</span><br><span class="line">      <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 部署小记</title>
      <link href="/2019/10/25/2019-10-25-hexo-deploy/"/>
      <url>/2019/10/25/2019-10-25-hexo-deploy/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo部署流程"><a href="#hexo部署流程" class="headerlink" title="hexo部署流程"></a>hexo部署流程</h2><ul><li><p>开启本地web服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>生成静态文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>文件压缩:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure></li><li><p>文件部署到远程服务器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><h2 id="gulp安装："><a href="#gulp安装：" class="headerlink" title="gulp安装："></a>gulp安装：</h2><h3 id="安装-gulp"><a href="#安装-gulp" class="headerlink" title="安装 gulp"></a>安装 gulp</h3><p>使用 npm install xxx –save命令分别安装如下工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line"><span class="string">"gulp-htmlclean"</span>: <span class="string">"^2.7.6"</span>,</span><br><span class="line"><span class="string">"gulp-htmlmin"</span>: <span class="string">"^1.3.0"</span>,</span><br><span class="line"><span class="string">"gulp-imagemin"</span>: <span class="string">"^2.4.0"</span>,</span><br><span class="line"><span class="string">"gulp-minify-css"</span>: <span class="string">"^1.2.4"</span>,</span><br><span class="line"><span class="string">"gulp-uglify"</span>: <span class="string">"^1.5.3"</span>,</span><br></pre></td></tr></table></figure></p><h3 id="建立-gulpfile-js-文件"><a href="#建立-gulpfile-js-文件" class="headerlink" title="建立 gulpfile.js 文件"></a>建立 gulpfile.js 文件</h3><p>在 Hexo 的根目录建立 gulpfile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: <span class="string">'ie8'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/js/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">            [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;),</span><br><span class="line">                imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">                imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;),</span><br><span class="line">                imagemin.svgo()],</span><br><span class="line">            &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span>,<span class="string">'minify-images'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Index API</title>
      <link href="/2019/09/22/2019-09-22-elastic/"/>
      <url>/2019/09/22/2019-09-22-elastic/</url>
      
        <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="什么是文档"><a href="#什么是文档" class="headerlink" title="什么是文档"></a>什么是文档</h3><p>程序中大多的实体或对象能够被序列化为包含键值对的JSON对象，键(key)是字段(field)或属性(property)的名字，值(value)可以是字符串、数字、布尔类型、另一个对象、值数组或者其他特殊类型，比如表示日期的字符串或者表示地理位置的对象<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:         <span class="string">"John Smith"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:          <span class="number">42</span>,</span><br><span class="line">    <span class="attr">"confirmed"</span>:    <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"join_date"</span>:    <span class="string">"2014-06-01"</span>,</span><br><span class="line">    <span class="attr">"home"</span>: &#123;</span><br><span class="line">        <span class="attr">"lat"</span>:      <span class="number">51.5</span>,</span><br><span class="line">        <span class="attr">"lon"</span>:      <span class="number">0.1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"accounts"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"facebook"</span>,</span><br><span class="line">            <span class="attr">"id"</span>:   <span class="string">"johnsmith"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"twitter"</span>,</span><br><span class="line">            <span class="attr">"id"</span>:   <span class="string">"johnsmith"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>通常，我们可以认为对象(object)和文档(document)是等价相通的。不过，他们还是有所差别：对象(Object)是一个JSON结构体——类似于哈希、hashmap、字典或者关联数组；对象(Object)中还可能包含其他对象(Object)。 在Elasticsearch中，文档(document)这个术语有着特殊含义。它特指最顶层结构或者根对象(root object)序列化成的JSON数据（以唯一ID标识并存储于Elasticsearch中）。</p></blockquote><h3 id="归结"><a href="#归结" class="headerlink" title="归结"></a>归结</h3><ol><li><p>Json Object,由字段组成：</p><ul><li>字符串：text, keyword</li><li>数值型：long,integer,short,byte,double,float,half_float,scled_float</li><li>布尔：boolean</li><li>日期：date</li><li>二进制：binary</li><li>范围类型：integer_range,float_range,long_range,double_range,date_range</li></ul></li><li><p>每个文档有唯一的id标识</p><ul><li>自行指定</li><li>es生成</li></ul></li><li><p>元数据，用于标注文档的相关信息</p><ul><li>_index：文档所在的索引名    </li><li>_type：文档所在的类型名    </li><li>_id：文档唯一id    </li><li>_uid：组合id,由_type和_id组成(6.x_type不再起作用，同_id一样)   </li><li>_source：文档的原始Json数据，可以从这里获取每个字段的内容    </li><li>_all：整合所有字段内容到该字段，默认禁用 </li></ul></li></ol><h3 id="文档元数据"><a href="#文档元数据" class="headerlink" title="文档元数据"></a>文档元数据</h3><p>一个文档不只有数据。它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是：</p><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td>_index</td><td>文档存储的地方</td></tr><tr><td>_type</td><td>文档代表的对象的类</td></tr><tr><td>_id</td><td>文档的唯一标识</td></tr></tbody></table><p><strong>_index</strong></p><p>索引(index)类似于关系型数据库里的“数据库”——它是我们存储和索引关联数据的地方。</p><blockquote><p>事实上，我们的数据被存储和索引在分片(shards)中，索引只是一个把一个或多个分片分组在一起的逻辑空间。然而，这只是一些内部细节——我们的程序完全不用关心分片。对于我们的程序而言，文档存储在索引(index)中。剩下的细节由Elasticsearch关心既可。</p></blockquote><p><strong>_type</strong><br>在应用中，我们使用对象表示一些“事物”，例如一个用户、一篇博客、一个评论，或者一封邮件。每个对象都属于一个类(class)，这个类定义了属性或与对象关联的数据。user类的对象可能包含姓名、性别、年龄和Email地址。<br>在关系型数据库中，我们经常将相同类的对象存储在一个表里，因为它们有着相同的结构。同理，在Elasticsearch中，我们使用相同类型(type)的文档表示相同的“事物”，因为他们的数据结构也是相同的。<br>每个类型(type)都有自己的映射(mapping)或者结构定义，就像传统数据库表中的列一样。所有类型下的文档被存储在同一个索引下，但是类型的映射(mapping)会告诉Elasticsearch不同的文档如何被索引。</p><blockquote><p>在7.0前，一个index可以设置多个type,在7.0后type统一为_doc</p></blockquote><p><strong>_id</strong></p><p>id仅仅是一个字符串，它与_index和_type组合时，就可以在Elasticsearch中唯一标识一个文档。当创建一个文档，你可以自定义_id，也可以让Elasticsearch帮你自动生成。</p><h2 id="Index-Api"><a href="#Index-Api" class="headerlink" title="Index Api"></a>Index Api</h2><p>以下操作均在es7.2版本操作</p><h3 id="Index-createorupdate"><a href="#Index-createorupdate" class="headerlink" title="Index(createorupdate)"></a>Index(createorupdate)</h3><p>PUT {_index}/{_type}/{_id}<br>POST {_index}/{_type}/{_id}(id可不指定)</p><p>创建一个索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT test_index</span><br></pre></td></tr></table></figure></p><p>创建一个索引并指定文档内容和id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;alfred&quot;,</span><br><span class="line">  &quot;age&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个索引指定文档内容自动生成id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;lili&quot;,</span><br><span class="line">  &quot;age&quot;:22</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>文档不存在执行的是创建操作，存在的话回变为更新操作，并且_version会增加1</p><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>有两种方式:</p><p>第一种方法使用op_type查询参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/_doc/1?op_type=create</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;alfred&quot;,</span><br><span class="line">  &quot;age&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者第二种方法是在URL后加/_create做为端点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/_doc/1/_create</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;alfred&quot;,</span><br><span class="line">  &quot;age&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果请求成功的创建了一个新文档，Elasticsearch将返回正常的元数据且响应状态码是201 Created。<br>另一方面，如果包含相同的_index、_type和_id的文档已经存在，Elasticsearch将返回409 Conflict响应状态码，错误信息类似如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"[1]: version conflict, document already exists (current version [6])"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"vENoH2YDQRiFHvu_pfzDcg"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"[1]: version conflict, document already exists (current version [6])"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"vENoH2YDQRiFHvu_pfzDcg"</span>,</span><br><span class="line">    <span class="attr">"shard"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>POST和PUT的区别是POST不用加具体的id，它是作用在一个集合资源之上的（/uri），而PUT操作是作用在一个具体资源之上的（/uri/xxx）。<br>在ES中，如果不确定document的ID（documents具体含义见下），那么直接POST对应uri（ “POST /website/blog” ），ES可以自己生成不会发生碰撞的UUID；<br>如果确定document的ID，比如 “PUT /website/blog/123”，那么执行创建或修改（修改时_version版本号提高1）</p></blockquote><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;hobby&quot;: &quot;hit&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test_index</span><br></pre></td></tr></table></figure><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><p>获取所有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_search</span><br></pre></td></tr></table></figure></p><p>指定id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_doc/1</span><br></pre></td></tr></table></figure></p><p>归结</p><table><thead><tr><th>操作</th><th>请求</th></tr></thead><tbody><tr><td>Create</td><td>PUT /test_index/_doc/1/_create<br>{“username”:”alfred”,”age”:1}<br>POST /test_index/_doc/<br>{“username”:”alfred”,”age”:1}(不指定id自动生成)</td></tr><tr><td>Index</td><td>PUT Or POST /test_index/_doc/1/<br>{“username”:”alfred”,”age”:1}</td></tr><tr><td>Read</td><td>GET /test_index/_doc/1</td></tr><tr><td>Update</td><td>POST /test_index/_update/1<br>{“doc”: {“sex”: “女”}}</td></tr><tr><td>Delete</td><td>DELETE test_index2</td></tr></tbody></table><blockquote><p>Index和Update<br>Index实际上是文档不存在会创建一个文档，存在则会删除原来的文档，新的文档被索引，并且version加1<br>Update不会删除原来的文档，实现真正的更新，POST方法的payload需包含在”doc”里</p></blockquote><h3 id="Bulk"><a href="#Bulk" class="headerlink" title="Bulk"></a>Bulk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test_index&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;alfred&quot;,&quot;age&quot;:20&#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test_index&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;2&quot;,&quot;_index&quot;:&quot;test_index&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;age&quot;:&quot;20&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="批量查询api"><a href="#批量查询api" class="headerlink" title="批量查询api"></a>批量查询api</h3><p>es允许一次查询多个文档，如果你需要从Elasticsearch中检索多个文档，相对于一个一个的检索，更快的方式是在一个请求中使用multi-get或者mget API。</p><p>mget API参数是一个docs数组，数组的每个节点定义一个文档的_index、_type、_id元数据。如果你只想检索一个或几个确定的字段，也可以定义一个_source参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST _mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: 1,</span><br><span class="line">      &quot;_index&quot;:&quot;test_index&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: 2,</span><br><span class="line">      &quot;_index&quot;:&quot;test_index&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体也包含一个docs数组，每个文档还包含一个响应，它们按照请求定义的顺序排列。每个这样的响应与单独使用get request响应体相同：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docs"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">      <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"_seq_no"</span> : <span class="number">17</span>,</span><br><span class="line">      <span class="attr">"_primary_term"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"_source"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"lili"</span>,</span><br><span class="line">        <span class="attr">"age"</span> : <span class="string">"10"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">      <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"_seq_no"</span> : <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"_primary_term"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"_source"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"john"</span>,</span><br><span class="line">        <span class="attr">"age"</span> : <span class="string">"40"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想检索的文档在同一个_index中，你就可以在URL中定义一个默认的/_index。<br>你依旧可以在单独的请求中使用这些值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_doc/_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123; &quot;_id&quot; : 2 &#125;,</span><br><span class="line">      &#123; &quot;_id&quot; : 1 &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在7.0以上版本后，_doc在mget中可以省略，不省略会提示#! Deprecation: [types removal] Specifying types in multi get requests is deprecated.</p></blockquote><p>事实上，如果所有文档具有相同_index，你可以通过简单的ids数组来代替完整的docs数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;ids&quot; : [ &quot;4&quot;, &quot;1&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不存在的文档会显示found:false<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docs"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"4"</span>,</span><br><span class="line">      <span class="attr">"found"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">      <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"_seq_no"</span> : <span class="number">17</span>,</span><br><span class="line">      <span class="attr">"_primary_term"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"_source"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"lili"</span>,</span><br><span class="line">        <span class="attr">"age"</span> : <span class="string">"10"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>尽管前面提到有一个文档没有被找到，但HTTP请求状态码还是200。事实上，就算所有文档都找不到，请求也还是返回200，原因是mget请求本身成功了。如果想知道每个文档是否都成功了，你需要检查found标志。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubectl命令行管理工具</title>
      <link href="/2019/09/14/2019-09-14-kubectl/"/>
      <url>/2019/09/14/2019-09-14-kubectl/</url>
      
        <content type="html"><![CDATA[<h2 id="kubectl命令行管理工具"><a href="#kubectl命令行管理工具" class="headerlink" title="kubectl命令行管理工具"></a>kubectl命令行管理工具</h2><p><img src="/img/in-post/2019-09-14/1.jpg" alt="avatar"></p><h3 id="管理周期"><a href="#管理周期" class="headerlink" title="管理周期"></a>管理周期</h3><p>1.创建</p><p>kubectl run nginx –replicas=3 –image=nginx:1.14 –port=80 </p><p>kubectl get deploy,pods</p><p>2.发布</p><p>kubectl expose deployment nginx –port=80 –type=NodePort –target-port=80 –name=nginx-service </p><p>kubectl get service</p><p>3.更新</p><p>kubectl set image deployment/nginx nginx=nginx:1.15</p><p>4.回滚</p><p>kubectl rollout history deployment/nginx </p><p>kubectl rollout undo deployment/nginx</p><p>5.删除</p><p>kubectl delete deploy/nginx</p><p>kubectl delete svc/nginx-service</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">kubectl run &lt;deployment&gt; --replicas=&lt;副本数&gt; --image=&lt;image&gt; --port=&lt;port&gt;</span><br><span class="line"><span class="comment">#获取所有deploy</span></span><br><span class="line">kubectl get deploy</span><br><span class="line"><span class="comment">#获取某个deploy</span></span><br><span class="line">kubectl get deploy/nginx</span><br></pre></td></tr></table></figure><h2 id="kubectl远程连接k8s集群"><a href="#kubectl远程连接k8s集群" class="headerlink" title="kubectl远程连接k8s集群"></a>kubectl远程连接k8s集群</h2><p>创建sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">APISERVER=<span class="variable">$1</span></span><br><span class="line">SSL_DIR=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kubelet bootstrapping kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://<span class="variable">$APISERVER</span>:6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=<span class="variable">$SSL_DIR</span>/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置用户项中cluster-admin用户证书认证字段</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials cluster-admin \</span><br><span class="line">--certificate-authority=<span class="variable">$SSL_DIR</span>/ca.pem \</span><br><span class="line">--client-key=<span class="variable">$SSL_DIR</span>/admin-key.pem \</span><br><span class="line">--client-certificate=<span class="variable">$SSL_DIR</span>/admin.pem \</span><br><span class="line">--kubeconfig=config</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置默认上下文</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default --cluster=kubernetes --user=cluster-admin --kubeconfig=config</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置当前环境的default</span></span><br><span class="line">kubectl config use-context default --kubeconfig=config</span><br></pre></td></tr></table></figure><p>执行脚本文件生成config文件<br>eg:<br><figure class="highlight sh"><figcaption><span>config.sh <ip> <ssl-dir>```</ssl-dir></ip></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```bash</span><br><span class="line">mkdir ~/.kube</span><br><span class="line">cp config ~/.kube</span><br></pre></td></tr></table></figure></p><blockquote><p>证书文件需与master节点生成的证书一致</p></blockquote><p>执行kubectl get node 即可看到集群信息</p><h2 id="YAML配置文件"><a href="#YAML配置文件" class="headerlink" title="YAML配置文件"></a>YAML配置文件</h2><p>YAML 是一种简洁的非标记语言。</p><p>语法格式:</p><ul><li>缩进表示层级关系</li><li>不支持制表符“tab”缩进，使用空格缩进 • 通常开头缩进 2 个空格</li><li>字符后缩进 1 个空格，如冒号、逗号等</li><li>“—” 表示YAML格式，一个文件的开始</li><li>“#” 注释</li></ul><h3 id="YAML配置文件管理资源"><a href="#YAML配置文件管理资源" class="headerlink" title="YAML配置文件管理资源"></a>YAML配置文件管理资源</h3><ul><li>用run命令生成<br>kubectl run –image=nginx nginx -o yaml –dry-run &gt; my-deploy.yaml</li><li>用get命令导出<br>kubectl get my-deploy/nginx -o=yaml –export &gt; my-deploy.yaml</li><li>Pod容器的字段拼写忘记了<br>kubectl explain pods.spec.containers</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Kubenetets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubenetets 安装</title>
      <link href="/2019/08/31/2019-08-31-k8s/"/>
      <url>/2019/08/31/2019-08-31-k8s/</url>
      
        <content type="html"><![CDATA[<h2 id="几种部署方式"><a href="#几种部署方式" class="headerlink" title="几种部署方式"></a>几种部署方式</h2><ul><li>minikube安装</li></ul><p>Minikube是一个工具，可以在本地快速运行一个单点的Kubernetes，仅用于尝试Kubernetes或日常开发的用户使用。 部署地址:<a href="https://kubernetes.io/docs/setup/minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/minikube/</a></p><ul><li>kubeadm</li></ul><p>Kubeadm也是一个工具，提供kubeadm init和kubeadm join，用于快速部署Kubernetes集群。 部署地址:<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></p><ul><li>二进制包</li></ul><p>推荐，从官方下载发行版的二进制包，手动部署每个组件，组成Kubernetes集群。 下载地址:<a href="https://github.com/kubernetes/kubernetes/releases" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/releases</a></p><h2 id="环境概要"><a href="#环境概要" class="headerlink" title="环境概要"></a>环境概要</h2><p>本次部署采用二进制包部署方式</p><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>CentOS7.2_x64</td></tr><tr><td>Docker</td><td>18-ce</td></tr><tr><td>Kubernetes</td><td>1.12</td></tr></tbody></table><h3 id="服务器角色"><a href="#服务器角色" class="headerlink" title="服务器角色"></a>服务器角色</h3><table><thead><tr><th>角色</th><th>IP</th><th>组件</th></tr></thead><tbody><tr><td>k8s-master</td><td>192.168.31.63</td><td>kube-apiserver，kube-controller-manager，kube-scheduler，etcd</td></tr><tr><td>k8s-node1</td><td>192.168.31.65</td><td>kubelet，kube-proxy，docker，flannel，etcd</td></tr><tr><td>k8s-node2</td><td>192.168.31.66</td><td>kubelet，kube-proxy，docker，flannel，etcd</td></tr></tbody></table><h2 id="部署Etcd集群"><a href="#部署Etcd集群" class="headerlink" title="部署Etcd集群"></a>部署Etcd集群</h2><p>使用cfssl来生成自签证书，先下载cfssl工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span><br></pre></td></tr></table></figure></p><h3 id="ssl证书介绍"><a href="#ssl证书介绍" class="headerlink" title="ssl证书介绍"></a>ssl证书介绍</h3><table><thead><tr><th>组件</th><th>使用的证书</th></tr></thead><tbody><tr><td>etcd</td><td>ca.pem，server.pem，server-key.pem</td></tr><tr><td>flannel</td><td>ca.pem，server.pem，server-key.pem</td></tr><tr><td>kube-apiserver</td><td>ca.pem，server.pem，server-key.pem</td></tr><tr><td>kubelet</td><td>ca.pem，ca-key.pem</td></tr><tr><td>kube-proxy</td><td>ca.pem，kube-proxy.pem，kube-proxy-key.pem</td></tr><tr><td>kubectl</td><td>ca.pem，admin.pem，admin-key.pem</td></tr></tbody></table><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>创建三个证书文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"www"</span>: &#123;</span><br><span class="line">         <span class="string">"expiry"</span>: <span class="string">"87600h"</span>,</span><br><span class="line">         <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd CA"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"Beijing"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; server-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"192.168.31.63"</span>,</span><br><span class="line">    <span class="string">"192.168.31.65"</span>,</span><br><span class="line">    <span class="string">"192.168.31.66"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>生成证书文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line">2019/08/31 11:55:49 [INFO] generating a new CA key and certificate from CSR</span><br><span class="line">2019/08/31 11:55:49 [INFO] generate received request</span><br><span class="line">2019/08/31 11:55:49 [INFO] received CSR</span><br><span class="line">2019/08/31 11:55:49 [INFO] generating key: rsa-2048</span><br><span class="line">2019/08/31 11:55:49 [INFO] encoded CSR</span><br><span class="line">2019/08/31 11:55:49 [INFO] signed certificate with serial number 582209368862156632257687895161263330996641539441</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br><span class="line">2019/08/31 12:00:13 [INFO] generate received request</span><br><span class="line">2019/08/31 12:00:13 [INFO] received CSR</span><br><span class="line">2019/08/31 12:00:13 [INFO] generating key: rsa-2048</span><br><span class="line">2019/08/31 12:00:13 [INFO] encoded CSR</span><br><span class="line">2019/08/31 12:00:13 [INFO] signed certificate with serial number 222283370426406561208608225086421690553432743471</span><br><span class="line">2019/08/31 12:00:13 [WARNING] This certificate lacks a <span class="string">"hosts"</span> field. This makes it unsuitable <span class="keyword">for</span></span><br><span class="line">websites. For more information see the Baseline Requirements <span class="keyword">for</span> the Issuance and Management</span><br><span class="line">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class="line">specifically, section 10.2.3 (<span class="string">"Information Requirements"</span>).</span><br></pre></td></tr></table></figure><p>pem文件是生成好的证书</p><blockquote><p>遇到这个warning可以忽略<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ca-config.json  ca-csr.json  ca.pem           server.csr       server-key.pem</span><br><span class="line">ca.csr          ca-key.pem   Kubernetes-YAML  server-csr.json  server.pem</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="部署Etcd"><a href="#部署Etcd" class="headerlink" title="部署Etcd"></a>部署Etcd</h3><p>二进制包下载地址：<a href="https://github.com/coreos/etcd/releases/tag/v3.2.12" target="_blank" rel="noopener">https://github.com/coreos/etcd/releases/tag/v3.2.12</a></p><p>将etcd安装到opt目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/etcd/&#123;bin,cfg,ssl&#125; -p</span><br><span class="line">tar zxvf etcd-v3.2.12-linux-amd64.tar.gz</span><br><span class="line">mv etcd-v3.2.12-linux-amd64/&#123;etcd,etcdctl&#125; /opt/etcd/bin/</span><br></pre></td></tr></table></figure></p><p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/etcd/cfg/etcd   </span><br><span class="line">#[Member]</span><br><span class="line">ETCD_NAME=&quot;etcd01&quot;</span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.31.63:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.31.63:2379&quot;</span><br><span class="line"></span><br><span class="line">#[Clustering]</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.31.63:2380&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.31.63:2379&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER=&quot;etcd01=https://192.168.31.63:2380,etcd02=https://192.168.31.65:2380,etcd03=https://192.168.31.66:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br></pre></td></tr></table></figure></p><ul><li>ETCD_NAME 节点名称</li><li>ETCD_DATA_DIR 数据目录</li><li>ETCD_LISTEN_PEER_URLS 集群通信监听地址</li><li>ETCD_LISTEN_CLIENT_URLS 客户端访问监听地址</li><li>ETCD_INITIAL_ADVERTISE_PEER_URLS 集群通告地址</li><li>ETCD_ADVERTISE_CLIENT_URLS 客户端通告地址</li><li>ETCD_INITIAL_CLUSTER 集群节点地址</li><li>ETCD_INITIAL_CLUSTER_TOKEN 集群Token</li><li>ETCD_INITIAL_CLUSTER_STATE 加入集群的当前状态，new是新集群，existing表示加入已有集群</li></ul><p>systemd管理etcd：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/etcd.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/etcd/cfg/etcd</span><br><span class="line">ExecStart=/opt/etcd/bin/etcd \</span><br><span class="line">--name=$&#123;ETCD_NAME&#125; \</span><br><span class="line">--data-dir=$&#123;ETCD_DATA_DIR&#125; \</span><br><span class="line">--listen-peer-urls=$&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">--listen-client-urls=$&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">--advertise-client-urls=$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">--initial-advertise-peer-urls=$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">--initial-cluster=$&#123;ETCD_INITIAL_CLUSTER&#125; \</span><br><span class="line">--initial-cluster-token=$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="line">--key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="line">--peer-cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="line">--peer-key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="line">--trusted-ca-file=/opt/etcd/ssl/ca.pem \</span><br><span class="line">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>把刚才生成的证书拷贝到配置文件中的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ca*pem server*pem /opt/etcd/ssl</span><br></pre></td></tr></table></figure></p><p>启动并设置开启启动:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start etcd</span><br><span class="line">systemctl <span class="built_in">enable</span> etcd</span><br></pre></td></tr></table></figure></p><p>都部署完成后，检查etcd集群状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/etcd/bin/etcdctl \</span><br><span class="line">--ca-file=ca.pem --cert-file=server.pem --key-file=server-key.pem \</span><br><span class="line">--endpoints=<span class="string">"https://192.168.31.63:2379,https://192.168.31.65:2379,https://192.168.31.66:2379"</span> \</span><br><span class="line">cluster-health</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">member 72130f86e474b7bb is healthy: got healthy result from https://192.168.31.66:2379</span><br><span class="line">member b46624837acedac9 is healthy: got healthy result from https://192.168.31.63:2379</span><br><span class="line">member fd9073b56d4868cb is healthy: got healthy result from https://192.168.31.65:2379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure><blockquote><p>如果输出上面信息，就说明集群部署成功。如果有问题第一步先看日志：/var/log/message 或 journalctl -u etcd</p></blockquote><h3 id="部署Flannel网络"><a href="#部署Flannel网络" class="headerlink" title="部署Flannel网络"></a>部署Flannel网络</h3><p>Falnnel要用etcd存储自身一个子网信息，所以要保证能成功连接Etcd，在master01节点写入预定义子网段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/etcd/bin/etcdctl \</span><br><span class="line">--ca-file=ca.pem --cert-file=server.pem --key-file=server-key.pem \</span><br><span class="line">--endpoints=<span class="string">"https://192.168.31.63:2379,https://192.168.31.65:2379,https://192.168.31.66:2379"</span> \</span><br><span class="line"><span class="built_in">set</span> /coreos.com/network/config  <span class="string">'&#123; "Network": "172.17.0.0/16", "Backend": &#123;"Type": "vxlan"&#125;&#125;'</span></span><br></pre></td></tr></table></figure></p><p>以下部署步骤在规划的每个node节点都操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/coreos/flannel/releases/download/v0.10.0/flannel-v0.10.0-linux-amd64.tar.gz</span><br><span class="line">tar zxvf flannel-v0.9.1-linux-amd64.tar.gz</span><br><span class="line">mv flanneld mk-docker-opts.sh /opt/kubernetes/bin</span><br></pre></td></tr></table></figure></p><p>配置部署Flannel脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ETCD_ENDPOINTS=<span class="variable">$&#123;1:-"http://127.0.0.1:2379"&#125;</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;/opt/kubernetes/cfg/flanneld</span><br><span class="line"></span><br><span class="line">FLANNEL_OPTIONS=<span class="string">"--etcd-endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span></span><br><span class="line"><span class="string">-etcd-cafile=/opt/etcd/ssl/ca.pem \</span></span><br><span class="line"><span class="string">-etcd-certfile=/opt/etcd/ssl/server.pem \</span></span><br><span class="line"><span class="string">-etcd-keyfile=/opt/etcd/ssl/server-key.pem"</span></span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;/usr/lib/systemd/system/flanneld.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network-online.target network.target</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/flanneld</span><br><span class="line">ExecStart=/opt/kubernetes/bin/flanneld --ip-masq \<span class="variable">$FLANNEL_OPTIONS</span></span><br><span class="line">ExecStartPost=/opt/kubernetes/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/subnet.env</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;/usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/run/flannel/subnet.env</span><br><span class="line">ExecStart=/usr/bin/dockerd \<span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP \<span class="variable">$MAINPID</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> flanneld</span><br><span class="line">systemctl restart flanneld</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh flannel.sh https://192.168.31.63:2379,https://192.168.31.65:2379,https://192.168.31.66:2379</span><br></pre></td></tr></table></figure><blockquote><p>如果在vagrant+virtualbox环境下需要在/opt/kubernetes/cfg/flanneld配置文件追加参数–iface=本机物理网卡名称</p></blockquote><p>网络验证<br>node01<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 vagrant]docker run -it busybox</span><br><span class="line">/ <span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue</span><br><span class="line">    link/ether 02:42:ac:11:1a:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.26.2/24 brd 172.17.26.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ <span class="comment"># ping 172.17.94.2</span></span><br><span class="line">PING 172.17.94.2 (172.17.94.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.94.2: seq=0 ttl=62 time=0.684 ms</span><br><span class="line">64 bytes from 172.17.94.2: seq=1 ttl=62 time=0.735 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.17.94.2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.684/0.709/0.735 ms</span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>node02<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@node02 ssl]docker run -it busybox</span><br><span class="line">/ <span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue</span><br><span class="line">    link/ether 02:42:ac:11:5e:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.94.2/24 brd 172.17.94.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ <span class="comment"># ping 172.17.26.2</span></span><br><span class="line">PING 172.17.26.2 (172.17.26.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.26.2: seq=0 ttl=62 time=0.604 ms</span><br><span class="line">64 bytes from 172.17.26.2: seq=1 ttl=62 time=0.571 ms</span><br><span class="line">--- 172.17.26.2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.571/0.587/0.604 ms</span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure></p><h3 id="在Master节点部署组件"><a href="#在Master节点部署组件" class="headerlink" title="在Master节点部署组件"></a>在Master节点部署组件</h3><blockquote><p>在部署Kubernetes之前一定要确保etcd、flannel、docker是正常工作的，否则先解决问题再继续。</p></blockquote><h4 id="生成证书-1"><a href="#生成证书-1" class="headerlink" title="生成证书"></a>生成证书</h4><p>创建CA证书：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat server-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"10.0.0.1"</span>,</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"192.168.31.63"</span>,</span><br><span class="line">      <span class="string">"kubernetes"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure></p><p>生成kube_proxy证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat kube-proxy-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span></span><br></pre></td></tr></table></figure></p><p>最终生成以下证书文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls *pem</span></span><br><span class="line">ca-key.pem  ca.pem  kube-proxy-key.pem  kube-proxy.pem  server-key.pem  server.pem</span><br></pre></td></tr></table></figure></p><h4 id="部署apiserver组件"><a href="#部署apiserver组件" class="headerlink" title="部署apiserver组件"></a>部署apiserver组件</h4><p>下载二进制包：<a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.12.md" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.12.md</a><br>下载这个包（kubernetes-server-linux-amd64.tar.gz）就够了，包含了所需的所有组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/kubernetes/&#123;bin,cfg,ssl&#125; -p</span><br><span class="line">tar zxvf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> kubernetes/server/bin</span><br><span class="line">cp kube-apiserver kube-scheduler kube-controller-manager kubectl /opt/kubernetes/bin</span><br><span class="line"></span><br><span class="line">sudo ln -s /opt/kubernetes/bin/kube-controller-manager /usr/<span class="built_in">local</span>/bin/kube-controller-manager</span><br><span class="line">sudo ln -s /opt/kubernetes/bin/kube-scheduler /usr/<span class="built_in">local</span>/bin/kube-scheduler</span><br><span class="line">sudo ln -s /opt/kubernetes/bin/kube-apiserver /usr/<span class="built_in">local</span>/bin/kube-apiserver</span><br><span class="line">sudo ln -s /opt/kubernetes/bin/kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br></pre></td></tr></table></figure><p>配置文件生成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /opt/kubernetes/cfg/kube-apiserver </span></span><br><span class="line"></span><br><span class="line">KUBE_APISERVER_OPTS=<span class="string">"--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--etcd-servers=https://192.168.31.63:2379,https://192.168.31.65:2379,https://192.168.31.66:2379 \</span></span><br><span class="line"><span class="string">--bind-address=192.168.31.63 \</span></span><br><span class="line"><span class="string">--secure-port=6443 \</span></span><br><span class="line"><span class="string">--advertise-address=192.168.31.63 \</span></span><br><span class="line"><span class="string">--allow-privileged=true \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.0.0.0/24 \</span></span><br><span class="line"><span class="string">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction \</span></span><br><span class="line"><span class="string">--authorization-mode=RBAC,Node \</span></span><br><span class="line"><span class="string">--enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">--token-auth-file=/opt/kubernetes/cfg/token.csv \</span></span><br><span class="line"><span class="string">--service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">--tls-cert-file=/opt/kubernetes/ssl/server.pem  \</span></span><br><span class="line"><span class="string">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \</span></span><br><span class="line"><span class="string">--client-ca-file=/opt/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \</span></span><br><span class="line"><span class="string">--etcd-cafile=/opt/etcd/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--etcd-certfile=/opt/etcd/ssl/server.pem \</span></span><br><span class="line"><span class="string">--etcd-keyfile=/opt/etcd/ssl/server-key.pem"</span></span><br></pre></td></tr></table></figure></p><p>配置好前面生成的证书，确保能连接etcd。</p><p>参数说明：</p><p>–logtostderr 启用日志<br>—v 日志等级<br>–etcd-servers etcd集群地址<br>–bind-address 监听地址<br>–secure-port https安全端口<br>–advertise-address 集群通告地址<br>–allow-privileged 启用授权<br>–service-cluster-ip-range Service虚拟IP地址段<br>–enable-admission-plugins 准入控制模块<br>–authorization-mode 认证授权，启用RBAC授权和节点自管理<br>–enable-bootstrap-token-auth 启用TLS bootstrap功能，后面会讲到<br>–token-auth-file token文件<br>–service-node-port-range Service Node类型默认分配端口范围</p><p>创建token文件，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">674c457d4dcf2eefe4920d7dbb6b0ddc,kubelet-bootstrap,10001,<span class="string">"system:kubelet-bootstrap"</span></span><br></pre></td></tr></table></figure></p><p>第一列：随机字符串，自己可生成<br>第二列：用户名<br>第三列：UID<br>第四列：用户组</p><p>systemd管理apiserver：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/kube-apiserver.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-apiserver</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-apiserver <span class="variable">$KUBE_APISERVER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">systemctl restart kube-apiserver</span><br></pre></td></tr></table></figure></p><h4 id="部署scheduler组件"><a href="#部署scheduler组件" class="headerlink" title="部署scheduler组件"></a>部署scheduler组件</h4><p>配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/kubernetes/cfg/kube-scheduler </span><br><span class="line"></span><br><span class="line">KUBE_SCHEDULER_OPTS=<span class="string">"--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--master=127.0.0.1:8080 \</span></span><br><span class="line"><span class="string">--leader-elect"</span></span><br></pre></td></tr></table></figure></p><p>参数说明：</p><p>–master 连接本地apiserver<br>–leader-elect 当该组件启动多个时，自动选举（HA）</p><p>systemd管理schduler组件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/kube-scheduler.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-scheduler</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-scheduler <span class="variable">$KUBE_SCHEDULER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-scheduler</span><br><span class="line">systemctl restart kube-scheduler</span><br></pre></td></tr></table></figure></p><h4 id="部署controller-manager组件"><a href="#部署controller-manager组件" class="headerlink" title="部署controller-manager组件"></a>部署controller-manager组件</h4><p>配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/kubernetes/cfg/kube-controller-manager </span><br><span class="line">KUBE_CONTROLLER_MANAGER_OPTS=<span class="string">"--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--master=127.0.0.1:8080 \</span></span><br><span class="line"><span class="string">--leader-elect=true \</span></span><br><span class="line"><span class="string">--address=127.0.0.1 \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.0.0.0/24 \</span></span><br><span class="line"><span class="string">--cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \</span></span><br><span class="line"><span class="string">--root-ca-file=/opt/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem"</span></span><br></pre></td></tr></table></figure></p><p>systemd管理controller-manager组件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/kube-controller-manager.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-controller-manager</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-controller-manager <span class="variable">$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-controller-manager</span><br><span class="line">systemctl restart kube-controller-manager</span><br></pre></td></tr></table></figure></p><p>所有组件都已经启动成功，通过kubectl工具查看当前集群组件状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/opt/kubernetes/bin/kubectl get cs</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-1               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-2               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><p>如上输出说明组件都正常</p><h3 id="在node节点部署组件"><a href="#在node节点部署组件" class="headerlink" title="在node节点部署组件"></a>在node节点部署组件</h3><p>Master apiserver启用TLS认证后，Node节点kubelet组件想要加入集群，必须使用CA签发的有效证书才能与apiserver通信，当Node节点很多时，签署证书是一件很繁琐的事情，因此有了TLS Bootstrapping机制，kubelet会以一个低权限用户自动向apiserver申请证书，kubelet的证书由apiserver动态签署。</p><p>认证大致工作流程如图所示：<br><img src="/img/in-post/2019-09-13/1.png" alt="avatar"></p><h4 id="将kubelet-bootstrap用户绑定到系统集群角色"><a href="#将kubelet-bootstrap用户绑定到系统集群角色" class="headerlink" title="将kubelet-bootstrap用户绑定到系统集群角色"></a>将kubelet-bootstrap用户绑定到系统集群角色</h4><p>在master01节点操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">  --clusterrole=system:node-bootstrapper \</span><br><span class="line">  --user=kubelet-bootstrap</span><br></pre></td></tr></table></figure></p><h4 id="创建kubeconfig文件"><a href="#创建kubeconfig文件" class="headerlink" title="创建kubeconfig文件"></a>创建kubeconfig文件</h4><p>在master01节点操作<br>在生成kubernetes证书的目录下执行以下命令生成kubeconfig文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建kubelet bootstrapping kubeconfig </span></span><br><span class="line">BOOTSTRAP_TOKEN=674c457d4dcf2eefe4920d7dbb6b0ddc</span><br><span class="line">KUBE_APISERVER=<span class="string">"https://192.168.31.63:6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=./ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kubelet-bootstrap \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=./ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-proxy \</span><br><span class="line">  --client-certificate=./kube-proxy.pem \</span><br><span class="line">  --client-key=./kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><p>将这两个文件拷贝到Node节点/opt/kubernetes/cfg目录下。</p><h4 id="部署kubelet组件"><a href="#部署kubelet组件" class="headerlink" title="部署kubelet组件"></a>部署kubelet组件</h4><p>将前面下载的二进制包中的kubelet和kube-proxy拷贝到/opt/kubernetes/bin目录下。</p><p>创建kubelet配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /opt/kubernetes/cfg/kubelet</span></span><br><span class="line">KUBELET_OPTS=<span class="string">"--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--hostname-override=192.168.31.65 \</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">--config=/opt/kubernetes/cfg/kubelet.config \</span></span><br><span class="line"><span class="string">--cert-dir=/opt/kubernetes/ssl \</span></span><br><span class="line"><span class="string">--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0"</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>hostname-override 在集群中显示的主机名</li><li>kubeconfig 指定kubeconfig文件位置，会自动生成</li><li>bootstrap-kubeconfig 指定刚才生成的bootstrap.kubeconfig文件</li><li>cert-dir 颁发证书存放位置</li><li>pod-infra-container-image 管理Pod网络的镜像</li></ul><p>其中/opt/kubernetes/cfg/kubelet.config配置文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 192.168.31.65</span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 10255</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS: [<span class="string">"10.0.0.2"</span>]</span><br><span class="line">clusterDomain: cluster.local.</span><br><span class="line">failSwapOn: <span class="literal">false</span></span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>systemd管理kubelet组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/kubelet.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kubelet</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kubelet <span class="variable">$KUBELET_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>在Master审批Node加入集群：</p><p>启动后还没加入到集群中，需要手动允许该节点才可以。<br>在Master节点查看请求签名的Node：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get csr</span><br><span class="line">kubectl certificate approve XXXXID</span><br><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><h4 id="部署kube-proxy组件"><a href="#部署kube-proxy组件" class="headerlink" title="部署kube-proxy组件"></a>部署kube-proxy组件</h4><p>创建kube-proxy配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/kubernetes/cfg/kube-proxy</span><br><span class="line">KUBE_PROXY_OPTS=<span class="string">"--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--hostname-override=192.168.31.65 \</span></span><br><span class="line"><span class="string">--cluster-cidr=10.0.0.0/24 \</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig"</span></span><br></pre></td></tr></table></figure><p>systemd管理kube-proxy组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/kube-proxy.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-proxy</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-proxy <span class="variable">$KUBE_PROXY_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy</span><br><span class="line">systemctl restart kube-proxy</span><br></pre></td></tr></table></figure></p><p>Node2部署方式一样。</p><h4 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 system]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME            STATUS   ROLES    AGE    VERSION</span><br><span class="line">192.168.31.65   Ready    &lt;none&gt;   40m    v1.12.1</span><br><span class="line">192.168.31.66   Ready    &lt;none&gt;   108s   v1.12.1</span><br><span class="line">[root@master01 system]<span class="comment"># kubectl get cs</span></span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">etcd-2               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-1               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kubenetets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Search API</title>
      <link href="/2019/03/15/2019-03-15-elasticsearch-num5/"/>
      <url>/2019/03/15/2019-03-15-elasticsearch-num5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.5/search.html" target="_blank" rel="noopener">官方文档</a><br>实现对es中存储的数据进行查询分析，endpoint为<code>_search</code>，查询主要有两种形式：</p><ul><li>URI Search：操作简便，方便通过命令行测试，仅包含部分查询语法</li><li>Request Body Search：es提供完备查询语法Query DSL</li></ul><p>示例：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /user/_search?q=gender:M</span><br><span class="line">GET /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "gender": "M"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="URI-Search详解"><a href="#URI-Search详解" class="headerlink" title="URI Search详解"></a>URI Search详解</h2><p>通过url query参数来实现搜索，常用参数如下：</p><ul><li>q: 指定查询语句，语法为 Query String Syntax</li><li>df: q中不指定字段时默认查询的字段，如果不指定，es会查询所有字段</li><li>sort：排序</li><li>timeout：指定超时时间，默认不超时</li><li>from,size：用于分页</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /myindex/_search?q=alfred&amp;df=user&amp;sort=age:asc&amp;from=4&amp;size=10&amp;timeout=1s</span><br><span class="line">#查询user字段包含alfred的文档，结果按照age升序排列，返回第5-14个文档，如果超过1s没有结束，则以超时结束</span><br></pre></td></tr></table></figure><h2 id="Query-String-Syntax"><a href="#Query-String-Syntax" class="headerlink" title="Query String Syntax"></a>Query String Syntax</h2><h3 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h3><ol><li><p>term与phrase</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alfred way 等效于 alfred OR way</span><br><span class="line">"alfred way" 词语查询，要求先后顺序</span><br></pre></td></tr></table></figure></li><li><p>泛查询</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alfred等效于在所有字段去匹配该term</span><br></pre></td></tr></table></figure></li><li><p>指定字段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:alfred</span><br></pre></td></tr></table></figure></li><li><p>Group分组指定，使用括号指定匹配的规则</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(quick OR brown) AND fox</span><br><span class="line">status:(active OR pending) title:(full text search)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>q=&lt;…&gt;内容如果有空格会当作or处理</p></blockquote><blockquote><p>加括号和不加括号的区别：加括号表示status是active或status是pengding结果，不加括号表示<br>status是active或者结果中包含pending</p></blockquote><ol start="5"><li><p>布尔操作符<br>AND(&amp;&amp;),OR(||),NOT(!)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:(tom NOT lee) 注意大写，不能小写</span><br></pre></td></tr></table></figure></li><li><p>“+ -“分别对应must和must_not</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name:(tom +lee -alfred)</span><br><span class="line">等价于</span><br><span class="line">name:((lee &amp;&amp; !alfred)||(tom &amp;&amp; lee &amp;&amp; !alfred))</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>+在url中会被解析为空格，要使用encode后的结果才可以，为%2B</p></blockquote><ol start="7"><li>范围查询，支持数值和日志</li></ol><ul><li><p>区间写法，闭区间用[],开区间用{}</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age: [1 TO 10]意为 1&lt;=age&lt;=10</span><br><span class="line">age: [1 TO 10&#125;意为 1&lt;=age&lt;10</span><br><span class="line">age: [1 TO ]意为 age&gt;=1</span><br><span class="line">age: [* TO 10]意为 age&lt;=10</span><br></pre></td></tr></table></figure></li><li><p>算数符号写法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age:&gt;=1</span><br><span class="line">age:(&gt;=1&amp;&amp;&lt;=10)或者age:(+&gt;=1 +&lt;=10)</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li><p>通配符查询：？代表一个字符，*代表0或多个字符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name:t?m</span><br><span class="line">name:tom*</span><br><span class="line"></span><br><span class="line">通配符匹配执行效率低，且占用较多内存，不建议使用</span><br><span class="line">如无特殊需求，不要将?/*放在最前面</span><br></pre></td></tr></table></figure></li><li><p>正则表达式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:/[mb]oat/</span><br></pre></td></tr></table></figure></li><li><p>模糊匹配 fuzzy query</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name:roam~1</span><br><span class="line">匹配与roam差一个character的词，比如foam roams等</span><br></pre></td></tr></table></figure></li><li><p>近似度查询 proximity search</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"fox quick"~5</span><br><span class="line">允许fox 和quick 之间差5个词语</span><br><span class="line">以term为单位进行差异比较，比如"quick fox" "quick brown fox"都会被匹配</span><br></pre></td></tr></table></figure></li></ol><h3 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h3><p>添加一些数据<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELETE test_search_index</span><br><span class="line"></span><br><span class="line">PUT test_search_index</span><br><span class="line">&#123;</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "index":&#123;</span><br><span class="line">        "number_of_shards": "1"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST test_search_index/_bulk</span><br><span class="line">&#123;"index":&#123;"_id":"1"&#125;&#125;</span><br><span class="line">&#123;"username":"alfred way","job":"java engineer","age":18,"birth":"1990-01-02","isMarried":false&#125;</span><br><span class="line">&#123;"index":&#123;"_id":"2"&#125;&#125;</span><br><span class="line">&#123;"username":"alfred","job":"java senior engineer and java specialist","age":28,"birth":"1980-05-07","isMarried":true&#125;</span><br><span class="line">&#123;"index":&#123;"_id":"3"&#125;&#125;</span><br><span class="line">&#123;"username":"lee","job":"java and ruby engineer","age":22,"birth":"1985-08-07","isMarried":false&#125;</span><br><span class="line">&#123;"index":&#123;"_id":"4"&#125;&#125;</span><br><span class="line">&#123;"username":"alfred junior way","job":"ruby engineer","age":23,"birth":"1989-08-07","isMarried":false&#125;</span><br></pre></td></tr></table></figure></p><p>查询所有关键词中有alfred的<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=alfred</span><br><span class="line">#profile设置为true可以分析elasticsearch的具体过程</span><br><span class="line">GET test_search_index/_search?q=alfred</span><br><span class="line">&#123;</span><br><span class="line">  "profile":true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询所有关键词中有alfred的并指定为username字段<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:alfred</span><br></pre></td></tr></table></figure></p><p>查询所有关键词中有alfred或者way的并指定为username字段<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:alfred way</span><br></pre></td></tr></table></figure></p><p>如果加上””则表示关键词中必须包含alfred way<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:"alfred way"</span><br></pre></td></tr></table></figure></p><p>username字段中必须包含alfred和其它字段包含way的<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:alfred AND way</span><br></pre></td></tr></table></figure></p><p>username字段中必须包含alfred和way的<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:(alfred AND way)</span><br></pre></td></tr></table></figure></p><p>为了便于区别()的作用，在加入一条数据</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST test_search_index/doc/_bulk/</span><br><span class="line">&#123;"index":&#123;"_id":"7"&#125;&#125;</span><br><span class="line">&#123;"username":"alfred","job":"java engineer way","age":18,"birth":"1990-01-02","isMarried":false&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#q=username:alfred AND wayd的结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">2.329832</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">2.329832</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"java engineer way"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.2048805</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"4"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.966926</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred junior way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1989-08-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#q=username:(alfred AND way)的结果</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.2048805</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.2048805</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"4"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.966926</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred junior way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1989-08-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>username字段中必须包含alfred但是没有way的<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:(alfred NOT way)</span><br></pre></td></tr></table></figure></p><p>username必须含有way的<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:(alfred +way)  +会被识别为空格</span><br><span class="line">GET test_search_index/_search?q=username:(alfred %2Bway)</span><br></pre></td></tr></table></figure></p><p>范围查询：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:alfred age:&gt;26</span><br><span class="line">#username字段包含alfred或者age大于26</span><br><span class="line">GET test_search_index/_search?q=username:alfred AND age:&gt;20</span><br><span class="line">#username字段包含alfred并且age大于20</span><br><span class="line">GET test_search_index/_search?q=birth:(&gt;1980 AND &lt;1990)</span><br><span class="line">#birth字段在1980到1990之间</span><br></pre></td></tr></table></figure></p><p>正则表达式和通配符:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:alf*</span><br><span class="line">GET test_search_index/_search?q=username:/[a]?l.*/</span><br></pre></td></tr></table></figure></p><p>模糊查询和近似度：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?q=username:alfed~1</span><br><span class="line">GET test_search_index/_search?q=username:alfd~2</span><br><span class="line">GET test_search_index/_search?q=job:"java engineer"</span><br><span class="line">GET test_search_index/_search?q=job:"java engineer"~1</span><br></pre></td></tr></table></figure></p><h2 id="Request-Body-Search"><a href="#Request-Body-Search" class="headerlink" title="Request Body Search"></a>Request Body Search</h2><p>将查询语句通过http request body 发送到es，主要包含如下参数：</p><ul><li>query: 符合Query DSL语法的查询语句</li><li>from,size</li><li>timeout</li><li>sort</li><li>…</li></ul><h3 id="Query-DSL"><a href="#Query-DSL" class="headerlink" title="Query DSL"></a>Query DSL</h3><p>Query DSL: 基于json定义的查询语言，主要包含如下两种类型:</p><ul><li>字段类查询：如term、match、range等，只针对某一字段进行查询</li><li>复合查询：如bool查询等，包含一个或多个字段类查询或者复合查询语句</li></ul><h4 id="字段类查询"><a href="#字段类查询" class="headerlink" title="字段类查询"></a>字段类查询</h4><p>字段类查询主要包括以下两类：</p><ul><li>全文匹配：针对text类型的字段进行全文检索，会对查询语句先进行分词处理，如match,match_phrase等query类型</li><li>单词匹配：不会对查询语句做分词处理，直接去匹配字段的倒排索引，如term,terms,range等query类型</li></ul><p>查询示例</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username": "alfred way"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询流程如下所示：<br><img src="/img/in-post/2019-03-15/1.png" alt=""></p><p>通过operator参数可以控制单词间的匹配关系，可选项为or和and（默认为or）<br>通过minimum_should_match参数可以控制需要匹配的单词数</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username": &#123;</span><br><span class="line">        "query": "alfred way", </span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username": &#123;</span><br><span class="line">        "query": "alfred way", </span><br><span class="line">        "minimum_should_match": 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#`alfred` 和 `way`必须同时存在才能满足</span><br></pre></td></tr></table></figure><h4 id="相关性算分"><a href="#相关性算分" class="headerlink" title="相关性算分"></a>相关性算分</h4><p>相关性算分是指文档与查询语句间的相关度，英文为relevance<br>通过倒排索引可以获取与查询语句相匹配的文档列表，那么如何将最符合用户查询需求的文档放到前列呢？本质是一个排序问题，排序依据是相关性算分。</p><p>相关性算分的几个重要概念：</p><ul><li><code>Term Frequency（TF）</code>: 词频，即单词在该文档中出现的次数。词频越高，相关度越高</li><li><code>Document Frequency（DF）</code>: 文档频率，即单词出现的文档数</li><li><code>Inverse Document Frequency（IDF）</code>:逆向文档频率，与文档频率相反，简单理解为1/DF。即单词出现的文档数越少，相关度越高。</li><li><code>Field-length Norm</code>: 文档越短，相关性越高</li></ul><p>ES目前主要有两个相关性算分模型：</p><ul><li>TF/IDF模型</li><li>BM25模型：5.x之后的默认模型</li></ul><p>可以通过explain参数来查看具体的计算方法，但要注意：es的算分是按照shard进行的，即shard分数计算时互相独立的，所以在使用explain的时候注意分片数；可以通过设置索引的分片数为1来避免这个问题。</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "explain": true,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "FIELD": "TEXT"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Match-Phrase-Query"><a href="#Match-Phrase-Query" class="headerlink" title="Match-Phrase-Query"></a>Match-Phrase-Query</h4><p>对字段作检索,有顺序要求，API示例：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_phrase": &#123;</span><br><span class="line">      "job": "engineer java"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过slop参数可以控制单词间的间隔,类似url search里的近似度匹配</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_phrase": &#123;</span><br><span class="line">      "job": &#123;</span><br><span class="line">        "query": "java engineer",</span><br><span class="line">        "slop": 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Query-String-Query"><a href="#Query-String-Query" class="headerlink" title="Query-String-Query"></a>Query-String-Query</h4><p>类似于URI Search中的q参数查询</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "profile": "true", </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "query_string": &#123;</span><br><span class="line">      "default_field": "job",</span><br><span class="line">      "query": "engineer AND java"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多字段查询<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "profile": "true", </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "query_string": &#123;</span><br><span class="line">      "fields": ["username", "job"],</span><br><span class="line">      "query": "engineer AND alfred"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Simple-Query-String-Query"><a href="#Simple-Query-String-Query" class="headerlink" title="Simple-Query-String-Query"></a>Simple-Query-String-Query</h4><p>类似Query String ,但是会忽略错误的查询语法,并且仅支持部分查询语法<br>其常用的逻辑符号如下,不能使用AND, OR, NOT等关键词</p><ul><li>+代指AND</li><li>|代指OR</li><li>-代指NOT请求</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "profile": "true", </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "simple_query_string": &#123;</span><br><span class="line">      "fields": ["username"],</span><br><span class="line">      "query": "alfred +way"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与?q=alfred +way不同的是这里的alfred 和 way必须同时存在</p></blockquote><h4 id="Term-Terms-Query"><a href="#Term-Terms-Query" class="headerlink" title="Term-Terms-Query"></a>Term-Terms-Query</h4><p>将查询语句作为整个单词进行查询,即不对查询语句做分词处理:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "profile": "true", </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "username": "alfred way"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一次传入多个单词进行查询:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "profile": "true", </span><br><span class="line">  "query": &#123;</span><br><span class="line">    "terms": &#123;</span><br><span class="line">      "username": [</span><br><span class="line">        "alfred",</span><br><span class="line">        "way"</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Range-Query"><a href="#Range-Query" class="headerlink" title="Range Query"></a>Range Query</h4><p>范围查询主要针对数值和日期类型:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "range": &#123;</span><br><span class="line">      "age": &#123;</span><br><span class="line">        "gt": 20,</span><br><span class="line">        "lt": 40</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>range 过滤器既能包含也能排除范围，通过下面的选项：</p><ul><li>gt: &gt; 大于</li><li>lt: &lt; 小于</li><li>gte: &gt;= 大于或等于</li><li>lte: &lt;= 小于或等于</li></ul><p><code>range</code>过滤器也可以用于日期字段：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"range":&#123;</span><br><span class="line">    "timestamp" : &#123;</span><br><span class="line">        "gt" : "2014-01-01 00:00:00",</span><br><span class="line">        "lt" : "2014-01-07 00:00:00"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个过滤器将始终能找出所有时间戳大于当前时间减 1 小时的文档，让这个过滤器像移窗一样通过你的文档。</p><p>日期计算也能用于实际的日期，而不是仅仅是一个像 now 一样的占位符。只要在日期后加上双竖线 ||，就能使用日期数学表达式了。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"range" : &#123;</span><br><span class="line">    "timestamp" : &#123;</span><br><span class="line">        "gt" : "2014-01-01 00:00:00",</span><br><span class="line">        "lt" : "2014-01-01 00:00:00||+1M" &lt;1&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><1> 早于 2014 年 1 月 1 号加一个月<br>日期计算是与日历相关的，所以它知道每个月的天数，每年的天数，等等。更详细的关于日期的信息可以在这里找到<br><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-date-format.html" target="_blank" rel="noopener">日期格式手册</a></1></p><p><code>range</code>过滤器也可以用于字符串。字符串范围根据字典或字母顺序来计算。例如，这些值按照字典顺序排序：<br>假如我们想让范围从 a 开始而不包含 b，我们可以用类似的 range 过滤器语法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"range" : &#123;</span><br><span class="line">    "title" : &#123;</span><br><span class="line">        "gte" : "a",</span><br><span class="line">        "lt" :  "b"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>数字和日期字段的索引方式让他们在计算范围时十分高效。但对于字符串来说却不是这样。为了在字符串上执行范围操作，Elasticsearch 会在这个范围内的每个短语执行 term 操作。这比日期或数字的范围操作慢得多。<br> 字符串范围适用于一个基数较小的字段，一个唯一短语个数较少的字段。你的唯一短语数越多，搜索就越慢。</p></blockquote><h4 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h4><p>复合查询是指包含字段类查询或复合查询的类型,主要包括以下几类:</p><ul><li>constant_score query</li><li>bool query</li><li>dis_max query</li><li>function_score query</li><li>boosting query </li></ul><p><strong>Constant Score Query</strong><br>该查询将其内部的查询结果文档得分都设定为1或者boost的值<br>多用于结合bool查询实现自定义得分<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "constant_score": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "match": &#123;</span><br><span class="line">          "username": "alfred"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询结果<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">13</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">28</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1980-05-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"4"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"alfred junior way"</span>,</span><br><span class="line">          <span class="attr">"job"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">"birth"</span> : <span class="string">"1989-08-07"</span>,</span><br><span class="line">          <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Bool-Query"><a href="#Bool-Query" class="headerlink" title="Bool Query"></a>Bool Query</h4><p>布尔查询由一个或多个布尔子句组成,主要包含如下4个:</p><table><thead><tr><th>子句</th><th>含义</th></tr></thead><tbody><tr><td>filter</td><td>只过滤符合条件的文档，不计算相关性算分</td></tr><tr><td>must</td><td>文档必须符合must中所有条件，影响相关性算分</td></tr><tr><td>must_not</td><td>文档必须不符合must中所有条件</td></tr><tr><td>should</td><td>文档可以符合should中的条件，不计算相关性算分</td></tr></tbody></table><p><strong>filter</strong><br>API:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ],</span><br><span class="line">      "must_not": [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ],</span><br><span class="line">      "should": [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ],</span><br><span class="line">      "filter": [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Filter</code>查询只过滤符合条件的文档,不会进行相关性算分</p><p>es针对<code>filter</code>会有智能缓存,因此其执行效率很高<br>做简单匹配查询且不考虑算分时,推荐使用<code>filter</code>替代<code>query</code>等</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "filter": [</span><br><span class="line">        &#123;</span><br><span class="line">          "term": &#123;</span><br><span class="line">            "username":"alfred"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>must</strong>:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "username":"alfred"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "job":"java"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"_score"</span> : <span class="number">1.2314217</span>,</span><br><span class="line">  <span class="attr">"_source"</span> : &#123;</span><br><span class="line">    <span class="attr">"username"</span> : <span class="string">"alfred"</span>,</span><br><span class="line">    <span class="attr">"job"</span> : <span class="string">"java senior engineer and java specialist"</span>,</span><br><span class="line">    <span class="attr">"age"</span> : <span class="number">28</span>,</span><br><span class="line">    <span class="attr">"birth"</span> : <span class="string">"1980-05-07"</span>,</span><br><span class="line">    <span class="attr">"isMarried"</span> : <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_score"</span> : <span class="number">1.1256535</span>,</span><br><span class="line">  <span class="attr">"_source"</span> : &#123;</span><br><span class="line">    <span class="attr">"username"</span> : <span class="string">"alfred way"</span>,</span><br><span class="line">    <span class="attr">"job"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">    <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">    <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><code>_score</code>为两个match查询到的分数之和</p></blockquote><p><strong>must_not</strong>:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "username":"alfred"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "must_not": [</span><br><span class="line">        &#123;</span><br><span class="line">          "match": &#123;</span><br><span class="line">            "job":"specialist"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>匹配username包含<code>alfred</code>并且job不能包含<code>specialist</code></p></blockquote><p><strong>Should</strong>:</p><ul><li>Should使用分两种情况:<ul><li>bool查询中只包含should ,不包含must查询</li><li>bool查询中同时包含should和must查询</li></ul></li><li>只包含should时,文档必须满足至少一个条件<ul><li>minimum_should_match可以控制满足条件的个数或者百分比</li></ul></li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "should": [</span><br><span class="line">        &#123;"term": &#123;"username": "alfred"&#125;&#125;,</span><br><span class="line">        &#123;"term": &#123;"username": "way"&#125;&#125;,</span><br><span class="line">        &#123;"term": &#123;"username": "junior"&#125;&#125;</span><br><span class="line">      ], </span><br><span class="line">      "minimum_should_match": 2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"4"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">1.8147054</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"username"</span> : <span class="string">"alfred junior way"</span>,</span><br><span class="line">      <span class="attr">"job"</span> : <span class="string">"ruby engineer"</span>,</span><br><span class="line">      <span class="attr">"age"</span> : <span class="number">23</span>,</span><br><span class="line">      <span class="attr">"birth"</span> : <span class="string">"1989-08-07"</span>,</span><br><span class="line">      <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"_index"</span> : <span class="string">"test_search_index"</span>,</span><br><span class="line">    <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_score"</span> : <span class="number">0.97797304</span>,</span><br><span class="line">    <span class="attr">"_source"</span> : &#123;</span><br><span class="line">      <span class="attr">"username"</span> : <span class="string">"alfred way"</span>,</span><br><span class="line">      <span class="attr">"job"</span> : <span class="string">"java engineer"</span>,</span><br><span class="line">      <span class="attr">"age"</span> : <span class="number">18</span>,</span><br><span class="line">      <span class="attr">"birth"</span> : <span class="string">"1990-01-02"</span>,</span><br><span class="line">      <span class="attr">"isMarried"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>minimum_should_match加上后只返回了两个结果</p></blockquote><p>同时包含should和must时,文档不必满足should中的条件,但是如果满足条件,会增加相关性得分</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "should": [</span><br><span class="line">        &#123;"term": &#123;"job": "ruby"&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;"term": &#123;"username": "alfred"&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>job</code> 为<code>ruby</code>的会增加分数排名更靠前</p></blockquote><h4 id="Query-Context-VS-Filter-Context"><a href="#Query-Context-VS-Filter-Context" class="headerlink" title="Query Context VS Filter Context"></a>Query Context VS Filter Context</h4><p>当一个查询语句位于Query或者Filter上下文时, es执行的结果会不同,对比如下:</p><table><thead><tr><th>上下文类型</th><th>执行类型</th><th>使用方式</th></tr></thead><tbody><tr><td>查找与查询语句最匹配的文档，对所有文档进行算分和排序</td><td>query<br>bool中的<code>must</code>和<code>should</code></td></tr><tr><td>查找与查询语句相匹配的文档</td><td>bool中的<code>filter</code>与<code>must_not</code><br>constant_score中的<code>filter</code></td></tr></tbody></table><h4 id="Count-And-Source-Filtering"><a href="#Count-And-Source-Filtering" class="headerlink" title="Count And Source Filtering"></a>Count And Source Filtering</h4><p><strong>count</strong></p><p>获取符合条件的文档数, endpoint为<code>_count</code></p><p><strong>source filtering</strong><br>过滤返回结果中source中的字段,主要有如下几种方式:</p><p><strong>uri:</strong><br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search?_source=username</span><br></pre></td></tr></table></figure></p><p><strong>禁用source:</strong><br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "_source": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>传字段名:</strong><br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "_source": ["username","job"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>包括和不包括模糊匹配</strong><br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET test_search_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "_source": &#123;</span><br><span class="line">    "includes": "*i*",</span><br><span class="line">    "excludes": "birth"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch入门(二)</title>
      <link href="/2019/03/14/2019-03-14-elasticsearch-num-4/"/>
      <url>/2019/03/14/2019-03-14-elasticsearch-num-4/</url>
      
        <content type="html"><![CDATA[<h2 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h2><p>mapping是类似于数据库中的表结构定义，主要作用如下：</p><ul><li>定义index下的字段名</li><li>定义字段类型，比如数值型、浮点型、布尔型等</li><li>定义倒排索引相关的设置，比如是否索引、记录position等</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT test_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "username": "jack",</span><br><span class="line">  "age": 15</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET test_index/_mapping</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-14/1.png" alt=""></p><h3 id="自定义mapping"><a href="#自定义mapping" class="headerlink" title="自定义mapping"></a>自定义mapping</h3><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic": false,</span><br><span class="line">      "properties": &#123;</span><br><span class="line">        "username": &#123;</span><br><span class="line">          "type": "keyword"</span><br><span class="line">        &#125;,</span><br><span class="line">        "age": &#123;</span><br><span class="line">          "type": "integer"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapping中的字段类型一旦设置，禁止直接修改，因为 lucene实现的倒排索引生成后不允许修改，应该重新建立新的索引，然后做reindex操作。</p><p>但是可以新增字段，通过 dynamic 参数来控制字段的新增，这个参数的值如下：</p><p>true：默认值，表示允许选自动新增字段<br>false：不允许自动新增字段，但是文档可以正常写入，但无法对字段进行查询等操作<br>strict：严格模式，文档不能写入，报错 </p><p>然后写入一个文档:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "username": "lili",</span><br><span class="line">  "desc": "this is my index",</span><br><span class="line">  "age": 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在mapping设置中，”dynamic”: false，表示在写入文档时，如果写入字段不存在也不会报错。这里的desc字段就是不存在的字段。</p></blockquote><p>查询文档<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username": "lili"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "desc": "this is my index"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"username"</span> : <span class="string">"lili"</span>,</span><br><span class="line">          <span class="attr">"desc"</span> : <span class="string">"this is my index"</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="string">"20"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比两个结果可以看出能通过mapping中设置的字段查询到</p><h3 id="copy-to"><a href="#copy-to" class="headerlink" title="copy_to"></a>copy_to</h3><p>作用是将该字段的值复制到目标字段，实现类似（6.0版本之前的）_all的作用。不会出现在_source中，只能用来搜索。</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index2</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "first_name": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "copy_to": "full_name"</span><br><span class="line">      &#125;,</span><br><span class="line">      "last_name": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "copy_to": "full_name"</span><br><span class="line">      &#125;,</span><br><span class="line">      "full_name": &#123;</span><br><span class="line">        "type": "text"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PUT：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index2/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "first_name": "David",</span><br><span class="line">  "last_name": "john"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my_index2/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "full_name": &#123;</span><br><span class="line">        "query": "David john",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">316</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index2"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"first_name"</span> : <span class="string">"David"</span>,</span><br><span class="line">          <span class="attr">"last_name"</span> : <span class="string">"john"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以通过full_name来查询first_name，lastname两个字段，并且不区分大小写，但是一旦有一个字段的值匹配不上，就会返回为空</p></blockquote><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>index参数作用是控制当前字段是否被索引，默认为true，false表示不记录，即不可被搜索。</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index3</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "cookie": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "index": false</span><br><span class="line">      &#125;,</span><br><span class="line">      "content": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "index": true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index3/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "cookie": "efdfsdiadsasd",</span><br><span class="line">  "content": "this is a cookie"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询测试：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET my_index3/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "cookie": "efdfsdiadsasd"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_index3/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "content": "this is a cookie"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>cookie字段不可被查询<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"query_shard_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"failed to create query: &#123;\n  \"match\" : &#123;\n    \"cookie\" : &#123;\n      \"query\" : \"efdfsdiadsasd\",\n      \"operator\" : \"OR\",\n      \"prefix_length\" : 0,\n      \"max_expansions\" : 50,\n      \"fuzzy_transpositions\" : true,\n      \"lenient\" : false,\n      \"zero_terms_query\" : \"NONE\",\n      \"auto_generate_synonyms_phrase_query\" : true,\n      \"boost\" : 1.0\n    &#125;\n  &#125;\n&#125;"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"5iLoJa4vRmiWA23sZ8-4TQ"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"my_index3"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"search_phase_execution_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"all shards failed"</span>,</span><br><span class="line">    <span class="attr">"phase"</span>: <span class="string">"query"</span>,</span><br><span class="line">    <span class="attr">"grouped"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"failed_shards"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"my_index3"</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="string">"IWeH0fFvQD604ZiJ9OAdRw"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"query_shard_exception"</span>,</span><br><span class="line">          <span class="attr">"reason"</span>: <span class="string">"failed to create query: &#123;\n  \"match\" : &#123;\n    \"cookie\" : &#123;\n      \"query\" : \"efdfsdiadsasd\",\n      \"operator\" : \"OR\",\n      \"prefix_length\" : 0,\n      \"max_expansions\" : 50,\n      \"fuzzy_transpositions\" : true,\n      \"lenient\" : false,\n      \"zero_terms_query\" : \"NONE\",\n      \"auto_generate_synonyms_phrase_query\" : true,\n      \"boost\" : 1.0\n    &#125;\n  &#125;\n&#125;"</span>,</span><br><span class="line">          <span class="attr">"index_uuid"</span>: <span class="string">"5iLoJa4vRmiWA23sZ8-4TQ"</span>,</span><br><span class="line">          <span class="attr">"index"</span>: <span class="string">"my_index3"</span>,</span><br><span class="line">          <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">            <span class="attr">"reason"</span>: <span class="string">"Cannot search on field [cookie] since it is not indexed."</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="index-options"><a href="#index-options" class="headerlink" title="index_options"></a>index_options</h3><ul><li><p>index_options的作用是用于控制倒排索引记录的内容，有如下四种配置：</p><ul><li>docs：只记录doc id</li><li>freqs：记录doc id 和term frequencies</li><li>positions：记录doc id、 term frequencies和term position</li><li>offsets：记录doc id、 term frequencies、term position、character offsets</li></ul></li><li><p>text类型的默认配置为positions，其他默认为docs。</p></li><li>记录的内容越多，占据的空间越大。</li></ul><p>index_options设定：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index4</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "text": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "index_options": "offsets"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PUT:<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index4/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "text": "Quick brown fox"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET my_index4/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "text": "brown fox"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "highlight": &#123;</span><br><span class="line">    "fields": &#123;</span><br><span class="line">      "text": &#123;&#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">68</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index4"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"text"</span> : <span class="string">"Quick brown fox"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"highlight"</span> : &#123;</span><br><span class="line">          <span class="attr">"text"</span> : [</span><br><span class="line">            <span class="string">"Quick &lt;em&gt;brown&lt;/em&gt; &lt;em&gt;fox&lt;/em&gt;"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>brown fox会被高亮显示</p><h3 id="null-value"><a href="#null-value" class="headerlink" title="null_value"></a>null_value</h3><p>这个参数的作用是当字段遇到null值的时候的处理策略，默认为null，即空值，此时es会忽略该值。可以通过这个参数设置某个字段的默认值</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index5</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "status_code": &#123;</span><br><span class="line">        "type": "keyword",</span><br><span class="line">        "null_value": "NULL"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index5/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "status_code": null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index5/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  "status_code": [] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_index5/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "status_code": "NULL" </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index5"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"status_code"</span> : <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>用术语null替换显式null值。</li><li>空数组不包含显式null，因此不会用null_value替换。</li><li>对NULL的查询返回文档1，而不是文档2。<blockquote><p>null_value需要与字段具有相同的数据类型。例如，长字段不能有字符串null_value。<br>null_value只影响数据的索引方式，它不修改_source文档。</p></blockquote></li></ol><p>更多详见<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html" target="_blank" rel="noopener">Mapping parameters</a></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>核心数据类型</strong></p><ul><li>字符串型：text、keyword（不会分词）</li><li>数值型：long、integer、short、byte、double、float、half_float等</li><li>日期类型：date</li><li>布尔类型：boolean</li><li>二进制类型：binary</li><li>范围类型：integer_range、float_range、long_range、double_range、date_range</li></ul><p><strong>复杂数据类型</strong></p><ul><li>数组类型：array</li><li>对象类型：object</li><li>嵌套类型：nested object</li><li>地理位置数据类型：geo_point、geo_shape</li><li>专用类型：ip（记录ip地址）、completion（实现自动补全）、token_count（记录分词数）、murmur3（记录字符串hash值）</li></ul><p><strong>多字段特性</strong></p><ul><li>多字段特性（multi-fields），表示允许对同一字段采用不同的配置，比如分词。</li></ul><p>常见例子是对人名实现拼音搜索，只需要在人名中新增一个字段pinyin即可。但是这种方式不是十分优雅，multi-fields可以在不改变整体结构的前提下，增加一个子字段：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index6</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "username": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "fields": &#123;</span><br><span class="line">            "pinyin": &#123;</span><br><span class="line">                "type": "text",</span><br><span class="line">                "analyzer": "pinyin"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET my_index6</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username.pinyin": "pinyin"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dynamic-mapping"><a href="#Dynamic-mapping" class="headerlink" title="Dynamic mapping"></a>Dynamic mapping</h3><p>Elasticsearch最重要的特性之一是，它试图摆脱您的阻碍，让您尽可能快地开始研究您的数据。要为文档建立索引，您不需要首先创建索引、定义映射类型和字段——您只需要为文档建立索引，索引、类型和字段就会自动出现:</p><p>默认情况下，当在文档中发现以前没有看到的字段时，Elasticsearch将把新字段添加到类型映射中。通过将动态参数设置为false(忽略新字段)或strict(遇到未知字段时抛出异常)，可以在文档和对象级别禁用此行为</p><p>字段映射规则</p><table><thead><tr><th>JSON类型</th><th>ES类型</th></tr></thead><tbody><tr><td>null</td><td>忽略</td></tr><tr><td>true or false</td><td>boolean</td></tr><tr><td>floating point number</td><td>float</td></tr><tr><td>integer</td><td>long</td></tr><tr><td>object</td><td>object</td></tr><tr><td>array</td><td>取决于数组中的第一个非空值。</td></tr><tr><td>string</td><td>要么是一个日期字段(如果值通过了日期检测)，要么是一个双字段或长字段(如果值通过了数值检测)，要么是一个带有关键字子字段的文本字段。</td></tr></tbody></table><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELETE test_index</span><br><span class="line">PUT /test_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "username":"alfred",</span><br><span class="line">  "age":1.2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "username.keyword": "alfred"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你索引一个包含新字段的文档——一个之前没有的字段——Elasticsearch将使用动态映射猜测字段类型，这类型来自于JSON的基本数据类型，使用以下规则：</p><table><thead><tr><th>JSON type</th><th>Field type</th></tr></thead><tbody><tr><td>Boolean: <code>true</code> or <code>false</code></td><td><code>&quot;boolean&quot;</code></td></tr><tr><td>Whole number: <code>123</code></td><td><code>&quot;long&quot;</code></td></tr><tr><td>Floating point: <code>123.45</code></td><td><code>&quot;double&quot;</code></td></tr><tr><td>String, valid date: <code>&quot;2014-09-15&quot;</code></td><td><code>&quot;date&quot;</code></td></tr><tr><td>String: <code>&quot;foo bar&quot;</code></td><td><code>&quot;string&quot;</code></td></tr></tbody></table><blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这意味着，如果你索引一个带引号的数字——<code>&quot;123&quot;</code>，它将被映射为<code>&quot;string&quot;</code>类型，而不是<code>&quot;long&quot;</code>类型。然而，如果字段已经被映射为<code>&quot;long&quot;</code>类型，Elasticsearch将尝试转换字符串为long，并在转换失败时会抛出异常。</p></blockquote><h3 id="日期自动识别"><a href="#日期自动识别" class="headerlink" title="日期自动识别"></a>日期自动识别</h3><p>日期的自动识别可以自行配置日期的格式，默认情况下是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"strict_date_opeional_time"</span>, <span class="string">"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"</span>]</span><br></pre></td></tr></table></figure></p><p>strict_date_opeional_time 是ISO 标准的日期格式，完整的格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY-MM-DDhh:mm:ssTZD(eg:1997-07-16y19:20:30+01:00)</span><br></pre></td></tr></table></figure></p><p>dynamic_date_formats：可以自定义日期类型<br>date_detection：可以关闭日期自动识别机制（默认开启）<br>首先创建一个日期自动识别的索引：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELETE my_index</span><br><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic_date_formats": ["MM/dd/yyyy"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "create_time": "09/21/2016"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_index/_mapping</span><br></pre></td></tr></table></figure></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"my_index"</span> : &#123;</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"dynamic_date_formats"</span> : [</span><br><span class="line">        <span class="string">"MM/dd/yyyy"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"create_time"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"date"</span>,</span><br><span class="line">          <span class="attr">"format"</span> : <span class="string">"MM/dd/yyyy"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭日期自动识别可以如下：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index1</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "date_detection": false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index1/_doc/1 </span><br><span class="line">&#123;</span><br><span class="line">  "create": "2015/09/02"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义时间类型:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index2</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic_date_formats": ["MM/dd/yyyy"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index2/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "create_date": "09/25/2015"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数字自动识别"><a href="#数字自动识别" class="headerlink" title="数字自动识别"></a>数字自动识别</h3><p>字符串为数字的时候，默认不会自动识别为整型，因为字符串中出现数字是完全合理的。numeric_detection 可以开启字符串中数字的自动识别</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELETE my_index3</span><br><span class="line">PUT my_index3</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "numeric_detection": true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my_index3/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "my_float":   "1.0", </span><br><span class="line">  "my_integer": "1" </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my_index3/_mapping</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"my_index3"</span> : &#123;</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"numeric_detection"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"my_float"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"float"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"my_integer"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dynamic-Template"><a href="#Dynamic-Template" class="headerlink" title="Dynamic Template"></a>Dynamic Template</h3><p>允许根据es自动识别的数据类型、字段名等动态设定字段类型，可以实现如下效果:</p><ul><li>所有字符串都设定为<code>keyword</code>类型，即默认不分词</li><li>所有以message开头字段都设定为<code>text</code>类型，即分词</li><li>所有以long_开头的字段都设定为<code>long</code>类型</li><li>所有自动匹配为double类型的都设定为<code>float</code>类型，以节省空间</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT test_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic_templates": [</span><br><span class="line">      &#123;</span><br><span class="line">        "strings": &#123;</span><br><span class="line">          "match_mapping_type": "string",</span><br><span class="line">          "mapping": &#123;</span><br><span class="line">            "type": "keyword"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT test_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "name": "alfred"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET test_index/_mapping</span><br></pre></td></tr></table></figure><p>匹配规则一般有如下几个参数：</p><ul><li>match_mapping_type: 匹配es自动识别的字段类型，如<code>boolean</code>,<code>long</code>,<code>string</code>等</li><li>match,unmatch：匹配字段名</li><li>path_match,path_unmatch: 匹配路径</li></ul><p><strong>设置以message开头的字段都设置为text类型 （顺序由上而下）</strong><br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT test_index</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic_templates": [</span><br><span class="line">      &#123;</span><br><span class="line">        "message_as_text": &#123;</span><br><span class="line">          "match_mapping_type": "string",</span><br><span class="line">          "match": "message*",</span><br><span class="line">          "mapping": &#123;</span><br><span class="line">            "type": "text"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "strings_as_keywords": &#123;</span><br><span class="line">          "match_mapping_type": "string",</span><br><span class="line">          "mapping": &#123;</span><br><span class="line">            "type": "keyword"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Index-Template"><a href="#Index-Template" class="headerlink" title="Index Template"></a>Index Template</h3><p><code>Index Template</code>帮你设定mappings和settings,并按照一定规则，自动匹配到新创建的索引上</p><ul><li>仅生效与新创建的索引，不会影响之前的索引</li><li>可设定多个，会自动<code>merge</code>在一起</li><li>可指定<code>order</code>值,控制merging的过程</li></ul><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT _template/default_template</span><br><span class="line">&#123;</span><br><span class="line">  "index_patterns": ["*"],</span><br><span class="line">  "order": 0,</span><br><span class="line">  "version": 1,</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "number_of_shards": 3,</span><br><span class="line">    "number_of_replicas": 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT _template/default_template1</span><br><span class="line">&#123;</span><br><span class="line">  "index_patterns": ["*"],</span><br><span class="line">  "order": 1,</span><br><span class="line">  "version": 1,</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "number_of_shards": 3,</span><br><span class="line">    "number_of_replicas": 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工作方式:</p><p>当一个索引被创建时：</p><ul><li>应用默认的settings和mappings</li><li>应用<code>order</code>数值低的index template的设定</li><li>应用<code>order</code>高的index template的设定，之前设定被覆盖</li><li>用户指定的settings和mappings会覆盖默认的模版设定</li></ul><blockquote><p>上面的两个设定都会被应用，但是order高的会覆盖低的设定</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch入门</title>
      <link href="/2019/03/08/2019-03-08-elasticsearch/"/>
      <url>/2019/03/08/2019-03-08-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h2 id="入门介绍"><a href="#入门介绍" class="headerlink" title="入门介绍"></a>入门介绍</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>ElasticSearch需要的jdk版本至少是1.8的，所以安装之前先查看jdk版本号</li></ol><p>2.下载ElasticSearch<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/elastic/elasticsearch/archive/v6.5.0.tar.gz</span><br><span class="line">tar -zxvf elasticsearch-6.5.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-6.5.0</span><br></pre></td></tr></table></figure></p><p>简单本地集群环境搭建</p><p>vim config/elasticsearch.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-application    注释打开</span><br></pre></td></tr></table></figure><p>启动三个集群命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch -Ehttp.port=7200 -Epath.data=node3</span><br><span class="line">./bin/elasticsearch -Ehttp.port=8200 -Epath.data=node2</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></p><p>集群状态查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pengshiliang@pengshiliang-OptiPlex-3020:~$ curl 127.0.0.1:9200/_cat/nodes?v</span><br><span class="line">ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">127.0.0.1           30          98   2    2.03    0.96     0.53 mdi       -      dRA_DV4</span><br><span class="line">127.0.0.1           30          98   2    2.03    0.96     0.53 mdi       -      j8_g2SD</span><br><span class="line">127.0.0.1           31          98   3    2.03    0.96     0.53 mdi       *      3cYY9cL</span><br><span class="line">pengshiliang@pengshiliang-OptiPlex-3020:~$ curl 127.0.0.1:9200/_cluster/stats</span><br><span class="line">&#123;<span class="string">"_nodes"</span>:&#123;<span class="string">"total"</span>:3,<span class="string">"successful"</span>:3,<span class="string">"failed"</span>:0&#125;,<span class="string">"cluster_name"</span>:<span class="string">"my-application"</span>,<span class="string">"cluster_uuid"</span>:<span class="string">"5nD6JB_MRyiin3n7QTCoDg"</span>,<span class="string">"timestamp"</span>:1552028850410,<span class="string">"status"</span>:<span class="string">"green"</span>,<span class="string">"indices"</span>:&#123;<span class="string">"count"</span>:0,<span class="string">"shards"</span>:&#123;&#125;,<span class="string">"docs"</span>:&#123;<span class="string">"count"</span>:0,<span class="string">"deleted"</span>:0&#125;,<span class="string">"store"</span>:&#123;<span class="string">"size_in_bytes"</span>:0&#125;,<span class="string">"fielddata"</span>:&#123;<span class="string">"memory_size_in_bytes"</span>:0,<span class="string">"evictions"</span>:0&#125;,<span class="string">"query_cache"</span>:&#123;<span class="string">"memory_size_in_bytes"</span>:0,<span class="string">"total_count"</span>:0,<span class="string">"hit_count"</span>:0,<span class="string">"miss_count"</span>:0,<span class="string">"cache_size"</span>:0,<span class="string">"cache_count"</span>:0,<span class="string">"evictions"</span>:0&#125;,<span class="string">"completion"</span>:&#123;<span class="string">"size_in_bytes"</span>:0&#125;,<span class="string">"segments"</span>:&#123;<span class="string">"count"</span>:0,<span class="string">"memory_in_bytes"</span>:0,<span class="string">"terms_memory_in_bytes"</span>:0,<span class="string">"stored_fields_memory_in_bytes"</span>:0,<span class="string">"term_vectors_memory_in_bytes"</span>:0,<span class="string">"norms_memory_in_bytes"</span>:0,<span class="string">"points_memory_in_bytes"</span>:0,<span class="string">"doc_values_memory_in_bytes"</span>:0,<span class="string">"index_writer_memory_in_bytes"</span>:0,<span class="string">"version_map_memory_in_bytes"</span>:0,<span class="string">"fixed_bit_set_memory_in_bytes"</span>:0,<span class="string">"max_unsafe_auto_id_timestamp"</span>:-9223372036854775808,<span class="string">"file_sizes"</span>:&#123;&#125;&#125;&#125;,<span class="string">"nodes"</span>:&#123;<span class="string">"count"</span>:&#123;<span class="string">"total"</span>:3,<span class="string">"data"</span>:3,<span class="string">"coordinating_only"</span>:0,<span class="string">"master"</span>:3,<span class="string">"ingest"</span>:3&#125;,<span class="string">"versions"</span>:[<span class="string">"6.5.0"</span>],<span class="string">"os"</span>:&#123;<span class="string">"available_processors"</span>:12,<span class="string">"allocated_processors"</span>:12,<span class="string">"names"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"Linux"</span>,<span class="string">"count"</span>:3&#125;],<span class="string">"mem"</span>:&#123;<span class="string">"total_in_bytes"</span>:24839368704,<span class="string">"free_in_bytes"</span>:437612544,<span class="string">"used_in_bytes"</span>:24401756160,<span class="string">"free_percent"</span>:2,<span class="string">"used_percent"</span>:98&#125;&#125;,<span class="string">"process"</span>:&#123;<span class="string">"cpu"</span>:&#123;<span class="string">"percent"</span>:0&#125;,<span class="string">"open_file_descriptors"</span>:&#123;<span class="string">"min"</span>:305,<span class="string">"max"</span>:306,<span class="string">"avg"</span>:305&#125;&#125;,<span class="string">"jvm"</span>:&#123;<span class="string">"max_uptime_in_millis"</span>:74396,<span class="string">"versions"</span>:[&#123;<span class="string">"version"</span>:<span class="string">"1.8.0_171"</span>,<span class="string">"vm_name"</span>:<span class="string">"Java HotSpot(TM) 64-Bit Server VM"</span>,<span class="string">"vm_version"</span>:<span class="string">"25.171-b11"</span>,<span class="string">"vm_vendor"</span>:<span class="string">"Oracle Corporation"</span>,<span class="string">"count"</span>:3&#125;],<span class="string">"mem"</span>:&#123;<span class="string">"heap_used_in_bytes"</span>:972703928,<span class="string">"heap_max_in_bytes"</span>:3116630016&#125;,<span class="string">"threads"</span>:143&#125;,<span class="string">"fs"</span>:&#123;<span class="string">"total_in_bytes"</span>:483753484288,<span class="string">"free_in_bytes"</span>:438342832128,<span class="string">"available_in_bytes"</span>:413745967104&#125;,<span class="string">"plugins"</span>:[],<span class="string">"network_types"</span>:&#123;<span class="string">"transport_types"</span>:&#123;<span class="string">"security4"</span>:3&#125;,<span class="string">"http_types"</span>:&#123;<span class="string">"security4"</span>:3&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="多机部署"><a href="#多机部署" class="headerlink" title="多机部署"></a>多机部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">network.host: your ip <span class="comment">#（主机地址）对外发布的网络地址 </span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"<span class="variable">$ip</span>"</span>]  <span class="variable">$ip</span>一定要包含该集群中其他机器的ip</span><br></pre></td></tr></table></figure><h3 id="Elasticsearch-常用术语"><a href="#Elasticsearch-常用术语" class="headerlink" title="Elasticsearch 常用术语"></a>Elasticsearch 常用术语</h3><p>Document 文档数据<br>Index 索引<br>Type 索引中的数据类型<br>Field 字段，文档属性<br>Query DSL查询语法</p><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /accounts/person/1</span><br><span class="line">&#123;</span><br><span class="line">  "name": "Bob",</span><br><span class="line">  "job": "developer",</span><br><span class="line">  "sex": "male"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这条语句表述的含义是在index为accounts的person类型下创建一条id为1的数据<br>Result：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"accounts"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"person"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /accounts/person/1</span><br></pre></td></tr></table></figure><p>Result：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"accounts"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"person"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span> : &#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"Bob"</span>,</span><br><span class="line">    <span class="attr">"job"</span> : <span class="string">"developer"</span>,</span><br><span class="line">    <span class="attr">"sex"</span> : <span class="string">"male"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /accounts/person/1/_update</span><br><span class="line">&#123;</span><br><span class="line">    "doc": &#123;</span><br><span class="line">        "name": "John"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"accounts"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"person"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"result"</span> : <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /accounts/person/1</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"accounts"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"person"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"result"</span> : <span class="string">"deleted"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h3><h4 id="Query-String"><a href="#Query-String" class="headerlink" title="Query String"></a>Query String</h4><p>后面接?q形式<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /accounts/person/_search?q=John</span><br></pre></td></tr></table></figure></p><h4 id="Query-Dsl"><a href="#Query-Dsl" class="headerlink" title="Query Dsl"></a>Query Dsl</h4><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /accounts/person/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "name": "John"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.5/query-dsl.html" target="_blank" rel="noopener">query-dsl</a></p><h2 id="ElasticSearch初步介绍"><a href="#ElasticSearch初步介绍" class="headerlink" title="ElasticSearch初步介绍"></a>ElasticSearch初步介绍</h2><h3 id="正排-倒排索引"><a href="#正排-倒排索引" class="headerlink" title="正排/倒排索引"></a>正排/倒排索引</h3><p>正排索引：</p><table><thead><tr><th>文档ID</th><th>文档内容</th></tr></thead><tbody><tr><td>1</td><td>elasticsearch是最流行的搜索引擎</td></tr><tr><td>2</td><td>php是世界最好的语言</td></tr><tr><td>3</td><td>搜索引擎是如何诞生的</td></tr></tbody></table><p>倒排索引：</p><table><thead><tr><th>文档内容</th><th>文档ID</th></tr></thead><tbody><tr><td>elasticsearch</td><td>1</td></tr><tr><td>流行</td><td>1</td></tr><tr><td>搜索引擎</td><td>1,3</td></tr><tr><td>php</td><td>2</td></tr><tr><td>世界</td><td>2</td></tr><tr><td>最好</td><td>2</td></tr><tr><td>语言</td><td>2</td></tr><tr><td>如何</td><td>3</td></tr><tr><td>诞生</td><td>3</td></tr></tbody></table><p>查询包含搜索引擎的文档：</p><ol><li>通过倒排索引获得含有“搜索引擎”的文档ID是1,3</li><li>通过正排索引查看1,3的内容</li><li>返回结果</li></ol><h4 id="倒排索引基本概念"><a href="#倒排索引基本概念" class="headerlink" title="倒排索引基本概念"></a>倒排索引基本概念</h4><p>倒排索引(Inverted Index)：倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。</p><p>单词词典(Lexicon)：搜索引擎的通常索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。</p><p>倒排列表(PostingList)：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息，每条记录称为一个倒排项(Posting)。根据倒排列表，即可获知哪些文档包含某个单词。</p><p>倒排文件(Inverted File)：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即被称之为倒排文件，倒排文件是存储倒排索引的物理文件。</p><h4 id="倒排索引的组成"><a href="#倒排索引的组成" class="headerlink" title="倒排索引的组成"></a>倒排索引的组成</h4><p>倒排索引是搜索引擎的核心，主要包含两个部分：</p><ol><li>单词词典（Trem Dictionary）：记录的是所有的文档分词后的结果</li><li>倒排列表（Posting List）：记录了单词对应文档的集合，由倒排索引项（Posting）组成。</li></ol><p><strong>单词字典的实现一般采用B+Tree的方式，来保证高效</strong></p><p>倒排索引项（Posting）主要包含如下的信息： </p><ol><li>文档ID，用于获取原始文档的信息 </li><li>单词频率（TF，Term Frequency），记录该单词在该文档中出现的次数，用于后续相关性算分。 </li><li>位置（Position），记录单词在文档中的分词位置（多个），用于做词语搜索。 </li><li>偏移（Offset），记录单词在文档的开始和结束位置，用于高亮显示</li></ol><p>倒排列表：</p><p><img src="/img/in-post/2019-03-13/1.png" alt=""></p><blockquote><p>“elasticsearch是最流行的搜索引擎”可分为3个词语，搜索引擎在第二个位置，并且字符位置是18-22之间</p></blockquote><p><img src="/img/in-post/2019-03-13/2.png" alt=""></p><p>es存储的是一个json格式的文档，其中包含多个字段，每个字段都会有自己的倒排索引，类似这种<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"username"</span>: <span class="string">"huangtoufa"</span>,</span><br><span class="line">  <span class="attr">"job"</span>: <span class="string">"programmer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>job和username都有自己的倒排索引</p><h3 id="分词介绍"><a href="#分词介绍" class="headerlink" title="分词介绍"></a>分词介绍</h3><p>分词是指将文本转换成一系列单词( term or token )的过程,也可以叫做文本分析,在es里面称为Analysis</p><p><img src="/img/in-post/2019-03-13/3.png" alt=""></p><p>·分词器是es中专门处理分词的组件,英文为Analyzer ,它的组成如下<br>　　- Character Filters<br>　　　-针对原始文本进行处理,比如去除html特殊标记符<br>　　- Tokenizer<br>　　　-将原始文本按照一定规则切分为单词<br>　　- Token Filters<br>　　　-针对tokenizer处理的单词就行再加工,比如转小写、删除或新增等处理</p><p>分词调用顺序：</p><p><img src="/img/in-post/2019-03-13/4.png" alt=""></p><h4 id="analyze-api"><a href="#analyze-api" class="headerlink" title="analyze_api"></a>analyze_api</h4><p> es提供了一个测试分词的api接口,方便验证分词效果, endpoint是_analyze<br>　　-可以直接指定analyzer进行测试<br>　　-可以直接指定索引中的字段进行测试<br>　　-可以自定义分词器进行测试</p><p><img src="/img/in-post/2019-03-13/5.png" alt=""></p><p>关键词解释：</p><p>analyzer：分词器<br>text：分词文本<br>token：分词结果<br>start_offset：开始偏移位置<br>end_offset：结束偏移位置<br>position：分词位置</p><p>当没有定义analyzer的时候会使用默认分词器”analyzer”:”standard”</p><p>指定field分词：</p><p><img src="/img/in-post/2019-03-13/6.png" alt=""></p><p>自定义分词器：tokenizer指名要用哪个分词器，filter指明的是token filter：</p><p><img src="/img/in-post/2019-03-13/7.png" alt=""></p><h4 id="自带分词器"><a href="#自带分词器" class="headerlink" title="自带分词器"></a>自带分词器</h4><p>es自带如下的分词器<br>　　- Standard Simple<br>　　- Whitespace<br>　　- Stop<br>　　- Keyword<br>　　- Pattern<br>　　- Language</p><p><img src="/img/in-post/2019-03-13/8.png" alt=""><br><img src="/img/in-post/2019-03-13/9.png" alt=""><br><img src="/img/in-post/2019-03-13/10.png" alt=""><br><img src="/img/in-post/2019-03-13/11.png" alt=""><br><img src="/img/in-post/2019-03-13/12.png" alt=""><br><img src="/img/in-post/2019-03-13/13.png" alt=""></p><h4 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h4><p>·难点<br>　　-中文分词指的是将一个汉字序列切分成一个一个单独的词。在英文中,单词之间是以空格作为自然分界符,汉语中词没有一个形式上的分界符。<br>　　-上下文不同,分词结果迥异,比如交叉歧义问题,比如下面两种分词都合理<br>　　　　-乒乓球拍/卖完了<br>　　　　-乒乓球/拍卖/完了</p><p>·常用分词系统<br>　　-IK<br>　　　　-实现中英文单词的切分,支持ik smart, ik maxword等模式<br>　　　　-可自定义词库,支持热更新分词词典,<br>　　　　- <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a><br>　　- jieba<br>　　　　-python中最流行的分词系统,支持分词和词性标注<br>　　　　-支持繁体分词、自定义词典、并行分词等<br>　　　　- <a href="https://github.com/sing1ee/elasticsearch-jieba-plugin" target="_blank" rel="noopener">https://github.com/sing1ee/elasticsearch-jieba-plugin</a><br>·基于自然语言处理的分词系统<br>　　- Hanlp<br>　　　　-由一系列模型与算法组成的Java工具包,目标是普及自然语言处理在生产环境中的应用<br>　　　　- <a href="https://github.com/hankcs/HanLP" target="_blank" rel="noopener">https://github.com/hankcs/HanLP</a><br>　　-THULAC<br>　　　　-THU Lexical Analyzer for Chinese ,由清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包,具有中文分词和词性标注功能<br>　　　　- <a href="https://github.com/microbun/elasticsearch-thulac-plugin" target="_blank" rel="noopener">https://github.com/microbun/elasticsearch-thulac-plugin</a></p><h4 id="自定义分词"><a href="#自定义分词" class="headerlink" title="自定义分词"></a>自定义分词</h4><p>CharacterFilter：</p><p>当自带的分词无法满足需求时,可以自定义分词</p><ul><li>通过自定义Character Filters, Tokenizer和Token Filter实现. Character Filters</li><li>在Tokenizer之前对原始文本进行处理,比如增加、删除或替换字符等</li><li>自带的如下:<ul><li>HTML Strip去除html标签和转换html实体</li><li>Mapping进行字符替换操作</li><li>Pattern Replace进行正则匹配替换</li></ul></li><li><p>会影响后续tokenizer解析的postion和offset信息</p><p>Character Filters测试时可以采用如下api :<br><img src="/img/in-post/2019-03-13/14.png" alt=""></p></li></ul><p>Tokenizer：<br>Tokenizer</p><ul><li>将原始文本按照一定规则切分为单词( term or token )</li><li>自带的如下:<ul><li>standard按照单词进行分割</li><li>letter按照非字符类进行分割</li><li>whitespace按照空格进行分割</li><li>UAX URL Email按照standard分割,但不会分割邮箱和url</li><li>NGram和Edge NGram连词分割</li><li>Path Hierarchy按照文件路径进行切割</li></ul></li></ul><p>api:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  "tokenizer": "path_hierarchy",</span><br><span class="line">  "text": "one/two/three"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"one"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"one/two"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"one/two/three"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">13</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TokenFilter:<br>Token Filters</p><ul><li>对于tokenizer输出的单词( term )进行增加、删除、修改等操作</li><li>自带的如下:<ul><li>lowercase将所有term转换为小写</li><li>stop删除stop words</li><li>NGram和Edge NGram连词分割</li><li>Synonym添加近义词的term</li></ul></li></ul><p>api:</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  "tokenizer": "standard",</span><br><span class="line">  "text": "a Hello, world!",</span><br><span class="line">  "filter": [</span><br><span class="line">    "stop",</span><br><span class="line">    "lowercase",</span><br><span class="line">    &#123;</span><br><span class="line">      "type": "ngram",</span><br><span class="line">      "min_gram": 4,</span><br><span class="line">      "max_gram": 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"hell"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"ello"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"worl"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"orld"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Custorm：<br>自定义分词需要在索引的配置中设定,如下所示:</p><p><img src="/img/in-post/2019-03-13/15.png" alt=""></p><p>创建自定义分词器：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT test_index</span><br><span class="line">&#123;</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "analysis": &#123;</span><br><span class="line">      "analyzer": &#123;</span><br><span class="line">        "my_custom_analyzer": &#123;</span><br><span class="line">          "type": "custom",</span><br><span class="line">          "tokenizer": "standard",</span><br><span class="line">          "char_filter": [</span><br><span class="line">            "html_strip"</span><br><span class="line">          ],</span><br><span class="line">          "filter": [</span><br><span class="line">            "lowercase",</span><br><span class="line">            "asciifolding"</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test_index</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_index"</span> : &#123;</span><br><span class="line">    <span class="attr">"aliases"</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span> : <span class="string">"5"</span>,</span><br><span class="line">        <span class="attr">"provided_name"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"creation_date"</span> : <span class="string">"1552462361614"</span>,</span><br><span class="line">        <span class="attr">"analysis"</span> : &#123;</span><br><span class="line">          <span class="attr">"analyzer"</span> : &#123;</span><br><span class="line">            <span class="attr">"my_custom_analyzer"</span> : &#123;</span><br><span class="line">              <span class="attr">"filter"</span> : [</span><br><span class="line">                <span class="string">"lowercase"</span>,</span><br><span class="line">                <span class="string">"asciifolding"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="attr">"char_filter"</span> : [</span><br><span class="line">                <span class="string">"html_strip"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"custom"</span>,</span><br><span class="line">              <span class="attr">"tokenizer"</span> : <span class="string">"standard"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"uuid"</span> : <span class="string">"novqTjprQE24bJPdtxydCA"</span>,</span><br><span class="line">        <span class="attr">"version"</span> : &#123;</span><br><span class="line">          <span class="attr">"created"</span> : <span class="string">"6050099"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-13/16.png" alt=""></p><p>自定义分词验证：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST test_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  "analyzer": "my_custom_analyzer",</span><br><span class="line">  "text": "&lt;a&gt;This is a &lt;b&gt;Text&lt;/b&gt;&lt;/a&gt;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"this"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"is"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"a"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">28</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="分词使用说明"><a href="#分词使用说明" class="headerlink" title="分词使用说明"></a>分词使用说明</h4><p>分词会在如下两个时机使用:</p><ul><li>创建或更新文档时(Index Time ) ,会对相应的文档进行分词处理</li><li>查询时( Search Time ) ,会对查询语句进行分词</li></ul><h4 id="索引时分词"><a href="#索引时分词" class="headerlink" title="索引时分词"></a>索引时分词</h4><p>索引时分词是通过配置Index Mapping中每个字段的analyzer属性实现的如下：不指定分词时,使用默认standard</p><p><img src="/img/in-post/2019-03-13/17.png" alt=""></p><h4 id="查询时分词"><a href="#查询时分词" class="headerlink" title="查询时分词"></a>查询时分词</h4><p>查询时分词的指定方式有如下几种:</p><ul><li>查询的时候通过analyzer指定分词器</li><li>通过index mapping设置search_analyzer实现</li></ul><p><img src="/img/in-post/2019-03-13/18.png" alt=""></p><p>实例1：我们做一个查询，我们试图通过搜索 message2 这个关键词来搜索这个文档<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET test_index1/doc/1</span><br><span class="line"></span><br><span class="line">POST test_index1/doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "message": "this Is a Message"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST test_index1/doc/2</span><br><span class="line">&#123;</span><br><span class="line">  "message": "this Is a Message2"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST test_index1/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "message": &#123;</span><br><span class="line">        "query": "message2",</span><br><span class="line">        "analyzer": "standard"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_index1"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"this Is a Message2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询时使用自定义分词器<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">DELETE test_index1</span><br><span class="line"></span><br><span class="line">PUT test_index1</span><br><span class="line">&#123;</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "analysis": &#123;</span><br><span class="line">      "analyzer": &#123;</span><br><span class="line">        "my_custom_analyzer": &#123;</span><br><span class="line">          "type": "custom",</span><br><span class="line">          "tokenizer": "standard",</span><br><span class="line">          "char_filter": [</span><br><span class="line">            "html_strip"</span><br><span class="line">          ],</span><br><span class="line">          "filter": [</span><br><span class="line">            "lowercase",</span><br><span class="line">            "asciifolding"</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST test_index1/doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "message": "&lt;a&gt;this Is a &lt;b&gt;Message&lt;/b&gt;&lt;/a&gt;"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST test_index1/doc/2</span><br><span class="line">&#123;</span><br><span class="line">  "message": "&lt;a&gt;this Is a &lt;b&gt;Message2&lt;/b&gt;&lt;/a&gt;"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST test_index1/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "message": &#123;</span><br><span class="line">        "query": "Message2",</span><br><span class="line">        "analyzer": "my_custom_analyzer"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="分词建议"><a href="#分词建议" class="headerlink" title="分词建议"></a>分词建议</h4><ul><li>明确字段是否需要分词,不需要分词的字段就将type设置为keyword ,可以节省空间和提高写性能</li><li>善用_analyze API ,查看文档的具体分词结果</li><li>动手测试</li></ul><h3 id="分词使用分析"><a href="#分词使用分析" class="headerlink" title="分词使用分析"></a>分词使用分析</h3><p>创建自定义分词</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DELETE test_index</span><br><span class="line"></span><br><span class="line">PUT test_index</span><br><span class="line">&#123;</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "analysis": &#123;</span><br><span class="line">      "analyzer": &#123;</span><br><span class="line">        "my_custom_analyzer": &#123;</span><br><span class="line">          "type": "custom",</span><br><span class="line">          "tokenizer": "standard",</span><br><span class="line">          "char_filter": [</span><br><span class="line">            "html_strip"</span><br><span class="line">          ],</span><br><span class="line">          "filter": [</span><br><span class="line">            "lowercase",</span><br><span class="line">            "asciifolding"</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST test_index/doc/1</span><br><span class="line">&#123;</span><br><span class="line">  "message": "&lt;a&gt;This is a &lt;b&gt;Text&lt;/b&gt;&lt;/a&gt;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词检索：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "message": &#123;</span><br><span class="line">        "query": "&lt;div&gt;this is&lt;/div&gt;",</span><br><span class="line">        "analyzer": "my_custom_analyzer"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"&lt;a&gt;This is a &lt;b&gt;Text&lt;/b&gt;&lt;/a&gt;"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么会返回这条记录，我们使用分词分析来分析原因：<br><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST test_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  "analyzer": "my_custom_analyzer",</span><br><span class="line">  "text": "&lt;a&gt;This is a &lt;b&gt;Text&lt;/b&gt;&lt;/a&gt;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"this"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"is"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"a"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">28</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的结果看一看出我们自定义的分词将<code>&lt;a&gt;This is a &lt;b&gt;Text&lt;/b&gt;&lt;/a&gt;</code> 分成了this,is,a,text<br>分成这种结果的原因是分词使用了如下图的分词器<br><img src="/img/in-post/2019-03-13/16.png" alt=""></p><p>我们由前面的分词器的解释可了解到lowercase将元文本规范化为小写，asciifolding 类型的词元过滤器，将不在前127个ASCII字符（“基本拉丁文”Unicode块）中的字母，数字和符号Unicode字符转换为ASCII等效项（如果存在）。<br>html strip将文本的html标签进行了过滤，standard见上面的介绍，所以最终自定义分词分成了this,is,a,text这样的结果，而上面query里面的<code>&lt;div&gt;this is&lt;div&gt;</code>首先html标签被过滤掉，所以不管什么标签都可以满足条件，其次<br>this is用_analyze分析会被拆成this,is也符合分词匹配结果，如果query里面的this is变为thisis就不符合当前匹配结果了</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Kubenetets</title>
      <link href="/2019/03/06/2019-03-09-kubenetets/"/>
      <url>/2019/03/06/2019-03-09-kubenetets/</url>
      
        <content type="html"><![CDATA[<h2 id="集群快速搭建"><a href="#集群快速搭建" class="headerlink" title="集群快速搭建"></a>集群快速搭建</h2><h3 id="minikube安装"><a href="#minikube安装" class="headerlink" title="minikube安装"></a>minikube安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line">sudo mv minikube-linux-amd64 /usr/<span class="built_in">local</span>/bin/minikube</span><br><span class="line">rm -f minikube-linux-amd64</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">sudo chmod a+x minikube</span><br></pre></td></tr></table></figure><h3 id="kubectl安装"><a href="#kubectl安装" class="headerlink" title="kubectl安装"></a>kubectl安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.13.4/bin/linux/amd64/kubectl</span><br><span class="line">sudo mv kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br><span class="line">rm -f kubectl</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">sudo chmod a+x kubectl</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minikube start      //创建k8s集群</span><br><span class="line">minikube ssh        //进入虚拟机内</span><br></pre></td></tr></table></figure><p>start过程中从从k8s.gcr.io拉取镜像失败<br>报错信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Using Kubernetes version: v1.13.4</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING Service-Docker]: docker service is not enabled, please run <span class="string">'systemctl enable docker.service'</span></span><br><span class="line">[WARNING Swap]: running with swap on is not supported. Please <span class="built_in">disable</span> swap</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">'kubeadm config images pull'</span></span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-apiserver:v1.13.4: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line">[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-controller-manager:v1.13.4: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line">[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-scheduler:v1.13.4: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line">[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-proxy:v1.13.4: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line">[ERROR ImagePull]: failed to pull image k8s.gcr.io/pause:3.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line">[ERROR ImagePull]: failed to pull image k8s.gcr.io/etcd:3.2.24: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line">[ERROR ImagePull]: failed to pull image k8s.gcr.io/coredns:1.2.6: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br></pre></td></tr></table></figure></p><p>docker.io仓库对google的容器做了镜像，可以通过下列命令下拉取相关镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull mirrorgooglecontainers/kube-apiserver-amd64:v1.11.4</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager-amd64:v1.11.4</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler-amd64:v1.11.4</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy-amd64:v1.11.4</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd-amd64:3.2.24</span><br><span class="line">docker pull coredns/coredns:1.2.6</span><br></pre></td></tr></table></figure><p>版本信息需要根据实际情况进行相应的修改。通过docker tag命令来修改镜像的标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-proxy-amd64:v1.11.3 k8s.gcr.io/kube-proxy-amd64:v1.11.4</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-scheduler-amd64:v1.11.3 k8s.gcr.io/kube-scheduler-amd64:v1.11.4</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-apiserver-amd64:v1.11.3 k8s.gcr.io/kube-apiserver-amd64:v1.11.4</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-controller-manager-amd64:v1.11.3 k8s.gcr.io/kube-controller-manager-amd64:v1.11.4</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/etcd-amd64:3.2.18  k8s.gcr.io/etcd-amd64:3.2.24</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/pause:3.1  k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag docker.io/coredns/coredns:1.2.6  k8s.gcr.io/coredns:1.2.6</span><br></pre></td></tr></table></figure><h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2><h3 id="创建nginx-pod"><a href="#创建nginx-pod" class="headerlink" title="创建nginx pod"></a>创建nginx pod</h3><p>基本命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f &lt;podfile.yml&gt;     //创建</span><br><span class="line">kubectl delete -f &lt;podfile.yml&gt;     //删除</span><br><span class="line">kubectl get pods      //查看pod信息</span><br></pre></td></tr></table></figure></p><p>k8s 最小单位,创建pod</p><p>创建pod_nginx.yml文件,内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f pod_nginx.yml</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-08/Snip20190309_2.png" alt="avatar"></p><p>查看nginx pod详细信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pods nginx</span><br><span class="line">Name:               nginx</span><br><span class="line">Namespace:          default</span><br><span class="line">Priority:           0</span><br><span class="line">PriorityClassName:  &lt;none&gt;</span><br><span class="line">Node:               minikube/10.0.2.15</span><br><span class="line">Start Time:         Sat, 09 Mar 2019 20:46:25 +0800</span><br><span class="line">Labels:             app=nginx</span><br><span class="line">Annotations:        &lt;none&gt;</span><br><span class="line">Status:             Running</span><br><span class="line">IP:                 172.17.0.4</span><br><span class="line">Containers:</span><br><span class="line">  nginx:</span><br><span class="line">    Container ID:   docker://b3c9a2e399a35712373de92b619b0bb79bc5075718ec04f614e70e92ac998b16</span><br><span class="line">    Image:          nginx</span><br><span class="line">    Image ID:       docker-pullable://nginx@sha256:98efe605f61725fd817ea69521b0eeb32bef007af0e3d0aeb6258c6e6fe7fc1a</span><br><span class="line">    Port:           80/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Sat, 09 Mar 2019 20:47:20 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-q8wk4 (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  default-token-q8wk4:</span><br><span class="line">    Type:        Secret (a volume populated by a Secret)</span><br><span class="line">    SecretName:  default-token-q8wk4</span><br><span class="line">    Optional:    <span class="literal">false</span></span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 300s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age    From               Message</span><br><span class="line">  ----    ------     ----   ----               -------</span><br><span class="line">  Normal  Scheduled  8m16s  default-scheduler  Successfully assigned default/nginx to minikube</span><br><span class="line">  Normal  Pulling    8m15s  kubelet, minikube  pulling image <span class="string">"nginx"</span></span><br><span class="line">  Normal  Pulled     7m21s  kubelet, minikube  Successfully pulled image <span class="string">"nginx"</span></span><br><span class="line">  Normal  Created    7m21s  kubelet, minikube  Created container</span><br><span class="line">  Normal  Started    7m21s  kubelet, minikube  Started container</span><br></pre></td></tr></table></figure></p><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward nginx 8080:80</span><br></pre></td></tr></table></figure><p>打开浏览器输入<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">127.0.0.1:8080</a>即可看到nginx 欢迎页</p><h2 id="Replication-Controller（RC）"><a href="#Replication-Controller（RC）" class="headerlink" title="Replication Controller（RC）"></a>Replication Controller（RC）</h2><p>应用托管在K8S后，K8S需要保证应用能够持续运行，这是RC的工作内容</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>确保pod数量：RC用来管理正常运行Pod数量，一个RC可以由一个或多个Pod组成，在RC被创建后，系统会根据定义好的副本数来创建Pod数量。在运行过程中，如果Pod数量小于定义的，就会重启停止的或重新分配Pod，反之则杀死多余的。</p><p>确保pod健康：当pod不健康，运行出错或者无法提供服务时，RC也会杀死不健康的pod，重新创建新的。</p><p>弹性伸缩 ：在业务高峰或者低峰期的时候，可以通过RC动态的调整pod的数量来提高资源的利用率。同时，配置相应的监控功能（Hroizontal Pod Autoscaler），会定时自动从监控平台获取RC关联pod的整体资源使用情况，做到自动伸缩。</p><p>滚动升级：滚动升级为一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定，在初始化升级的时候就可以及时发现和解决问题，避免问题不断扩大。</p><h3 id="横向扩展"><a href="#横向扩展" class="headerlink" title="横向扩展"></a>横向扩展</h3><p>yml文件实例(rc_nginx.yml)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController </span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f rc_nginx.yml</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-08/Snip20190309_3.png" alt="avatar"></p><p>通过ReplicationController方式可以自动化维持pods数目，以方便治理某个pod宕机不可用情况</p><p>eg:删除一个pod</p><p><img src="/img/in-post/2019-03-08/Snip20190309_5.png" alt="avatar"></p><p>删掉一个后status立马变为ContainerCreating去重新创建一个pod</p><p>扩展升级</p><p><img src="/img/in-post/2019-03-08/Snip20190309_6.png" alt="avatar"></p><h2 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h2><p>“升级版”的RC。RS也是用于保证与label selector匹配的pod数量维持在期望状态。</p><p>区别：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、RC只支持基于等式的selector（env=dev或environment!=qa），但RS还支持新的，基于集合的selector（version <span class="keyword">in</span> (v1.0, v2.0)或env notin (dev, qa)），这对复杂的运维管理很方便。</span><br><span class="line"> </span><br><span class="line">2、升级方式</span><br><span class="line">    RS不能使用kubectlrolling-update进行升级</span><br><span class="line">    kubectl rolling-update专用于rc</span><br><span class="line">    RS升级使用deployment或者kubectl replace命令</span><br></pre></td></tr></table></figure></p><p>yml文件实例(rs_nginx.yml)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    tier: frontend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      tier: frontend</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx</span><br><span class="line">      labels:</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f rs_nginx.yml</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-08/Snip20190309_9.png" alt="avatar"></p><p>扩展</p><p>kubectl scale rs nginx –replicas=2<br>kubectl scale rs nginx –replicas=4</p><h2 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h2><p>deployment 是用来管理无状态应用的，面向的集群的管理，而不是面向的是一个不可变的个体</p><p>Deployment 为Pod 和 ReplicaSet 之上，提供了一个声明式定义（declarative）方法，用来替代以前的ReplicationController 来方便的管理应用。</p><p>你只需要在 Deployment 中描述您想要的目标状态是什么，Deployment controller 就会帮您将 Pod 和ReplicaSet 的实际状态改变到您的目标状态。您可以定义一个全新的 Deployment 来</p><p>创建 ReplicaSet 或者删除已有的 Deployment 并创建一个新的来替换。也就是说Deployment是可以管理多个ReplicaSet的</p><p>典型的应用场景包括：</p><ol><li>定义Deployment来创建Pod和ReplicaSet,使用Deployment来创建ReplicaSet。ReplicaSet在后台创建pod。检查启动状态，看它是成功还是失败。</li><li>然后，通过更新Deployment的PodTemplateSpec字段来声明Pod的新状态。这会创建一个新的ReplicaSet，Deployment会按照控制的速率将pod从旧的ReplicaSet移动到新d的ReplicaSet中。</li><li>如果当前状态不稳定，回滚到之前的Deployment revision。每次回滚都会更新Deployment的revision。</li><li>扩容Deployment以满足更高的负载。</li><li>暂停Deployment来应用PodTemplateSpec的多个修复，然后恢复上线。</li><li>根据Deployment 的状态判断上线是否hang住了。</li><li>清除旧的不必要的 ReplicaSet。</li></ol><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>yml文件实例(deployment_nginx.yml)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.12.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deployment_nginx.yml</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-08/Snip20190309_10.png" alt="avatar"></p><p>查看deployment信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment</span><br><span class="line">kubectl get deployment -o wide</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-08/Snip20190309_11.png" alt="avatar"></p><h3 id="update-nginx-to-1-13"><a href="#update-nginx-to-1-13" class="headerlink" title="update nginx to 1.13"></a>update nginx to 1.13</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image</span><br><span class="line">   <span class="string">'&lt;resource&gt; &lt;name&gt;'</span></span><br><span class="line">   <span class="string">'&lt;resource&gt;'</span></span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment nginx-deployment nginx=nginx:1.13</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-08/Snip20190309_12.png" alt="avatar"></p><h3 id="rollout"><a href="#rollout" class="headerlink" title="rollout"></a>rollout</h3><p>查看history<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout <span class="built_in">history</span> deployment nginx-deployment</span><br></pre></td></tr></table></figure></p><p>回退版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment nginx-deployment</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-08/Snip20190309_13.png" alt="avatar"></p><h3 id="expose-port"><a href="#expose-port" class="headerlink" title="expose port"></a>expose port</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx-deployment --<span class="built_in">type</span>=NodePort</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-08/Snip20190309_14.png" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Kubenetets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Swarm</title>
      <link href="/2019/03/06/2019-03-06-docker-swarm/"/>
      <url>/2019/03/06/2019-03-06-docker-swarm/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><img src="/img/in-post/2019-03-06/5.png" alt="avatar"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>主节点：192.168.205.10<br>从节点1：192.168.205.11<br>从节点2：192.168.205.12</p><p><img src="/img/in-post/2019-03-06/1.png" alt="avatar"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.205.10</span><br></pre></td></tr></table></figure><p>复制提示的命令到其它两个容器中执行</p><p><img src="/img/in-post/2019-03-06/2.png" alt="avatar"><br><img src="/img/in-post/2019-03-06/3.png" alt="avatar"></p><p>查看node信息</p><p><img src="/img/in-post/2019-03-06/4.png" alt="avatar"></p><h2 id="service-创建和水平扩展"><a href="#service-创建和水平扩展" class="headerlink" title="service 创建和水平扩展"></a>service 创建和水平扩展</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker service COMMAND</span><br><span class="line"></span><br><span class="line">Manage services</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a new service</span><br><span class="line">  inspect     Display detailed information on one or more services</span><br><span class="line">  logs        Fetch the logs of a service or task</span><br><span class="line">  ls          List services</span><br><span class="line">  ps          List the tasks of one or more services</span><br><span class="line">  rm          Remove one or more services</span><br><span class="line">  rollback    Revert changes to a service<span class="string">'s configuration</span></span><br><span class="line"><span class="string">  scale       Scale one or multiple replicated services</span></span><br><span class="line"><span class="string">  update      Update a service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run '</span>docker service COMMAND --<span class="built_in">help</span><span class="string">' for more information on a command</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name demo busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p>查看容器详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service ls       </span><br><span class="line">docker service ps demo  //查看service存放在哪台机器</span><br><span class="line">docker ps   //查看当前机器下的service</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-06/Snip20190306_6.png" alt="avatar"></p><p>replicated表明可以横向扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale demo=5</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-06/Snip20190306_7.png" alt="avatar"></p><p>5/5表示5个都已经ready/共5个scale</p><p>swarm 分布情况<br><img src="/img/in-post/2019-03-06/Snip20190306_1.png" alt="avatar"><br><img src="/img/in-post/2019-03-06/Snip20190306_2.png" alt="avatar"></p><p>删除swarm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service rm demo</span><br></pre></td></tr></table></figure><h2 id="在docker-swarm下部署wordpress"><a href="#在docker-swarm下部署wordpress" class="headerlink" title="在docker swarm下部署wordpress"></a>在docker swarm下部署wordpress</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//创建overlay网络</span><br><span class="line">[vagrant@swarm-manager ~]$ docker network create -d overlay demo</span><br><span class="line">lqem7ybsxvsqupsamhs7gwuym</span><br><span class="line">[vagrant@swarm-manager ~]$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">81117831f35e        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">lqem7ybsxvsq        demo                overlay             swarm</span><br><span class="line">f5cf7cd988bf        docker_gwbridge     bridge              <span class="built_in">local</span></span><br><span class="line">6fca47e6833e        host                host                <span class="built_in">local</span></span><br><span class="line">qn8r5p813ae9        ingress             overlay             swarm</span><br><span class="line">5d8be2887f8b        none                null                <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>创建mysql service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name mysql --env MYSQL_ROOT_PASSWORD=root --env MYSQL_DATABASE=wordpress --network demo --mount <span class="built_in">type</span>=volume,<span class="built_in">source</span>=mysql-data,destination=/var/lib/mysql mysql:5.7</span><br></pre></td></tr></table></figure><p>创建wordpress service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name wordpress -p 80:80 --env WORDPRESS_DB_PASSWORD=root --env WORDPRESS_DB_HOST=mysql --network demo wordpress</span><br></pre></td></tr></table></figure><p>部署成功<br><img src="/img/in-post/2019-03-06/Snip20190307_2.png" alt="avatar"></p><p>此时访问集群中任意一台机器的ip都可以访问到wordpress，实际上,docker在swarm中建立了一个虚拟ip来实现通信，关于通信方式可参考<a href="https://www.jianshu.com/p/bfb2c125d2bf" target="_blank" rel="noopener">routingmesh</a></p><h2 id="Routing-Mesh的两种体现"><a href="#Routing-Mesh的两种体现" class="headerlink" title="Routing Mesh的两种体现"></a>Routing Mesh的两种体现</h2><ol><li>internal:Container与Container之间访问通过overlay网络(虚拟ip)</li><li>ingress: 如果服务有绑定接口，此服务可通过swarm中任意节点访问</li></ol><h2 id="ingress-负载均衡"><a href="#ingress-负载均衡" class="headerlink" title="ingress 负载均衡"></a>ingress 负载均衡</h2><p>作用：</p><ol><li>外部访问的负载均衡</li><li>服务端口被暴漏给各个swarm节点</li><li>内部通过ipvs进行负载均衡</li></ol><h2 id="docker-stack"><a href="#docker-stack" class="headerlink" title="docker stack"></a>docker stack</h2><h3 id="docker-compose-语法梳理"><a href="#docker-compose-语法梳理" class="headerlink" title="docker-compose 语法梳理"></a>docker-compose 语法梳理</h3><h4 id="ENDPOINT-MODE"><a href="#ENDPOINT-MODE" class="headerlink" title="ENDPOINT_MODE"></a>ENDPOINT_MODE</h4><p>ENDPOINT_MODE: vip | dnsrr</p><p>vip 通过lvs负载均衡虚拟ip的方式（默认推荐使用）<br>dnsrr：dns负载均衡轮询策略</p><h4 id="LABELS"><a href="#LABELS" class="headerlink" title="LABELS"></a>LABELS</h4><p>lables是起到帮助信息的作用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: web</span><br><span class="line">    deploy:</span><br><span class="line">      labels:</span><br><span class="line">        com.example.description: <span class="string">"This label will appear on the web service"</span></span><br></pre></td></tr></table></figure><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p>mode: global | replicated(默认)</p><p>replicated可以做横向扩展，global不可以</p><h4 id="PLACEMENT"><a href="#PLACEMENT" class="headerlink" title="PLACEMENT"></a>PLACEMENT</h4><p>node.role == manager    指定部署在swarm manager节点上<br>constraints     一些限制条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3.3'</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.role == manager            </span><br><span class="line">          - engine.labels.operatingsystem == ubuntu 14.04</span><br><span class="line">        preferences:</span><br><span class="line">          - spread: node.labels.zone</span><br></pre></td></tr></table></figure><h4 id="REPLICAS"><a href="#REPLICAS" class="headerlink" title="REPLICAS"></a>REPLICAS</h4><p>在mode：replicated下有效<br>replicas: 6     部署6个service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  worker:</span><br><span class="line">    image: dockersamples/examplevotingapp_worker</span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">      - backend</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 6</span><br></pre></td></tr></table></figure><h4 id="RESOURCES"><a href="#RESOURCES" class="headerlink" title="RESOURCES"></a>RESOURCES</h4><p>(cpu_shares, cpu_quota, cpuset, mem_limit, memswap_limit, mem_swappiness)的一些资源设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: <span class="string">'0.50'</span></span><br><span class="line">          memory: 50M</span><br><span class="line">        reservations:</span><br><span class="line">          cpus: <span class="string">'0.25'</span></span><br><span class="line">          memory: 20M</span><br></pre></td></tr></table></figure><p>表示redis服务被限制使用不超过50M的内存和0.50(50%)的可用处理时间(CPU)，并保留20M的内存和0.25 CPU时间(始终可用)</p><h4 id="RESTART-POLICY"><a href="#RESTART-POLICY" class="headerlink" title="RESTART_POLICY"></a>RESTART_POLICY</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">        delay: 5s</span><br><span class="line">        max_attempts: 3</span><br><span class="line">        window: 120s</span><br></pre></td></tr></table></figure><p>表示服务停止时最大尝试次数为3,重启时间间隔是5秒，重启是否成功之前需要等待120s时间</p><h4 id="ROLLBACK-CONFIG"><a href="#ROLLBACK-CONFIG" class="headerlink" title="ROLLBACK_CONFIG"></a>ROLLBACK_CONFIG</h4><p>parallelism：最多可以同时update2个replicas，每次只能更新一个<br>delay：每次更新之间的间隔时间，<br>order: 更新期间的操作顺序。stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，正在运行的任务短暂搁置)(默认stop-first)注意:只支持v3.4或更高版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3.4'</span></span><br><span class="line">services:</span><br><span class="line">  vote:</span><br><span class="line">    image: dockersamples/examplevotingapp_vote:before</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: 2</span><br><span class="line">      update_config:</span><br><span class="line">        parallelism: 2</span><br><span class="line">        delay: 10s</span><br><span class="line">        order: stop-first</span><br></pre></td></tr></table></figure><p>详情参考<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">compose-file</a></p><h3 id="通过docker-stack-部署wordpress"><a href="#通过docker-stack-部署wordpress" class="headerlink" title="通过docker stack 部署wordpress"></a>通过docker stack 部署wordpress</h3><p>sudo mkdir -p /usr/docker-vol/mysql/data</p><p>vim docker-compose.yml </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  web:</span><br><span class="line">    image: wordpress</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: mysql</span><br><span class="line">      WORDPRESS_DB_PASSWORD: root</span><br><span class="line">    networks:</span><br><span class="line">      - my-network</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 3</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">        delay: 5s</span><br><span class="line">        max_attempts: 3</span><br><span class="line">      update_config:</span><br><span class="line">        parallelism: 1</span><br><span class="line">        delay: 10s</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: root</span><br><span class="line">      MYSQL_DATABASE: wordpress</span><br><span class="line">    volumes:</span><br><span class="line">      - /usr/docker-vol/mysql/data:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      - my-network</span><br><span class="line">    deploy:</span><br><span class="line">      mode: global</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: <span class="string">"0.2"</span></span><br><span class="line">          memory: 512M</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.role == manager</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql-data:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  my-network:</span><br><span class="line">    driver: overlay</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy wordpress --compose-file=docker-compose.yml</span><br></pre></td></tr></table></figure><p>docker stack services wordpress 查看service准备情况</p><p>docker stack ls 列举stack</p><p>docker stack ps wordpress 查看wordpress运行情况</p><p><img src="/img/in-post/2019-03-08/Snip20190308_5.png" alt="avatar"></p><p>看到如下界面配置成功</p><p><img src="/img/in-post/2019-03-08/Snip20190308_6.png" alt="avatar"></p><p>清空环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm wordpress</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Volume</title>
      <link href="/2019/03/04/2019-03-04-docker-volume/"/>
      <url>/2019/03/04/2019-03-04-docker-volume/</url>
      
        <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls                // 列出所有volume</span><br><span class="line">docker volume rm &lt;VOLUME...&gt;    // 删除一个或多个volume</span><br><span class="line">docker volume rm $(docker volume ls -qf dangling=<span class="literal">true</span>) //删除失效的volume:</span><br></pre></td></tr></table></figure><h2 id="Data-Volume"><a href="#Data-Volume" class="headerlink" title="Data Volume"></a>Data Volume</h2><p>volume是docker数据持久化的一种方式，那么怎样使用volume呢？</p><h3 id="Dockerfile使用"><a href="#Dockerfile使用" class="headerlink" title="Dockerfile使用"></a>Dockerfile使用</h3><p><img src="/img/in-post/2019-03-04/2.png" alt=""></p><p>可以通过mysql官方的Dockerfile看到volume的使用方式</p><h3 id="命令模式使用"><a href="#命令模式使用" class="headerlink" title="命令模式使用"></a>命令模式使用</h3><p>启动一台mysql;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql1 -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure><p>查看volume:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pengshiliang@pengshiliang-virtual-machine:~$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               195d16514c70f7990f190b1557fb2131a2b8942c48ef50025b7f08fc7b082dcd</span><br><span class="line">pengshiliang@pengshiliang-virtual-machine:~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES</span><br><span class="line">20752e526d9e        mysql               <span class="string">"docker-entrypoint.s…"</span>   14 seconds ago      Up 13 seconds       3306/tcp, 33060/tcp   mysql1</span><br><span class="line">pengshiliang@pengshiliang-virtual-machine:~$ docker volume inspect 195d16514c70f7990f190b1557fb2131a2b8942c48ef50025b7f08fc7b082dcd</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"CreatedAt"</span>: <span class="string">"2019-03-04T21:41:29+08:00"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Labels"</span>: null,</span><br><span class="line">        <span class="string">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/195d16514c70f7990f190b1557fb2131a2b8942c48ef50025b7f08fc7b082dcd/_data"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"195d16514c70f7990f190b1557fb2131a2b8942c48ef50025b7f08fc7b082dcd"</span>,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">pengshiliang@pengshiliang-virtual-machine:~$</span><br></pre></td></tr></table></figure><p>可以通过inspect命令查看volume的存储路径</p><p>删掉mysql container </p><p><img src="/img/in-post/2019-03-04/1.png" alt=""></p><p>发现volume仍然存在，也确认了docker可以通过volume持久化存储数据</p><p>还可以通过下面的实例来证实</p><p>为了避免环境影响,删掉刚才产生的volume，重新启动一台mysql</p><p><img src="/img/in-post/2019-03-04/3.png" alt=""></p><p>valume的名称太长了,加入一个-v参数，来给volume起个别名,然后启动mysql,并指定volume存放位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v mysql:/var/lib/mysql --name mysql1 -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-04/4.png" alt=""></p><p>进入当前container，并创建一个数据库</p><p><img src="/img/in-post/2019-03-04/5.png" alt=""></p><p>然后退出，把当前的mysql1容器删掉</p><p><img src="/img/in-post/2019-03-04/6.png" alt=""></p><p>检查volume</p><p><img src="/img/in-post/2019-03-04/7.png" alt=""></p><p>再去启动一台mysql2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v mysql:/var/lib/mysql --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure><p>进入到当前容器的mysql数据库查看详情</p><p><img src="/img/in-post/2019-03-04/8.png" alt=""></p><p>发现刚才创建的数据库还在,也证明了volume是持久化存储的方式</p><h2 id="bind-mouting"><a href="#bind-mouting" class="headerlink" title="bind mouting"></a>bind mouting</h2><p>命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -run -v /home/aaa:/root/aaa</span><br></pre></td></tr></table></figure></p><p>通过docker bind mouting将本地和服务器(容器)上的资源绑定，改变一方都对数据同步，从而达到直接修改本地资源，服务器上的资源自动更新</p><p>准备一个目录，创建index.html文件</p><p><img src="/img/in-post/2019-03-04/9.png" alt=""></p><p><img src="/img/in-post/2019-03-04/10.png" alt=""></p><p>可以发现，当前目录下的文件是和container内部的/usr/share/nginx/html文件是同步的</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose</title>
      <link href="/2019/03/04/2019-03-05-docker-compose/"/>
      <url>/2019/03/04/2019-03-05-docker-compose/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d nginx                     构建建启动nignx容器</span><br><span class="line"></span><br><span class="line">docker-compose <span class="built_in">exec</span> nginx bash            登录到nginx容器中</span><br><span class="line"></span><br><span class="line">docker-compose down                              删除所有nginx容器,镜像</span><br><span class="line"></span><br><span class="line">docker-compose ps                                   显示所有容器</span><br><span class="line"></span><br><span class="line">docker-compose restart nginx                   重新启动nginx容器</span><br><span class="line"></span><br><span class="line">docker-compose run --no-deps --rm php-fpm php -v  在php-fpm中不启动关联容器，并容器执行php -v 执行完成后删除容器</span><br><span class="line"></span><br><span class="line">docker-compose build nginx                     构建镜像 。        </span><br><span class="line"></span><br><span class="line">docker-compose build --no-cache nginx   不带缓存的构建。</span><br><span class="line"></span><br><span class="line">docker-compose logs  nginx                     查看nginx的日志 </span><br><span class="line"></span><br><span class="line">docker-compose logs -f nginx                   查看nginx的实时日志</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">docker-compose config  -q                        验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容，当文件配置错误，输出错误信息。 </span><br><span class="line"></span><br><span class="line">docker-compose events --json nginx       以json的形式输出nginx的docker日志</span><br><span class="line"></span><br><span class="line">docker-compose pause nginx                 暂停nignx容器</span><br><span class="line"></span><br><span class="line">docker-compose unpause nginx             恢复ningx容器</span><br><span class="line"></span><br><span class="line">docker-compose rm nginx                       删除容器（删除前必须关闭容器）</span><br><span class="line"></span><br><span class="line">docker-compose stop nginx                    停止nignx容器</span><br><span class="line"></span><br><span class="line">docker-compose start nginx                    启动nignx容器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker network</title>
      <link href="/2019/03/03/2019-03-03-docker_network/"/>
      <url>/2019/03/03/2019-03-03-docker_network/</url>
      
        <content type="html"><![CDATA[<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>两台vagrant 创建的 docker 虚拟机，虚拟机配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">boxes = [</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; <span class="string">"docker-node1"</span>,</span><br><span class="line">        :eth1 =&gt; <span class="string">"192.168.205.10"</span>,</span><br><span class="line">        :mem =&gt; <span class="string">"1024"</span>,</span><br><span class="line">        :cpu =&gt; <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; <span class="string">"docker-node2"</span>,</span><br><span class="line">        :eth1 =&gt; <span class="string">"192.168.205.11"</span>,</span><br><span class="line">        :mem =&gt; <span class="string">"1024"</span>,</span><br><span class="line">        :cpu =&gt; <span class="string">"1"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>启动两个 docker 容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name <span class="built_in">test</span> busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br><span class="line">sudo docker run -d --name test1 busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/8.png" alt="avatar"></p><p>此时发现da678d729936的ip地址为172.17.0.3，cf393747710e的ip地址为172.17.0.2</p><p>执行<figure class="highlight docker"><figcaption><span>exec da678d729936 ping 172.17.0.2```试试可不可以ping通cf393747710e的ip</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![avatar](/img/in-post/<span class="number">2019</span>-<span class="number">03</span>-<span class="number">03</span>/<span class="number">9</span>.png)</span><br><span class="line"></span><br><span class="line">发现可以ping通，证明docker两个container之间的ip namespace是隔离开的，但是两个ip之间是可以ping通的，那么具体原理是什么呢？</span><br><span class="line">我们可以通过下面的实验模拟来理解一下</span><br><span class="line"></span><br><span class="line"><span class="comment">## network namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建net namespace</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo ip netns <span class="keyword">add</span><span class="bash"> &lt;name&gt;        //  添加一个namespace</span></span><br><span class="line"><span class="bash">sudo ip netns list</span></span><br><span class="line"><span class="bash">sudo ip netns <span class="built_in">exec</span> <span class="built_in">test</span> ip a    //  查看<span class="built_in">test</span> ip info</span></span><br></pre></td></tr></table></figure></p><p>创建两个namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns add <span class="built_in">test</span></span><br><span class="line">sudo ip netns add test1</span><br></pre></td></tr></table></figure><p>执行<figure class="highlight plain"><figcaption><span>ip netns exec test ip link``` 查看ip信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![avatar](/img/in-post/2019-03-03/2.png)</span><br><span class="line"></span><br><span class="line">接口启动命令</span><br><span class="line">```bash</span><br><span class="line">sudo ip netns exec test ip link set dev lo up</span><br></pre></td></tr></table></figure></p><p>此时lo网卡是down状态</p><p>执行<figure class="highlight plain"><figcaption><span>ip netns exec test ip link set dev lo up``` 将lo 开启</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![avatar](/img/in-post/2019-03-03/3.png)</span><br><span class="line"></span><br><span class="line">出现unknown原因是因为lo是单个接口，只有做link后的成对接口可以up</span><br><span class="line"></span><br><span class="line">### link namespace</span><br><span class="line"></span><br><span class="line">添加一对veth接口，执行```sudo ip link add veth-test type veth peer name veth-test1</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-03/4.png" alt="avatar"></p><p>添加 veth-test 到 test namespace 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link <span class="built_in">set</span> veth-test netns <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>分别查看本地和test ip link 信息</p><p><img src="/img/in-post/2019-03-03/5.png" alt="avatar"></p><p>发现本地的veth-test接口被添加到了test中，同理，添加test1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link <span class="built_in">set</span> veth-test1 netns test1</span><br></pre></td></tr></table></figure><h3 id="ip-link"><a href="#ip-link" class="headerlink" title="ip link"></a>ip link</h3><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="built_in">test</span> ip addr add 192.168.1.1/24 dev veth-test</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> test1 ip addr add 192.168.1.2/24 dev veth-test1</span><br></pre></td></tr></table></figure></p><p>然后启动接口，参照上面启动lo接口的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="built_in">test</span> ip link <span class="built_in">set</span> dev veth-test up</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> test1 ip link <span class="built_in">set</span> dev veth-test1 up</span><br></pre></td></tr></table></figure><p>查看test和test1 ip 状态<br><img src="/img/in-post/2019-03-03/6.png" alt="avatar"></p><p>发现两个接口状态都是state up，并且test和test1均已分配192.168.1.1和192.168.1.2表示接口已经启动成功,测试相互ping一下</p><p><img src="/img/in-post/2019-03-03/7.png" alt="avatar"></p><h2 id="docker-network"><a href="#docker-network" class="headerlink" title="docker network"></a>docker network</h2><h3 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h3><p>把之前docker container 中的两个容器stop和rm掉，重新启动一个test容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name <span class="built_in">test</span> busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 列举出docker的网络</span><br><span class="line">sudo docker network ls</span><br><span class="line">// 查看某个docker network id 的具体信息</span><br><span class="line">sudo docker network inspect &lt;networkid&gt;</span><br></pre></td></tr></table></figure><p>eg: 查看bridge网络的详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 labs]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">8378c2ff8198        busybox             <span class="string">"/bin/sh -c 'while t…"</span>   3 seconds ago       Up 3 seconds                            <span class="built_in">test</span></span><br><span class="line">[vagrant@docker-node1 labs]$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">1fb7b167deb2        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">2d13173ae2bf        host                host                <span class="built_in">local</span></span><br><span class="line">6d2c375cd6cd        none                null                <span class="built_in">local</span></span><br><span class="line">[vagrant@docker-node1 labs]$ docker network inspect 1fb7b167deb2</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"1fb7b167deb233148d61b85c03bb68d9b8e3cbb124b60deb7be8acf88abdac21"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2019-03-03T02:04:36.334606846Z"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.17.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"8378c2ff8198bbac6647463286408de11a7814c7882e99232404ecab0e1517ad"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"test"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"f976820b8133d11cd37602ece5f762106aba2f3735420272ad0ed3bd8b1dc58a"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;</span><br><span class="line">            <span class="string">"com.docker.network.bridge.default_bridge"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_icc"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_ip_masquerade"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.host_binding_ipv4"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.name"</span>: <span class="string">"docker0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.driver.mtu"</span>: <span class="string">"1500"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[vagrant@docker-node1 labs]$</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/10.png" alt="avatar"></p><p>通过上图可以看出本地的 vethd347bdc@if11 和 容器内的 eth0@if12 是一对接口<br>这一对veth peer 连接到了docker0的网络上面，可以通过下面的演示验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install bridge-utils</span><br></pre></td></tr></table></figure><p>brctl命令说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 labs]$ brctl</span><br><span class="line">Usage: brctl [commands]</span><br><span class="line">commands:</span><br><span class="line">addbr     &lt;bridge&gt;add bridge</span><br><span class="line">delbr     &lt;bridge&gt;delete bridge</span><br><span class="line">addif     &lt;bridge&gt; &lt;device&gt;add interface to bridge</span><br><span class="line">delif     &lt;bridge&gt; &lt;device&gt;delete interface from bridge</span><br><span class="line">hairpin   &lt;bridge&gt; &lt;port&gt; &#123;on|off&#125;turn hairpin on/off</span><br><span class="line">setageing &lt;bridge&gt; &lt;time&gt;<span class="built_in">set</span> ageing time</span><br><span class="line">setbridgeprio&lt;bridge&gt; &lt;prio&gt;<span class="built_in">set</span> bridge priority</span><br><span class="line">setfd     &lt;bridge&gt; &lt;time&gt;<span class="built_in">set</span> bridge forward delay</span><br><span class="line">sethello  &lt;bridge&gt; &lt;time&gt;<span class="built_in">set</span> hello time</span><br><span class="line">setmaxage &lt;bridge&gt; &lt;time&gt;<span class="built_in">set</span> max message age</span><br><span class="line">setpathcost&lt;bridge&gt; &lt;port&gt; &lt;cost&gt;<span class="built_in">set</span> path cost</span><br><span class="line">setportprio&lt;bridge&gt; &lt;port&gt; &lt;prio&gt;<span class="built_in">set</span> port priority</span><br><span class="line">show      [ &lt;bridge&gt; ]show a list of bridges</span><br><span class="line">showmacs  &lt;bridge&gt;show a list of mac addrs</span><br><span class="line">showstp   &lt;bridge&gt;show bridge stp info</span><br><span class="line">stp       &lt;bridge&gt; &#123;on|off&#125;turn stp on/off</span><br><span class="line">[vagrant@docker-node1 labs]$</span><br></pre></td></tr></table></figure><p>启动test2容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name test1 busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p>通过<figure class="highlight plain"><figcaption><span>show```命令可以看到如下结果：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[vagrant@docker-node1 labs]$ brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.02425db75bb1noveth4de57f6</span><br><span class="line">            vethd347bdc</span><br></pre></td></tr></table></figure></p><p>可以看到docker0和两个veth peer接口的关系</p><h3 id="host-和-none"><a href="#host-和-none" class="headerlink" title="host 和 none"></a>host 和 none</h3><h4 id="none"><a href="#none" class="headerlink" title="none"></a>none</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name test4 --network none busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/25.png" alt="avatar"></p><p>这种方式创建的容器没有ip地址，只能通过exec的方式进入</p><p><img src="/img/in-post/2019-03-03/26.png" alt="avatar"></p><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name test5 --network host busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/27.png" alt="avatar"></p><p>进入test5容器查看ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker <span class="built_in">exec</span> test5 ip a</span><br><span class="line">...</span><br><span class="line">37: veth9cb9ecd@if36: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue master docker0</span><br><span class="line">    link/ether ce:61:3e:72:57:f9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::cc61:3eff:fe72:57f9/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">...</span><br><span class="line">[vagrant@docker-node1 ~]$  ip a</span><br><span class="line">...</span><br><span class="line">37: veth9cb9ecd@if36: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP</span><br><span class="line">    link/ether ce:61:3e:72:57:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 4</span><br><span class="line">    inet6 fe80::cc61:3eff:fe72:57f9/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们发现这种方式的docker container 共享了主机里面的ip namespace</p><h2 id="多机器通信"><a href="#多机器通信" class="headerlink" title="多机器通信"></a>多机器通信</h2><p><img src="/img/in-post/2019-03-03/28.png" alt="avatar"></p><h3 id="Mutil-host-networking-with-etcd"><a href="#Mutil-host-networking-with-etcd" class="headerlink" title="Mutil-host networking with etcd"></a>Mutil-host networking with etcd</h3><h4 id="setup-etcd-cluster"><a href="#setup-etcd-cluster" class="headerlink" title="setup etcd cluster"></a>setup etcd cluster</h4><p>在docker-node1上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vagrant@docker-node1:~$ wget https://github.com/coreos/etcd/releases/download/v3.0.12/etcd-v3.0.12-linux-amd64.tar.gz</span><br><span class="line">vagrant@docker-node1:~$ tar zxvf etcd-v3.0.12-linux-amd64.tar.gz</span><br><span class="line">vagrant@docker-node1:~$ cd etcd-v3.0.12-linux-amd64</span><br><span class="line">vagrant@docker-node1:~$ nohup ./etcd --name docker-node1 --initial-advertise-peer-urls http://192.168.205.10:2380 \</span><br><span class="line">--listen-peer-urls http://192.168.205.10:2380 \</span><br><span class="line">--listen-client-urls http://192.168.205.10:2379,http://127.0.0.1:2379 \</span><br><span class="line">--advertise-client-urls http://192.168.205.10:2379 \</span><br><span class="line">--initial-cluster-token etcd-cluster \</span><br><span class="line">--initial-cluster docker-node1=http://192.168.205.10:2380,docker-node2=http://192.168.205.11:2380 \</span><br><span class="line">--initial-cluster-state new&amp;</span><br></pre></td></tr></table></figure><p>在docker-node2上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vagrant@docker-node2:~$ wget https://github.com/coreos/etcd/releases/download/v3.0.12/etcd-v3.0.12-linux-amd64.tar.gz</span><br><span class="line">vagrant@docker-node2:~$ tar zxvf etcd-v3.0.12-linux-amd64.tar.gz</span><br><span class="line">vagrant@docker-node2:~$ cd etcd-v3.0.12-linux-amd64/</span><br><span class="line">vagrant@docker-node2:~$ nohup ./etcd --name docker-node2 --initial-advertise-peer-urls http://192.168.205.11:2380 \</span><br><span class="line">--listen-peer-urls http://192.168.205.11:2380 \</span><br><span class="line">--listen-client-urls http://192.168.205.11:2379,http://127.0.0.1:2379 \</span><br><span class="line">--advertise-client-urls http://192.168.205.11:2379 \</span><br><span class="line">--initial-cluster-token etcd-cluster \</span><br><span class="line">--initial-cluster docker-node1=http://192.168.205.10:2380,docker-node2=http://192.168.205.11:2380 \</span><br><span class="line">--initial-cluster-state new&amp;</span><br></pre></td></tr></table></figure><p>检查cluster状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vagrant@docker-node2:~/etcd-v3.0.12-linux-amd64$ ./etcdctl cluster-health</span><br><span class="line">member 21eca106efe4caee is healthy: got healthy result from http://192.168.205.10:2379</span><br><span class="line">member 8614974c83d1cc6d is healthy: got healthy result from http://192.168.205.11:2379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure><h4 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h4><p>在docker-node1上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker stop</span><br><span class="line">$ sudo /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.205.10:2379 --cluster-advertise=192.168.205.10:2375&amp;</span><br></pre></td></tr></table></figure><p>在docker-node2上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker stop</span><br><span class="line">$ sudo /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.205.11:2379 --cluster-advertise=192.168.205.11:2375&amp;</span><br></pre></td></tr></table></figure><h4 id="创建overlay-network"><a href="#创建overlay-network" class="headerlink" title="创建overlay network"></a>创建overlay network</h4><p>在docker-node1上创建一个demo的overlay network</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 etcd-v3.0.12-linux-amd64]$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">22c070951371        bridge              bridge              local</span><br><span class="line">2d13173ae2bf        host                host                local</span><br><span class="line">c144a2167891        my-bridge           bridge              local</span><br><span class="line">6d2c375cd6cd        none                null                local</span><br><span class="line">[vagrant@docker-node1 etcd-v3.0.12-linux-amd64]$ sudo docker network create -d overlay demo</span><br><span class="line">6f58ba8913c3e0df5ac9086f79e87cc62e57ac723d26dcb05edb7635f19103c8</span><br><span class="line">[vagrant@docker-node1 etcd-v3.0.12-linux-amd64]$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">22c070951371        bridge              bridge              local</span><br><span class="line">6f58ba8913c3        demo                overlay             global</span><br><span class="line">2d13173ae2bf        host                host                local</span><br><span class="line">c144a2167891        my-bridge           bridge              local</span><br><span class="line">6d2c375cd6cd        none                null                local</span><br><span class="line">[vagrant@docker-node1 etcd-v3.0.12-linux-amd64]$ sudo docker network inspect demo</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;demo&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;6f58ba8913c3e0df5ac9086f79e87cc62e57ac723d26dcb05edb7635f19103c8&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2019-03-03T13:03:20.535696601Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;global&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;10.0.0.0/24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;10.0.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们会看到在node2上，这个demo的overlay network会被同步创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vagrant@docker-node2:~$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">c9947d4c3669        bridge              bridge              local</span><br><span class="line">3d430f3338a2        demo                overlay             global</span><br><span class="line">fa5168034de1        host                host                local</span><br><span class="line">c2ca34abec2a        none                null                local</span><br></pre></td></tr></table></figure><p>通过查看etcd的key-value, 我们获取到，这个demo的network是通过etcd从node1同步到node2的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node2 etcd-v3.0.12-linux-amd64]$ ./etcdctl ls /docker</span><br><span class="line">/docker/network</span><br><span class="line">/docker/nodes</span><br><span class="line">[vagrant@docker-node2 etcd-v3.0.12-linux-amd64]$ ./etcdctl ls /docker/nodes</span><br><span class="line">/docker/nodes/192.168.205.10:2375</span><br><span class="line">/docker/nodes/192.168.205.11:2375</span><br><span class="line">[vagrant@docker-node2 etcd-v3.0.12-linux-amd64]$ ./etcdctl ls /docker/network/v1.0/network</span><br><span class="line">/docker/network/v1.0/network/6f58ba8913c3e0df5ac9086f79e87cc62e57ac723d26dcb05edb7635f19103c8</span><br><span class="line">[vagrant@docker-node2 etcd-v3.0.12-linux-amd64]$ ./etcdctl get /docker/network/v1.0/network/6f58ba8913c3e0df5ac9086f79e87cc62e57ac723d26dcb05edb7635f19103c8</span><br><span class="line">&#123;&quot;addrSpace&quot;:&quot;GlobalDefault&quot;,&quot;attachable&quot;:false,&quot;configFrom&quot;:&quot;&quot;,&quot;configOnly&quot;:false,&quot;created&quot;:&quot;2019-03-03T13:03:20.535696601Z&quot;,&quot;enableIPv6&quot;:false,&quot;generic&quot;:&#123;&quot;com.docker.network.enable_ipv6&quot;:false,&quot;com.docker.network.generic&quot;:&#123;&#125;&#125;,&quot;id&quot;:&quot;6f58ba8913c3e0df5ac9086f79e87cc62e57ac723d26dcb05edb7635f19103c8&quot;,&quot;inDelete&quot;:false,&quot;ingress&quot;:false,&quot;internal&quot;:false,&quot;ipamOptions&quot;:&#123;&#125;,&quot;ipamType&quot;:&quot;default&quot;,&quot;ipamV4Config&quot;:&quot;[&#123;\&quot;PreferredPool\&quot;:\&quot;\&quot;,\&quot;SubPool\&quot;:\&quot;\&quot;,\&quot;Gateway\&quot;:\&quot;\&quot;,\&quot;AuxAddresses\&quot;:null&#125;]&quot;,&quot;ipamV4Info&quot;:&quot;[&#123;\&quot;IPAMData\&quot;:\&quot;&#123;\\\&quot;AddressSpace\\\&quot;:\\\&quot;GlobalDefault\\\&quot;,\\\&quot;Gateway\\\&quot;:\\\&quot;10.0.0.1/24\\\&quot;,\\\&quot;Pool\\\&quot;:\\\&quot;10.0.0.0/24\\\&quot;&#125;\&quot;,\&quot;PoolID\&quot;:\&quot;GlobalDefault/10.0.0.0/24\&quot;&#125;]&quot;,&quot;labels&quot;:&#123;&#125;,&quot;loadBalancerIP&quot;:&quot;&quot;,&quot;loadBalancerMode&quot;:&quot;NAT&quot;,&quot;name&quot;:&quot;demo&quot;,&quot;networkType&quot;:&quot;overlay&quot;,&quot;persist&quot;:true,&quot;postIPv6&quot;:false,&quot;scope&quot;:&quot;global&quot;&#125;</span><br><span class="line">[vagrant@docker-node2 etcd-v3.0.12-linux-amd64]$</span><br></pre></td></tr></table></figure><p>在node1中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name test1 --net demo busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p>在node2中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name test2 --net demo busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p>分别查看test1,test2 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 etcd-v3.0.12-linux-amd64]$ docker <span class="built_in">exec</span> test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">19: eth0@if20: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue</span><br><span class="line">    link/ether 02:42:0a:00:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">21: eth1@if22: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue</span><br><span class="line">    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> test2 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue</span><br><span class="line">    link/ether 02:42:0a:00:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.3/24 brd 10.0.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth1@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue</span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>查看是否能ping通</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node2 etcd-v3.0.12-linux-amd64]$ docker <span class="built_in">exec</span> test2 ping 10.0.0.2</span><br><span class="line">PING 10.0.0.2 (10.0.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.2: seq=0 ttl=64 time=9.354 ms</span><br><span class="line">64 bytes from 10.0.0.2: seq=1 ttl=64 time=0.789 ms</span><br><span class="line">64 bytes from 10.0.0.2: seq=2 ttl=64 time=1.062 ms</span><br><span class="line">^C</span><br><span class="line">[vagrant@docker-node2 etcd-v3.0.12-linux-amd64]$ docker <span class="built_in">exec</span> test2 ping test1</span><br><span class="line">PING test1 (10.0.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.2: seq=0 ttl=64 time=0.724 ms</span><br><span class="line">64 bytes from 10.0.0.2: seq=1 ttl=64 time=0.590 ms</span><br><span class="line">ç64 bytes from 10.0.0.2: seq=2 ttl=64 time=0.789 ms</span><br><span class="line">64 bytes from 10.0.0.2: seq=3 ttl=64 time=0.651 ms</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker network port</title>
      <link href="/2019/03/03/2019-03-03-docker-port/"/>
      <url>/2019/03/03/2019-03-03-docker-port/</url>
      
        <content type="html"><![CDATA[<h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name web -d nginx</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/19.png" alt="avatar"></p><p>由上图可以看到我们在虚拟机内部访问container的ip的方式可以访问到nginx欢迎页，但是访问本地地址映射不到,<br>可以通过端口映射来解决这个问题</p><p>删除刚才的nginx container,重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop web</span><br><span class="line">docker rm web</span><br><span class="line">docker run --name web -d -p 80:80 nginx</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/20.png" alt="avatar"></p><p>映射成功</p><p>我的vagrant ip 映射配置<br><img src="/img/in-post/2019-03-03/21.png" alt="avatar"><br><img src="/img/in-post/2019-03-03/22.png" alt="avatar"></p><p>映射流程</p><p><img src="/img/in-post/2019-03-03/24.png" alt="avatar"></p><p>图中的192.168.205.10:80为我本机的ip私有地址，外网不能访问，如果我们是在一个云主机上创建的web服务，云主机就可以分配一个public的ip就可以作为外网的出口ip来提供服务</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker network link</title>
      <link href="/2019/03/03/2019-03-03-docker-link/"/>
      <url>/2019/03/03/2019-03-03-docker-link/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-link"><a href="#docker-link" class="headerlink" title="docker link"></a>docker link</h1><h2 id="docker-link-1"><a href="#docker-link-1" class="headerlink" title="docker link"></a>docker link</h2><p>由于docker container 之中的 ip在为创建之前是未知的，不利于服务与服务之间的配置连接，所以docker 提供了一种办法来解决这个问题，<br>可以通过 docker name 之间的link来解决</p><p><img src="/img/in-post/2019-03-03/11.png" alt="avatar"></p><p>创建test2并link到test1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name test2 --link test1 busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p>进入到test2容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it test2 /bin/sh</span><br><span class="line">ping test1</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/12.png" alt="avatar"></p><p>这种方式的优点是：<br>假如test1有一个数据库，我们可以在test2容器中通过<figure class="highlight plain"><figcaption><span>-u <name> -P <port> -h test1```来访问了</port></name></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 由于是test2 去link test1 所以，在test1容器中，ping test2是不可用的</span><br><span class="line"></span><br><span class="line">## network 创建</span><br><span class="line"></span><br><span class="line">删除掉test2容器并重新创建test2</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">docker run -d --name test2 busybox /bin/sh -c &quot;while true; do sleep 3600; done&quot;</span><br></pre></td></tr></table></figure></p><h3 id="创建bridge"><a href="#创建bridge" class="headerlink" title="创建bridge"></a>创建bridge</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge my-bridge</span><br><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/13.png" alt="avatar"></p><p>创建test3并指定network到my-bridge</p><blockquote><p>如果不指定network默认连接是docker0</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name test3 --network my-bridge busybox /bin/sh -c <span class="string">"while true; do sleep 3600; done"</span></span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/14.png" alt="avatar"></p><p>查看test3 container network信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect &lt;my-bridge id&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-03/15.png" alt="avatar"></p><h3 id="bridge连接"><a href="#bridge连接" class="headerlink" title="bridge连接"></a>bridge连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect my-bridge test2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect bridge</span><br><span class="line">docker network inspect my-bridge</span><br></pre></td></tr></table></figure><p>我们可以看到bridge和my-bridge的container中都包含了test2</p><p>进入到test2容器中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it test2 /bin/sh</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-03/16.png" alt="avatar"></p><p>可以发现在test2容器中可以ping通test3但是不能ping test1, 实际上docker在用户自己创建的bridge中做了一层link，所以test2和test3容器可以相互ping 通对方</p><p>把test1也加入到my-bridge中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect my-bridge test1</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-03/17.png" alt="avatar"></p><p>此时test1也可以ping通了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vagrant基本命令</title>
      <link href="/2019/03/02/2019-03-02-vagrant/"/>
      <url>/2019/03/02/2019-03-02-vagrant/</url>
      
        <content type="html"><![CDATA[<h2 id="vagrant-使用"><a href="#vagrant-使用" class="headerlink" title="vagrant 使用"></a>vagrant 使用</h2><h2 id="init-centos"><a href="#init-centos" class="headerlink" title="init centos"></a>init centos</h2><p>centos7 box 下载地址<a href="https://pan.baidu.com/s/1kVlAz59" target="_blank" rel="noopener">centos7</a></p><p><strong>添加vagrant box到box list</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add centos7 Vagrant-CentOS-7.box</span><br></pre></td></tr></table></figure><p><strong>初始化一个虚拟机使用刚才添加的vagrant box</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir centos</span><br><span class="line"><span class="built_in">cd</span> centos</span><br><span class="line">vim Vagrantfile</span><br></pre></td></tr></table></figure><p><strong>添加下面内容到Vagrantfile中</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">Vagrant.require_version <span class="string">"&gt;= 1.6.0"</span></span><br><span class="line"></span><br><span class="line">boxes = [</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; <span class="string">"docker-node1"</span>,</span><br><span class="line">        :eth1 =&gt; <span class="string">"192.168.205.10"</span>,</span><br><span class="line">        :mem =&gt; <span class="string">"1024"</span>,</span><br><span class="line">        :cpu =&gt; <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; <span class="string">"docker-node2"</span>,</span><br><span class="line">        :eth1 =&gt; <span class="string">"192.168.205.11"</span>,</span><br><span class="line">        :mem =&gt; <span class="string">"1024"</span>,</span><br><span class="line">        :cpu =&gt; <span class="string">"1"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) <span class="keyword">do</span> |config|</span><br><span class="line"></span><br><span class="line">  config.vm.box = <span class="string">"centos7"</span></span><br><span class="line"></span><br><span class="line">  boxes.each <span class="keyword">do</span> |opts|</span><br><span class="line">      config.vm.define opts[:name] <span class="keyword">do</span> |config|</span><br><span class="line">        config.vm.hostname = opts[:name]</span><br><span class="line">        config.vm.provider <span class="string">"vmware_fusion"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.vmx[<span class="string">"memsize"</span>] = opts[:mem]</span><br><span class="line">          v.vmx[<span class="string">"numvcpus"</span>] = opts[:cpu]</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--memory"</span>, opts[:mem]]</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--cpus"</span>, opts[:cpu]]</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        config.vm.network :private_network, ip: opts[:eth1]</span><br><span class="line">      end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  config.vm.provision <span class="string">"shell"</span>, privileged: <span class="literal">true</span>, path: <span class="string">"./setup.sh"</span></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p><strong>install docker的setup.sh文件</strong></p><p>在当前目录创建setup.sh文件并添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install some tools</span></span><br><span class="line">sudo yum install -y git vim gcc glibc-static telnet bridge-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># install docker</span></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># start docker service</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker vagrant</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">rm -rf get-docker.sh</span><br></pre></td></tr></table></figure><p><strong>启动安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure><h2 id="vagrant-报unknown-filesystem-type-‘vboxsf’-解决方案"><a href="#vagrant-报unknown-filesystem-type-‘vboxsf’-解决方案" class="headerlink" title="vagrant 报unknown filesystem type ‘vboxsf’ 解决方案"></a>vagrant 报unknown filesystem type ‘vboxsf’ 解决方案</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-vbguest</span><br><span class="line">vagrant destroy &amp;&amp; vagrant up</span><br></pre></td></tr></table></figure><h2 id="init-ubuntu"><a href="#init-ubuntu" class="headerlink" title="init ubuntu"></a>init ubuntu</h2><p>使用<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/bionic/current/" target="_blank" rel="noopener">清华源</a></p><p><strong>ubuntu18的box，终端运行如下命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add \</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/bionic/current/bionic-server-cloudimg-amd64-vagrant.box \</span><br><span class="line">--name ubuntu/bionic</span><br></pre></td></tr></table></figure><p>Vagrantfile这样写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">config.vm.box = <span class="string">"ubuntu/bionic"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>接着就是<figure class="highlight plain"><figcaption><span>up && vagrant ssh```了</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 基本命令</span><br><span class="line"></span><br><span class="line">### 列出所有Box</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">vagrant box list</span><br></pre></td></tr></table></figure></p><h3 id="添加一个Box"><a href="#添加一个Box" class="headerlink" title="添加一个Box"></a>添加一个Box</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add [options] &lt;name, url, or path</span><br></pre></td></tr></table></figure><h3 id="可以从https-app-vagrantup-com-boxes-search下载各种Vagrant映像文件"><a href="#可以从https-app-vagrantup-com-boxes-search下载各种Vagrant映像文件" class="headerlink" title="可以从https://app.vagrantup.com/boxes/search下载各种Vagrant映像文件"></a>可以从<a href="https://app.vagrantup.com/boxes/search下载各种Vagrant映像文件" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search下载各种Vagrant映像文件</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add ubuntu/trusty64</span><br></pre></td></tr></table></figure><h3 id="通过指定的URL添加远程box"><a href="#通过指定的URL添加远程box" class="headerlink" title="通过指定的URL添加远程box"></a>通过指定的URL添加远程box</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add https://atlas.hashicorp.com/ubuntu/boxes/trusty64</span><br></pre></td></tr></table></figure><h3 id="添加一个本地box"><a href="#添加一个本地box" class="headerlink" title="添加一个本地box"></a>添加一个本地box</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add &#123;box_name&#125; &#123;file_path&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化一个新VM"><a href="#初始化一个新VM" class="headerlink" title="初始化一个新VM"></a>初始化一个新VM</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init ubuntu/trustry64</span><br></pre></td></tr></table></figure><p>此命令会在当前目录创建一个名为Vagrantfile的配置文件，内容大致如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">"ubuntu/trusty64"</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="初始化一个新VM-1"><a href="#初始化一个新VM-1" class="headerlink" title="初始化一个新VM"></a>初始化一个新VM</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure><h3 id="启用SSH登陆VM"><a href="#启用SSH登陆VM" class="headerlink" title="启用SSH登陆VM"></a>启用SSH登陆VM</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh &lt;node_name&gt;</span><br></pre></td></tr></table></figure><p>如果需要从虚拟机中退出，直接在虚拟机中的命令行输入exit命令即可</p><h3 id="查看VM当前的状态"><a href="#查看VM当前的状态" class="headerlink" title="查看VM当前的状态"></a>查看VM当前的状态</h3><p>进入Vagrantfile配置文件所在的目录，执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant status</span><br></pre></td></tr></table></figure><h3 id="关闭VM"><a href="#关闭VM" class="headerlink" title="关闭VM"></a>关闭VM</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant halt</span><br></pre></td></tr></table></figure><h3 id="销毁VM"><a href="#销毁VM" class="headerlink" title="销毁VM"></a>销毁VM</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant destory [name|id]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile 语法梳理</title>
      <link href="/2019/03/02/2019-03-02-dockerfile/"/>
      <url>/2019/03/02/2019-03-02-dockerfile/</url>
      
        <content type="html"><![CDATA[<h2 id="Dockerfile语法梳理"><a href="#Dockerfile语法梳理" class="headerlink" title="Dockerfile语法梳理"></a>Dockerfile语法梳理</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>from 后面接base image</p><p>eg:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br></pre></td></tr></table></figure></p><blockquote><p>尽量使用官方的image 作为base image</p></blockquote><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"username@gmail.com"</span> </span></span><br><span class="line"><span class="bash">LABEL version=<span class="string">"1.0"</span> </span></span><br><span class="line"><span class="bash">LABEL description=<span class="string">"this is description"</span></span></span><br></pre></td></tr></table></figure><blockquote><p>MetaData 不可少</p></blockquote><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>执行命令并创建新的IMAGE LAYER</p><p>为了美观，复杂的RUN用反斜杠换行，避免无用分层，合并多条命令成一行。</p><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> yum update &amp;&amp; yum install -y vim \</span></span><br><span class="line"><span class="bash">python-dev</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y perl \</span></span><br><span class="line"><span class="bash">pwgen --no-install-recommends &amp;&amp; rm -rf \</span></span><br><span class="line"><span class="bash">/var/lib/apt/lists/*     <span class="comment">#清理cache</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> /bin/bash -c <span class="string">'source $HOME/.bashrc;echo #HOME'</span></span></span><br></pre></td></tr></table></figure><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="built_in">test</span>       <span class="comment"># 如果没有会自动创建test文件夹</span></span></span><br><span class="line"><span class="bash">WORKDIR demo</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">pwd</span>            <span class="comment"># 打印/test/demo</span></span></span><br></pre></td></tr></table></figure><blockquote><p>尽量使用WORKDIR,不要使用RUN cd,尽量使用绝对路径</p></blockquote><h3 id="ADD-and-COPY"><a href="#ADD-and-COPY" class="headerlink" title="ADD and COPY"></a>ADD and COPY</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> hello /</span></span><br><span class="line"><span class="bash">ADD test.tar.gz / <span class="comment"># 添加到根目录并解压缩</span></span></span><br><span class="line"><span class="bash">WORKDIR /root</span></span><br><span class="line"><span class="bash">ADD hello <span class="built_in">test</span> /    <span class="comment"># /root/test/hello</span></span></span><br><span class="line"><span class="bash">WORKDIR /root</span></span><br><span class="line"><span class="bash">COPY hello <span class="built_in">test</span> /</span></span><br></pre></td></tr></table></figure><blockquote><p>大部分情况COPY优于，ADD有额外的解压功能，添加远程文件或目录用curl或wget</p></blockquote><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> MYSQL_VERSION <span class="number">5.6</span> <span class="comment">#常量</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y mysql-server= <span class="string">"<span class="variable">$&#123;MYSQL_VERSION&#125;</span>"</span> \</span></span><br><span class="line"><span class="bash">&amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure><h3 id="CMD-amp-ENTRYPOINT"><a href="#CMD-amp-ENTRYPOINT" class="headerlink" title="CMD &amp; ENTRYPOINT"></a>CMD &amp; ENTRYPOINT</h3><p>CMD:设置容器启动后默认执行的命令和参数<br>如果docker run指定了其它的命令，则忽略CMD命令<br>定义多个CMD,只有最后一个会执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run &lt;image&gt;</span><br><span class="line">docker run -it &lt;image&gt; /bin/bash    //此命令会忽略CMD中的命令</span><br></pre></td></tr></table></figure><p>ENTRYPOINT:设置容器启动时运行的命令<br>让容器已应用程序或者服务的方式执行<br>不会被忽略，一定会执行</p><h4 id="SHELL-amp-EXEC"><a href="#SHELL-amp-EXEC" class="headerlink" title="SHELL &amp; EXEC"></a>SHELL &amp; EXEC</h4><p>SHELL:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y vim</span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="string">"hello docker"</span></span></span><br><span class="line"><span class="bash">ENTRYPOINT <span class="built_in">echo</span> <span class="string">"hello docker"</span></span></span><br></pre></td></tr></table></figure><p>EXEC:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"apt-get"</span>, <span class="string">"install"</span>, <span class="string">"y"</span>, <span class="string">"vim"</span>]</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"/bin/echo"</span>, <span class="string">"hello docker"</span>]</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"/bin/echo"</span>, <span class="string">"hello docker"</span>]</span></span><br></pre></td></tr></table></figure><p>EXEC方式需要指明运行环境，eg:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">ENV</span> name word</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"c"</span>, <span class="string">"echo hello <span class="variable">$name</span>"</span>]</span></span><br></pre></td></tr></table></figure><p>更多详见<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">扩展阅读</a></p><h2 id="Dockerfile实战"><a href="#Dockerfile实战" class="headerlink" title="Dockerfile实战"></a>Dockerfile实战</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir flask-hello-word</span><br><span class="line"><span class="built_in">cd</span> flask-hello-word</span><br><span class="line">vim app.py</span><br></pre></td></tr></table></figure><p>app.py内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello docker"</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>编写Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"peng.shiliang&lt;1390509500@qq.com&gt;"</span></span></span><br><span class="line"><span class="bash">RUN pip install flask</span></span><br><span class="line"><span class="bash">COPY app.py /app/       <span class="comment"># app后面必须接/，否则会当作文件</span></span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash">EXPOSE 5000             <span class="comment"># 端口映射,保证远程能够访问</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span></span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t pengshiliang/flask-hello-word .</span><br><span class="line">docker push pengshiliang/flask-hello-word:latest</span><br></pre></td></tr></table></figure></p><p>运行flask-hello-word<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=demo pengshiliang/flask-hello-word     //--name 便于docker container 操作</span><br><span class="line">docker <span class="built_in">exec</span> -it demo ip a       //查看docker容器ip</span><br><span class="line">curl &lt;demo ip&gt;      //输出hello docker</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2019/03/02/2019-03-02-docker/"/>
      <url>/2019/03/02/2019-03-02-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="赋予docker权限"><a href="#赋予docker权限" class="headerlink" title="赋予docker权限"></a>赋予docker权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vagrant@ubuntu-bionic:~$ sudo groupadd docker</span><br><span class="line">groupadd: group <span class="string">'docker'</span> already exists</span><br><span class="line">vagrant@ubuntu-bionic:~$ sudo gpasswd -a vagrant docker</span><br><span class="line">Adding user vagrant to group docker</span><br><span class="line">vagrant@ubuntu-bionic:~$ sudo service docker restart</span><br></pre></td></tr></table></figure><p>退出vagrant在重新进入</p><h2 id="docker基本命令"><a href="#docker基本命令" class="headerlink" title="docker基本命令"></a>docker基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 列举所有镜像</span><br><span class="line">docker image ls</span><br><span class="line">// 查看image build 历史</span><br><span class="line">docker <span class="built_in">history</span> &lt;image id&gt;</span><br><span class="line">// 运行一个image</span><br><span class="line">docker run &lt;image id&gt;</span><br><span class="line">// 列举所有正在运行的容器</span><br><span class="line">docker container ls</span><br><span class="line">// 列举所有的容器</span><br><span class="line">docker container ls -a</span><br><span class="line">// 交互式运行运行（常驻运行）</span><br><span class="line">docker run -it &lt;image&gt;</span><br></pre></td></tr></table></figure><h2 id="docker-image-命令"><a href="#docker-image-命令" class="headerlink" title="docker image 命令"></a>docker image 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images   (docker image ls缩写)</span><br><span class="line">docker rmi &lt;image id&gt;   (docker image rm &lt;image id&gt;缩写)//移除一个镜像</span><br></pre></td></tr></table></figure><h2 id="docker-container命令"><a href="#docker-container命令" class="headerlink" title="docker container命令"></a>docker container命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a    (docker container ls -a缩写)</span><br><span class="line">docker rm &lt;image id&gt;    (docker container rm &lt;image id&gt;缩写)  //删除一个容器</span><br><span class="line">docker ps -aq   //列举所有容器id</span><br><span class="line">docker ps -f <span class="string">"status=exited"</span> -q     //列举所有已退出的容器</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker rm $(docker ps -f <span class="string">"status=exited"</span> -q)</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-02/3.png" alt="avatar"><br><img src="/img/in-post/2019-03-02/4.png" alt="avatar"></p><h2 id="build一个hello-word-image"><a href="#build一个hello-word-image" class="headerlink" title="build一个hello word image"></a>build一个hello word image</h2><h3 id="生成hello-word程序"><a href="#生成hello-word程序" class="headerlink" title="生成hello-word程序"></a>生成hello-word程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello-word</span><br><span class="line"><span class="built_in">cd</span> hello-word</span><br><span class="line">vim hello.c</span><br></pre></td></tr></table></figure><p>hello.c内容<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello word\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">gcc -static hello.c -o hello</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-03-02/1.png" alt="avatar"></p><h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><p>执行<figure class="highlight vim"><figcaption><span>Dockerfile```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```dockerfile</span><br><span class="line">FROM scratch</span><br><span class="line">ADD hello /</span><br><span class="line">CMD [<span class="string">"/hello"</span>]</span><br></pre></td></tr></table></figure></p><h3 id="build命令"><a href="#build命令" class="headerlink" title="build命令"></a>build命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;tag&gt; &lt;dir&gt;</span><br></pre></td></tr></table></figure><p>eg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t pengshiliang/hello-word .</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-03-02/2.png" alt="avatar"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run pengshiliang/hello-word</span><br></pre></td></tr></table></figure><p>出现hello word 即为正常build</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push pengshiliang/hello-word:latest</span><br></pre></td></tr></table></figure><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><ol><li>通过image创建</li><li>在Image layer之上建立一个Cotainer layer</li><li>类面向对象：类和实例</li><li>image复制存储和分发，container负责运行app</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dva快速入门</title>
      <link href="/2019/02/24/2019-02-03-dva-quick-start/"/>
      <url>/2019/02/24/2019-02-03-dva-quick-start/</url>
      
        <content type="html"><![CDATA[<h2 id="安装初始化项目"><a href="#安装初始化项目" class="headerlink" title="安装初始化项目"></a>安装初始化项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g dva-cli</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yarn global add dva-cli</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dva -v</span><br><span class="line">dva-cli version 0.10.0</span><br><span class="line">dva version 2.4.1</span><br><span class="line">roadhog version 2.4.9</span><br><span class="line">@<span class="built_in">local</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dva new dva-quickstart</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><p><img src="/img/in-post/2019-02-23/2.png" align="left" width="100%/"></p><p>src文件夹内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">├── assets</span><br><span class="line">│   └── yay.jpg</span><br><span class="line">├── components</span><br><span class="line">│   └── Example.js</span><br><span class="line">├── index.css</span><br><span class="line">├── index.js</span><br><span class="line">├── models</span><br><span class="line">│   └── example.js</span><br><span class="line">├── router.js</span><br><span class="line">├── routes</span><br><span class="line">│   ├── IndexPage.css</span><br><span class="line">│   └── IndexPage.js</span><br><span class="line">├── services</span><br><span class="line">│   └── example.js</span><br><span class="line">└── utils</span><br><span class="line">    └── request.js</span><br></pre></td></tr></table></figure></p><p>入口文件index.js默认内容<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Initialize</span></span><br><span class="line"><span class="keyword">const</span> app = dva();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Plugins</span></span><br><span class="line"><span class="comment">// app.use(&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Model</span></span><br><span class="line"><span class="comment">// app.model(require('./models/example').default);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Router</span></span><br><span class="line">app.router(<span class="built_in">require</span>(<span class="string">'./router'</span>).default);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Start</span></span><br><span class="line">app.start(<span class="string">'#root'</span>);</span><br></pre></td></tr></table></figure></p><p>路由文件默认内容：<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">import</span> IndexPage <span class="keyword">from</span> <span class="string">'./routes/IndexPage'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RouterConfig</span>(<span class="params">&#123; history &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;IndexPage&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RouterConfig;</span><br></pre></td></tr></table></figure></p><p>执行yarn start 即可看到页面效果<br><img src="/img/in-post/2019-02-23/1.png" alt=""></p><h2 id="计数器项目"><a href="#计数器项目" class="headerlink" title="计数器项目"></a>计数器项目</h2><h3 id="Router切换"><a href="#Router切换" class="headerlink" title="Router切换"></a>Router切换</h3><p><img src="/img/in-post/2019-02-23/3.png" align="left" width="100%/"></p><p>初始化项目的路由默认为HashRouter，路由链接不太友好更换为HashRouter<br>替换index.js文件内容<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory <span class="keyword">as</span> createHistory &#125; <span class="keyword">from</span> <span class="string">'history'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Initialize</span></span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  history: createHistory()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Plugins</span></span><br><span class="line"><span class="comment">// app.use(&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Model</span></span><br><span class="line"><span class="comment">// app.model(require('./models/example').default);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Router</span></span><br><span class="line">app.router(<span class="built_in">require</span>(<span class="string">'./router'</span>).default);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Start</span></span><br><span class="line">app.start(<span class="string">'#root'</span>);</span><br></pre></td></tr></table></figure></p><p>再次访问<a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a>,路由正常显示<br><img src="/img/in-post/2019-02-23/4.png" align="left" width="100%/"></p><h3 id="编写Counter组件"><a href="#编写Counter组件" class="headerlink" title="编写Counter组件"></a>编写Counter组件</h3><p>新建 src/components/Counter.js</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123;count&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;<span class="number">1</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button&gt;+&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">export default Counter</span></span><br></pre></td></tr></table></figure><p>新建 src/routes/CounterPage.js</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'../components/Counter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CounterPage = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;counter&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Counter/</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default CounterPage</span></span><br></pre></td></tr></table></figure><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><p>在src/router.js中配置路由<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CounterPage <span class="keyword">from</span> <span class="string">'./routes/CounterPage'</span>;</span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/counter"</span> exact component=&#123;CounterPage&#125; /&gt;</span><br></pre></td></tr></table></figure></p><p>页面效果<br><img src="/img/in-post/2019-02-23/5.png" alt=""></p><h3 id="定义model"><a href="#定义model" class="headerlink" title="定义model"></a>定义model</h3><p>新建 src/models/counter.js, copy models下面的Example.js内容到counter.js中，然后修改state和namespace内容</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">  namespace: <span class="string">'counter'</span>,</span><br><span class="line"></span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  effects: &#123;</span><br><span class="line">    *fetch(&#123; payload &#125;, &#123; call, put &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'save'</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reducers: &#123;</span><br><span class="line">    save(state, action) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, ...action.payload &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>dva中namespace作用类似于redux项目中combineReducers中的key，用来使各个组件中的state划分更清晰</p></blockquote><p><img src="/img/in-post/2019-02-23/6.png" alt=""></p><p>引入到入口文件index.js文件中<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.model(<span class="built_in">require</span>(<span class="string">'./models/counter'</span>).default);</span><br></pre></td></tr></table></figure></p><h4 id="model中的API介绍"><a href="#model中的API介绍" class="headerlink" title="model中的API介绍:"></a>model中的API介绍:</h4><p>参照<a href="https://dvajs.com/api/#reducers" target="_blank" rel="noopener">Dva API介绍</a>可了解到:</p><h5 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h5><p>model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 . 的方式创建多层命名空间。</p><h5 id="state"><a href="#state" class="headerlink" title="state"></a>state</h5><p>初始值，优先级低于传给 dva() 的 opts.initialState。</p><p>比如：<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  initialState: &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'count'</span>,</span><br><span class="line">  state: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>此时，在 app.start() 后 state.count 为 1 。</p><h5 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h5><p>以 key/value 格式定义 reducer。用于处理同步操作，唯一可以修改 state 的地方。由 action 触发。格式为 (state, action) =&gt; newState 或 [(state, action) =&gt; newState, enhancer]。<br>详见:<a href="https://github.com/dvajs/dva/blob/master/packages/dva-core/test/reducers.test.js" target="_blank" rel="noopener">https://github.com/dvajs/dva/blob/master/packages/dva-core/test/reducers.test.js</a></p><h5 id="effects"><a href="#effects" class="headerlink" title="effects"></a>effects</h5><p>以 key/value 格式定义 effect。用于处理异步操作和业务逻辑，不直接修改 state。由 action 触发，可以触发 action，可以和服务器交互，可以获取全局 state 的数据等等。格式为<em>(action, effects) =&gt; void或[</em>(action, effects) =&gt; void, { type }].<br>type 类型有：</p><ol><li>takeEvery</li><li>takeLatest</li><li>throttle</li><li>watcher</li></ol><p>详见：<a href="https://github.com/dvajs/dva/blob/master/packages/dva-core/test/effects.test.js" target="_blank" rel="noopener">https://github.com/dvajs/dva/blob/master/packages/dva-core/test/effects.test.js</a></p><h5 id="subscriptions"><a href="#subscriptions" class="headerlink" title="subscriptions"></a>subscriptions</h5><p>以 key/value 格式定义 subscription。subscription 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。在 app.start() 时被执行，数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。格式为({ dispatch, history }, done) =&gt; unlistenFunction。</p><blockquote><p>注意：如果要使用 app.unmodel()，subscription 必须返回 unlisten 方法，用于取消数据订阅。</p></blockquote><p>打开redux控制台:<br><img src="/img/in-post/2019-02-23/7.png" alt=""></p><p>可看到state.counter.count</p><blockquote><p>counter对应model的namespace,count对应state对象中的count</p></blockquote><h3 id="connect起来"><a href="#connect起来" class="headerlink" title="connect起来"></a>connect起来</h3><p>修改src/components/Counter.js的内容</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">"dva"</span>;</span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;props.counter.count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button&gt;+&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">const mapStateToProps = (state) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 取出models下的命名空间counter</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    counter: state.counter</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure><blockquote><p>这一步做的主要是把models/counter和当前组件通过mapStateToProps连接然后在无状态Counter组件中通过props来接收</p></blockquote><p>可以看到如果在models中的state定义的对象如果结构很长的话,Counter组件中的props链式对象会写的很长，当然我们可以通过es6中的对象析构来优化代码</p><p>优化后的代码:</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Fragment&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">"dva"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123;count&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button&gt;+&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapStateToProps = (state) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 取出models下的命名空间counter</span></span><br><span class="line"><span class="regexp">  const &#123; count &#125; = state.counter;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    count</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure><p>重新访问<a href="http://localhost:8000/counter" target="_blank" rel="noopener">http://localhost:8000/counter</a>,依然正常显示</p><p><img src="/img/in-post/2019-02-23/8.png" alt=""></p><h4 id="定义propTypes-数据类型检查"><a href="#定义propTypes-数据类型检查" class="headerlink" title="定义propTypes(数据类型检查)"></a>定义propTypes(数据类型检查)</h4><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line">Counter.propTypes = &#123;</span><br><span class="line">  count: PropTypes.number</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>修改Counter组件代码，给button增加一个点击事件<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123;count, dispatch&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: "counter/</span>add<span class="string">"&#125;)&#125;&#125;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/Fragment&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>type中必须以namespace/action 的形式传递，否则在reducer中会捕获不到</p></blockquote><p>按钮点击后会dispatch一个action{type: “counter/add”}到reducer中<br>控制台效果：<br><img src="/img/in-post/2019-02-23/9.png" alt=""></p><h3 id="编写reducers"><a href="#编写reducers" class="headerlink" title="编写reducers"></a>编写reducers</h3><p>修改src/models/counter.js,修改reducers部分代码<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">reducers: &#123;</span><br><span class="line">    add(state, action) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(action);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        count: state.count+<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>修改src/components/Counter.js,增加Dispatch传递的参数<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;<span class="attr">type</span>: <span class="string">"counter/add"</span>, <span class="attr">names</span>: <span class="string">"psl"</span>&#125;)&#125;&#125;&gt;+&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>页面效果：<br><img src="/img/in-post/2019-02-23/10.png" alt=""><br>有时候，当项目非常复杂的时候，为了便于管理reducers中的函数，reducers中的函数也可以这么写</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">reducers: &#123;</span><br><span class="line">    <span class="string">'add'</span>(state, action) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(action);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        count: state.count+<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>增加type层级<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;<span class="attr">type</span>: <span class="string">"counter/add/num"</span>, <span class="attr">names</span>: <span class="string">"psl"</span>&#125;)&#125;&#125;&gt;+&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">reducers: &#123;</span><br><span class="line">    <span class="string">'add/num'</span>(state, action) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(action);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        count: state.count+<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>页面效果：<br><img src="/img/in-post/2019-02-23/11.png" alt=""></p><h3 id="异步动作"><a href="#异步动作" class="headerlink" title="异步动作"></a>异步动作</h3><h4 id="修改effects"><a href="#修改effects" class="headerlink" title="修改effects"></a>修改effects</h4><p>dva中的异步动作要放到effects中来触发,放到effects中可以使用call,put等方法,也就是redux-saga中的一些方法<br>修改src/components/Counter.js,新增加一个button</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;<span class="attr">type</span>: <span class="string">"counter/asyncAdd"</span>&#125;)&#125;&#125;&gt;asyncAdd+&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>修改src/models/counter.js中的effects<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">effects: &#123;</span><br><span class="line">    *asyncAdd(&#123; payload &#125;, &#123; call, put &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'add/num'</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>yield put({ type: ‘add/num’ }) 会触发reducers中的add方法，由于是同命名空间下，所以不用加入namespace层级</p></blockquote><p>查看redux控制台效果<br><img src="/img/in-post/2019-02-23/12.png" alt=""></p><p>effects中asyncAdd方法中的payload可以接收dispatch过来的额外的参数<br>例如:</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;<span class="attr">type</span>: <span class="string">"counter/asyncAdd"</span>, <span class="attr">payload</span>: <span class="string">"payload"</span>&#125;)&#125;&#125;&gt;asyncAdd+&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">effects: &#123;</span><br><span class="line">    *asyncAdd(&#123; payload &#125;, &#123; call, put &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="built_in">console</span>.log(payload);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'add/num'</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>查看redux控制台效果<br><img src="/img/in-post/2019-02-23/13.png" alt=""></p><h4 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h4><p>修改src/models/counter.js中的effects</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;delay&#125; <span class="keyword">from</span> <span class="string">'dva/saga'</span></span><br><span class="line">effects: &#123;</span><br><span class="line">    *asyncAdd(&#123; payload &#125;, &#123; call, put &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="keyword">yield</span> call(delay, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'add/num'</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>select 用于取state中的数据<br>引入select:</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">effects: &#123;</span><br><span class="line">    *asyncAdd(&#123; payload &#125;, &#123; call, put, select &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="keyword">const</span> counter = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.counter);</span><br><span class="line">      <span class="built_in">console</span>.log(counter);</span><br><span class="line">      <span class="keyword">yield</span> call(delay, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'add/num'</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>查看控制台效果<br><img src="/img/in-post/2019-02-23/14.png" alt=""></p><p>几种不同的写法:<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const counter = yield select(state =&gt; state.counter);</span></span><br><span class="line"><span class="comment">// const counter = yield select((&#123;counter&#125;) =&gt; counter);</span></span><br><span class="line"><span class="comment">// const counter = yield select(_ =&gt; _.counter);</span></span><br><span class="line"><span class="keyword">const</span> &#123; counter &#125; = <span class="keyword">yield</span> select(<span class="function"><span class="params">_</span> =&gt;</span> _);</span><br><span class="line"><span class="built_in">console</span>.log(counter);</span><br></pre></td></tr></table></figure></p><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><h4 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h4><p>修改src/components/Counter.js</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Fragment&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">"dva"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'dva/router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123;count, dispatch, history&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; &#123;history.push("/</span><span class="string">")&#125;&#125;&gt;go home&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: "</span>counter/add/num<span class="string">", names: "</span>psl<span class="string">"&#125;)&#125;&#125;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: "</span>counter/asyncAdd<span class="string">", payload: "</span>payload<span class="string">"&#125;)&#125;&#125;&gt;asyncAdd+&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/Fragment&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Counter.propTypes = &#123;</span></span><br><span class="line"><span class="string">  count: PropTypes.number</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const mapStateToProps = (state) =&gt; &#123;</span></span><br><span class="line"><span class="string">  // 取出models下的命名空间counter</span></span><br><span class="line"><span class="string">  const &#123; count &#125; = state.counter;</span></span><br><span class="line"><span class="string">  return &#123;</span></span><br><span class="line"><span class="string">    count</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">export default connect(mapStateToProps)(withRouter(Counter))</span></span><br></pre></td></tr></table></figure><h4 id="在effects中的路由跳转"><a href="#在effects中的路由跳转" class="headerlink" title="在effects中的路由跳转"></a>在effects中的路由跳转</h4><p>修改src/models/counter.js</p><p>引入routerRedux:<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;routerRedux&#125; <span class="keyword">from</span> <span class="string">'dva/router'</span></span><br></pre></td></tr></table></figure></p><p>在effects中增加redirect方法:<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*redirect(&#123; _ &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">  <span class="keyword">yield</span> put(routerRedux.push(<span class="string">"/"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改src/components/Counter.js中的Counter组件</p><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123;count, dispatch, history&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; &#123;history.push("/</span><span class="string">")&#125;&#125;&gt;go home&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: "</span>counter/redirect<span class="string">"&#125;)&#125;&#125;&gt;go home by effects&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: "</span>counter/add/num<span class="string">", names: "</span>psl<span class="string">"&#125;)&#125;&#125;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: "</span>counter/asyncAdd<span class="string">", payload: "</span>payload<span class="string">"&#125;)&#125;&#125;&gt;asyncAdd+&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/Fragment&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><h4 id="带参数的跳转"><a href="#带参数的跳转" class="headerlink" title="带参数的跳转"></a>带参数的跳转</h4><p>修改src/models/counter.js</p><p>引入query-string:<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;queryString&#125; <span class="keyword">from</span> <span class="string">'query-string'</span></span><br></pre></td></tr></table></figure></p><p>修改effects中的redirect<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*redirect(&#123; _ &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">  <span class="comment">// yield put(routerRedux.push("/"));</span></span><br><span class="line">  <span class="keyword">yield</span> put(routerRedux.push(&#123;</span><br><span class="line">    pathname: <span class="string">'/'</span>,</span><br><span class="line">    search: queryString.stringify(&#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">"psl"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>点击按钮后跳转到<a href="http://localhost:8000/?from=psl" target="_blank" rel="noopener">http://localhost:8000/?from=psl</a></p><h3 id="subscriptions-1"><a href="#subscriptions-1" class="headerlink" title="subscriptions"></a>subscriptions</h3><h4 id="dispatch-1"><a href="#dispatch-1" class="headerlink" title="dispatch"></a>dispatch</h4><p>监听窗口改变触发add/num方法:<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="built_in">window</span>.onresize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>: <span class="string">'add/num'</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>setup可以为多个，可以同时订阅多个监听事件</p></blockquote><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setupHistory(&#123; dispatch, history &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">  history.listen(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(location)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>控制台输出：</p><p><img src="/img/in-post/2019-02-23/15.png" alt=""></p><p>可以发现location中包含pathname,search,hash,state等参数，我们可以通过析构对象来做一些特殊事情</p><p>例如：<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setupHistory(&#123; dispatch, history &#125;) &#123;  <span class="comment">// eslint-disable-line</span></span><br><span class="line">  history.listen(<span class="function">(<span class="params">&#123;pathname&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">"/counter"</span>) &#123;</span><br><span class="line">      dispatch(&#123;<span class="attr">type</span>: <span class="string">'add/num'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
            <tag> Dva </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql锁</title>
      <link href="/2019/02/24/2019-02-24-mysql(1)/"/>
      <url>/2019/02/24/2019-02-24-mysql(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><h3 id="事物隔离场景"><a href="#事物隔离场景" class="headerlink" title="事物隔离场景"></a>事物隔离场景</h3><p>repeatable-read</p><h3 id="表语句准备"><a href="#表语句准备" class="headerlink" title="表语句准备"></a>表语句准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`d`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`c`</span> (<span class="string">`c`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>),(<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>),(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>),(<span class="number">25</span>,<span class="number">25</span>,<span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>先假设一个没有堵塞的场景：</p><table><thead><tr><th></th><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>select * from t where d=5 for update;<br><font color="red">result:(5,5,5)</font></td><td></td><td></td></tr><tr><td>T2</td><td></td><td>update t set d=5 where id=0;</td><td></td></tr><tr><td>T3</td><td>select * from t where d=5 for update;<br><font color="red">result:(0,0,5)(5,5,5)</font></td><td></td><td></td></tr><tr><td>T4</td><td></td><td></td><td>insert into t values(1,1,5);</td></tr><tr><td>T5</td><td>select * from t where d=5 for update;<br><font color="red">result:(0,0,5)(1,1,5)(5,5,5)</font></td><td></td><td></td></tr><tr><td>T6</td><td>commit;</td><td></td><td></td></tr></tbody></table><p>可以看到，session A 里执行了三次查询，分别是 Q1、Q2 和 Q3。它们的 SQL 语句相同，都是 select * from t where d=5 for update。查所有 d=5 的行，而且使用的是当前读，并且加上写锁。现在，我们来看一下这三条 SQL 语句，分别会返回什么结果。</p><ol><li>Q1 只返回 id=5 这一行；</li><li>在 T2 时刻，session B 把 id=0 这一行的 d 值改成了 5，因此 T3 时刻 Q2 查出来的是 id=0 和 id=5 这两行；</li><li>在 T4 时刻，session C 又插入一行（1,1,5），因此 T5 时刻 Q3 查出来的是 id=0、id=1 和 id=5 的这三行。</li></ol><p>其中，Q3 读到 id=1 这一行的现象，被称为“幻读”。也就是说，幻读指的是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行。</p><h2 id="Mysql如何解决幻读"><a href="#Mysql如何解决幻读" class="headerlink" title="Mysql如何解决幻读"></a>Mysql如何解决幻读</h2><h3 id="本片需要用到的两种锁"><a href="#本片需要用到的两种锁" class="headerlink" title="本片需要用到的两种锁"></a>本片需要用到的两种锁</h3><p>LOCK IN SHARE MODE是读锁(只是不让别人写)，FOR UPDATE是写锁(还不让别人加读锁)</p><h3 id="InnoDB行锁"><a href="#InnoDB行锁" class="headerlink" title="InnoDB行锁"></a>InnoDB行锁</h3><p>InnoDB行锁是通过索引上的索引项来实现的，InnoDB这种行锁实现特点意味者：只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！<br>如<code>select * from t where d=5 for update;</code>会锁住d=5索引覆盖范围的相关行，如果没有索引则会锁住所有行</p><h3 id="间隙锁-Gap-Lock"><a href="#间隙锁-Gap-Lock" class="headerlink" title="间隙锁 (Gap Lock)"></a>间隙锁 (Gap Lock)</h3><p>行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。<br>间隙锁，锁的就是两个值之间的空隙。比如文章开头的表 t，初始化插入了 6 个记录，这就产生了 7 个间隙。<br>这样，当你执行 select * from t where d=5 for update 的时候，就不止是给数据库中已有的 6 个记录加上了行锁，还同时加了 7 个间隙锁。这样就确保了无法再插入新的记录。</p><h3 id="行锁和间隙锁比较"><a href="#行锁和间隙锁比较" class="headerlink" title="行锁和间隙锁比较"></a>行锁和间隙锁比较</h3><p>行锁，分成读锁和写锁。下图就是这两种类型行锁的冲突关系。</p><table><thead><tr><th></th><th>读锁</th><th>写锁</th></tr></thead><tbody><tr><td>读锁</td><td><font color="green">兼容</font></td><td><font color="red">冲突</font></td></tr><tr><td>写锁</td><td><font color="red">冲突</font></td><td><font color="red">冲突</font></td></tr></tbody></table><p>也就是说，跟行锁有冲突关系的是“另外一个行锁”。<br>但是间隙锁不一样，<strong>跟间隙锁存在冲突关系的，是“往这个间隙中插入一个记录”这个操作。</strong>间隙锁之间都不存在冲突关系。</p><table><thead><tr><th>SessionA</th><th>SessionB</th></tr></thead><tbody><tr><td>begin;<br>select * from t where c=7 lock in share mode;</td><td></td></tr><tr><td></td><td>begin;<br>select * from t where c=7 for update;</td></tr></tbody></table><p>这里 session B 并不会被堵住。因为表 t 里并没有 c=7 这个记录，因此 session A 加的是间隙锁 (5,10)。而 session B 也是在这个间隙加的间隙锁。它们有共同的目标，即：保护这个间隙，不允许插入值。但，它们之间是不冲突的。</p><p>间隙锁和行锁合称 next-key lock，每个 next-key lock 是前开后闭区间。也就是说，我们的表 t 初始化以后，如果用 select * from t for update 要把整个表所有记录锁起来，就形成了 7 个 next-key lock，分别是 (-∞,0]、(0,5]、(5,10]、(10,15]、(15,20]、(20, 25]、(25, +supremum]。</p><p><strong>间隙锁和 next-key lock 的引入，帮我们解决了幻读的问题，但同时也带来了一些“困扰”。</strong></p><p>看下面的实例</p><table><thead><tr><th>SessionA</th><th>SessionB</th></tr></thead><tbody><tr><td>begin;<br>select * from t where id=9 for update;</td><td></td></tr><tr><td></td><td>begin;<br>select * from t where id=9 for update;</td></tr><tr><td></td><td>insert into t values(9,9,9);<br><font color="red">result:(blocked)</font></td></tr><tr><td>insert into t values(9,9,9);<br><font color="red">result:(Deadlock)</font></td><td></td></tr></tbody></table><p>上面的场景形成死锁了。我们按语句执行顺序来分析一下：</p><ol><li>session A 执行 select … for update 语句，由于 id=9 这一行并不存在，因此会加上间隙锁 (5,10);</li><li>session B 执行 select … for update 语句，同样会加上间隙锁 (5,10)，间隙锁之间不会冲突，因此这个语句可以执行成功；</li><li>session B 试图插入一行 (9,9,9)，被 session A 的间隙锁挡住了，只好进入等待；</li><li>session A 试图插入一行 (9,9,9)，被 session B 的间隙锁挡住了。</li></ol><p>至此，两个 session 进入互相等待状态，形成死锁。当然，InnoDB 的死锁检测马上就发现了这对死锁关系，让 session A 的 insert 语句报错返回了。</p><h2 id="mysql锁类型"><a href="#mysql锁类型" class="headerlink" title="mysql锁类型"></a>mysql锁类型</h2><p>锁规则里面，包含了两个“原则”、两个“优化”和一个“bug”。</p><blockquote><p>MySQL 后面的版本可能会改变加锁策略，所以这个规则只限于截止到现在的最新版本，即 5.x 系列 &lt;=5.7.24，8.0 系列 &lt;=8.0.13。</p></blockquote><p>原则 1：加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。<br>原则 2：查找过程中访问到的对象才会加锁。<br>优化 1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。<br>优化 2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。<br>一个特殊场景：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</p><h3 id="等值查询间隙锁"><a href="#等值查询间隙锁" class="headerlink" title="等值查询间隙锁"></a>等值查询间隙锁</h3><table><thead><tr><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr></thead><tbody><tr><td>begin;<br>update t set d=d+1 where id=7;</td><td></td><td></td></tr><tr><td></td><td>insert into t values(8,8,8); <br><font color="red">result:(blocked)</font></td><td></td></tr><tr><td></td><td></td><td>update t set d=d+1 where id=10;<br><font color="green">result:(ok)</font></td></tr></tbody></table><p>由于表 t 中没有 id=7 的记录，所以用我们上面提到的加锁规则判断一下的话：</p><ol><li>根据原则 1，加锁单位是 next-key lock，session A 加锁范围就是 (5,10]；</li><li>同时根据优化 2，这是一个等值查询 (id=7)，而 id=10 不满足查询条件，next-key lock 退化成间隙锁，因此最终加锁的范围是 (5,10)。</li></ol><p>所以，session B 要往这个间隙里面插入 id=8 的记录会被锁住，但是 session C 修改 id=10 这行是可以的。</p><h3 id="非唯一索引等值锁"><a href="#非唯一索引等值锁" class="headerlink" title="非唯一索引等值锁"></a>非唯一索引等值锁</h3><table><thead><tr><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr></thead><tbody><tr><td>begin;<br>select id from t where c=5 lock in share mode(读锁);</td><td></td><td></td></tr><tr><td></td><td>update t set d=d+1 where id=5; <br><font color="green">result:(ok)</font></td><td></td></tr><tr><td></td><td></td><td>insert into t values(7,7,7);<br><font color="red">result:(blocked)</font></td></tr></tbody></table><p>看到这个例子，你是不是有一种“该锁的不锁，不该锁的乱锁”的感觉？我们来分析一下吧。</p><ol><li>根据原则 1，加锁单位是 next-key lock，因此会给 (0,5] 加上 next-key lock。</li><li>要注意 c 是普通索引，因此仅访问 c=5 这一条记录是不能马上停下来的，需要向右遍历，查到 c=10 才放弃。根据原则 2，访问到的都要加锁，因此要给 (5,10] 加 next-key lock。</li><li>但是同时这个符合优化 2：等值判断，向右遍历，最后一个值不满足 c=5 这个等值条件，因此退化成间隙锁 (5,10)。</li><li>根据原则 2 ，<strong>只有访问到的对象才会加锁</strong>，这个查询使用覆盖索引，并不需要访问主键索引，所以主键索引上没有加任何锁，这就是为什么 session B 的 update 语句可以执行完成。</li></ol><p>但 session C 要插入一个 (7,7,7) 的记录，就会被 session A 的间隙锁 (5,10) 锁住。</p><blockquote><p>需要注意，在这个例子中，lock in share mode 只锁覆盖索引，但是如果是 for update 就不一样了。 执行 for update 时，系统会认为你接下来要更新数据，因此会顺便给主键索引上满足条件的行加上行锁。</p></blockquote><p>这个例子说明，锁是加在索引上的；同时，它给我们的指导是，如果你要用 lock in share mode 来给行加读锁避免数据被更新的话，就必须得绕过覆盖索引的优化，在查询字段中加入索引中不存在的字段。比如，将 session A 的查询语句改成 select d from t where c=5 lock in share mode。</p><h3 id="主键索引范围锁"><a href="#主键索引范围锁" class="headerlink" title="主键索引范围锁"></a>主键索引范围锁</h3><table><thead><tr><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr></thead><tbody><tr><td>begin;<br>select * from t where id &gt;=10 and id&lt;11 for update;</td><td></td><td></td></tr><tr><td></td><td>insert into t values(7,7,7); <br><font color="green">result:(ok)</font><br>insert into t values(13,13,13);<br><font color="red">result:(blocked)</font></td><td></td></tr><tr><td></td><td></td><td>update t set d=d+1 where id=15;<br><font color="red">result:(blocked)</font> </td></tr></tbody></table><ol><li>开始执行的时候，要找到第一个 id=10 的行，因此本该是 next-key lock(5,10]。 根据优化 1， 主键 id 上的等值条件，退化成行锁，只加了 id=10 这一行的行锁。</li><li>范围查找就往后继续找，找到 id=15 这一行停下来，因此需要加 next-key lock(10,15]。</li></ol><p>所以，session A 这时候锁的范围就是主键索引上，行锁 id=10 和 next-key lock(10,15]。</p><h3 id="非唯一索引范围锁"><a href="#非唯一索引范围锁" class="headerlink" title="非唯一索引范围锁"></a>非唯一索引范围锁</h3><table><thead><tr><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr></thead><tbody><tr><td>begin;<br>select * from t where c&gt;10 and c&lt;11 for update;</td><td></td><td></td></tr><tr><td></td><td>insert into t values(8,8,8); <br><font color="red">result:(blocked)</font></td><td></td></tr><tr><td></td><td></td><td>update t set d=d+1 where id=15;<br><font color="red">result:(blocked)</font></td></tr></tbody></table><p>这次 session A 用字段 c 来判断，加锁规则跟主键索引范围锁唯一的不同是：在第一次用 c=10 定位记录的时候，索引 c 上加了 (5,10] 这个 next-key lock 后，由于索引 c 是非唯一索引，没有优化规则，也就是说不会蜕变为行锁，因此最终 sesion A 加的锁是，索引 c 上的 (5,10] 和 (10,15] 这两个 next-key lock。</p><h3 id="唯一索引范围锁特殊场景"><a href="#唯一索引范围锁特殊场景" class="headerlink" title="唯一索引范围锁特殊场景"></a>唯一索引范围锁特殊场景</h3><table><thead><tr><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr></thead><tbody><tr><td>begin;<br>select * from t where id &gt;10 and id&lt;=15 for update;</td><td></td><td></td></tr><tr><td></td><td>update t set d=d+1 where id=20; <br><font color="green">result:(blocked)</font></td><td></td></tr><tr><td></td><td></td><td>insert into t values(16,16,16);<br><font color="red">result:(blocked)</font> </td></tr></tbody></table><p>session A 是一个范围查询，按照原则 1 的话，应该是索引 id 上只加 (10,15] 这个 next-key lock，并且因为 id 是唯一键，所以循环判断到 id=15 这一行就应该停止了。<br>但是实现上，InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id=20。而且由于这是个范围扫描，因此索引 id 上的 (15,20] 这个 next-key lock也会被锁上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis cluster 故障转移</title>
      <link href="/2019/01/25/2019-01-25-redis-cluster-out/"/>
      <url>/2019/01/25/2019-01-25-redis-cluster-out/</url>
      
        <content type="html"><![CDATA[<h2 id="故障发现"><a href="#故障发现" class="headerlink" title="故障发现"></a>故障发现</h2><p>通过ping/pong消息实现故障发现，不依赖sentinel</p><h2 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h2><p>定义：某个节点认为另外一个节点不可用“偏见”</p><p>主观下线流程：<br><img src="/img/in-post/2019-01-25/1.png" alt=""></p><h2 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h2><p>定义：当半数以上持有槽的主节点都标记某节点主观下线</p><p>客观下线流程：<br><img src="/img/in-post/2019-01-25/2.png" alt=""></p><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><h3 id="资格检查"><a href="#资格检查" class="headerlink" title="资格检查"></a>资格检查</h3><ul><li>每个从节点检查与故障节点的断线时间</li><li>超过cluster-node-timeout*cluster-slave-validity-factor取消资格</li><li>cluster-slave-validity-factor：默认为10<h3 id="准备选举时间"><a href="#准备选举时间" class="headerlink" title="准备选举时间"></a>准备选举时间</h3><img src="/img/in-post/2019-01-25/3.png" alt=""><h3 id="选举投票"><a href="#选举投票" class="headerlink" title="选举投票"></a>选举投票</h3><img src="/img/in-post/2019-01-25/4.png" alt=""><h3 id="替换主节点"><a href="#替换主节点" class="headerlink" title="替换主节点"></a>替换主节点</h3></li><li>当前从节点复制变为主节点。(slaveof no one)</li><li>执行clusterDelSlot撤销故障主节点负责的槽，并执行clusterAddSlot<br>把这些槽分配给自己</li><li>向群广播自己的pong消息，表明已替换了故障从节点</li></ul><h2 id="redis-cluster-开发常见问题"><a href="#redis-cluster-开发常见问题" class="headerlink" title="redis cluster 开发常见问题"></a>redis cluster 开发常见问题</h2><h3 id="集群完整性"><a href="#集群完整性" class="headerlink" title="集群完整性"></a>集群完整性</h3><p><code>cluster-require-full-coverage</code>默认为yes<br>问题：</p><ul><li>集群中16384个槽全部可用，保证完整性</li><li>节点故障转移或正在转移<br>大多数业务无法容忍，建议设置为no<blockquote><p>当其中一台机器发生故障，此时集群状态不可用，不可以set ket,不建议设置为yes</p></blockquote><h3 id="宽带消耗"><a href="#宽带消耗" class="headerlink" title="宽带消耗"></a>宽带消耗</h3>官方建议：1000个节点</li><li>消息频率 节点发现和节点最后通信时间超过cluster-node-timeout/2时会发送ping消息</li><li>消息数据量 slots数据组(2k)和整个集群1/10的状态数据(10个节点状态数据约1k)</li><li>节点部署机器规模 分布机器越多且每台机器划分的节点越均匀，整体的可用带宽越高<br>例子：200个节点，20个物理机器（每台10个节点）</li></ul><p>cluster-node-timeout=15000 ping/pong带宽约25MB</p><p>cluster-node-timeout=20000 ping/pong带低于15MB</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>避免多业务使用多集群，大业务可以多集群</li><li>cluster-node-timeout 带宽和故障转移速度的均衡</li><li>尽量均匀分配多个机器，保证带宽</li></ul><h3 id="PUB-SUB广播"><a href="#PUB-SUB广播" class="headerlink" title="PUB/SUB广播"></a>PUB/SUB广播</h3><p>问题：publish在集群每个节点广播：加重带宽<br>解决：单独走一套redis sentinel</p><h3 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h3><p><strong>数据倾斜：内存不均匀</strong></p><p><strong>节点和槽分配不均匀</strong></p><p><strong>不同槽对应键值数差异大</strong></p><ul><li>可能存在has_tag</li><li>cluster countkeysinslot {slot}获取槽对应键值个数</li></ul><p><strong>包含bigkey</strong></p><ul><li>例如大字符串，几百万元素的hash,set等</li><li>从节点，redis-cli –bigkeys</li><li>优化数据结构，拆分key</li></ul><p><strong>内存相关配置不一致</strong></p><ul><li>hash-max-ziplist-value, set-max-intset-entries等</li></ul><p><strong>请求倾斜：key热点</strong>重要的key或者bigkey<br>优化：</p><ul><li>避免big_key</li><li>热键不要使用hash_tag（避免落在一个节点）</li><li>当一致性不高时可以使用本地缓存+MQ</li></ul><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>只读连接：集群模式的从节点不接受任何读写请求</p><ul><li>重定向到负责槽的主节点</li><li>readonly命令可以读：连接级的命令<br>读写分离：更加复杂</li><li>复制延迟，从节点故障，读取过期数据</li><li>修改客户端：cluster slaves {nodeid}</li></ul><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>官方工具：redis-trib.rb import</p><ul><li>只能从单机迁移到集群</li><li>不支持在线迁移，source需要停写</li><li>不支持断点续传</li><li>单线程迁移，影响速度<br>在线迁移：</li></ul><p>唯品会：redis-migrate-tool</p><p>豌豆荚：redis-port</p><h3 id="集群VS单机"><a href="#集群VS单机" class="headerlink" title="集群VS单机"></a>集群VS单机</h3><p>集群限制<br></p><ul><li>key批量操作限制</li><li>key事物和lua支持有限，操作的key必须在同一个节点</li><li>key是数据分区的最小粒度：不支持bigkey分区</li><li>不支持多个数据库：集群模式下只有一个db0</li><li>复制只支持一层，不支持树形</li></ul><ol><li>Redis Cluster: 满足容量和性能的扩展性：很多业务不需要</li><li>很多场景Redis Sentinel足够好</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis cluster 客户端路由</title>
      <link href="/2019/01/24/2019-01-24-redis-cluster-route/"/>
      <url>/2019/01/24/2019-01-24-redis-cluster-route/</url>
      
        <content type="html"><![CDATA[<h2 id="MOVED重定向"><a href="#MOVED重定向" class="headerlink" title="MOVED重定向"></a>MOVED重定向</h2><p><img src="/img/in-post/2019-01-24/1.png" alt=""></p><h3 id="槽命中：直接返回"><a href="#槽命中：直接返回" class="headerlink" title="槽命中：直接返回"></a>槽命中：直接返回</h3><p><img src="/img/in-post/2019-01-24/2.png" alt=""></p><p>算出key的slot值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;127.0.0.1&gt; 6379 cluster keyslot hello</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(integer) 866</span><br></pre></td></tr></table></figure></p><h3 id="槽不命中：moved异常"><a href="#槽不命中：moved异常" class="headerlink" title="槽不命中：moved异常"></a>槽不命中：moved异常</h3><p>算出key的slot值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;127.0.0.1&gt; 6379 cluster keyslot php</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(integer) 9244</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-01-24/3.png" alt=""></p><p>看一个小例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -p 7000    //集群模式</span><br><span class="line">127.0.0.1:7000&gt; cluster keyslot hello</span><br><span class="line">(integer) 866</span><br><span class="line">127.0.0.1:7000&gt; set hello word</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7000&gt; cluster keyslot php</span><br><span class="line">(integer) 9244</span><br><span class="line">127.0.0.1:7000&gt; set php best</span><br><span class="line">-&gt; Redirected to slot [9244] located at 127.0.0.1:7001</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; get php</span><br><span class="line">&quot;best&quot;</span><br><span class="line">127.0.0.1:7001&gt; </span><br><span class="line">redis-cli -p 7000</span><br><span class="line">127.0.0.1:7000&gt; cluster keyslot php</span><br><span class="line">(integer) 9244</span><br><span class="line">127.0.0.1:7000&gt; set php best</span><br><span class="line">(error) MOVED 9244 127.0.0.1:7001</span><br><span class="line">127.0.0.1:7000&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-01-24/4.png" alt=""></p><h2 id="ASK重定向"><a href="#ASK重定向" class="headerlink" title="ASK重定向"></a>ASK重定向</h2><p><img src="/img/in-post/2019-01-24/5.png" alt=""></p><p>在集群缩容扩容的时候，要对槽进行迁移，槽迁移过程中要遍历进行migrate,迁移时间比较长，<br>此时在此过程中访问一个key,但是key已经迁移到目标节点，就需要一个新的方案来解决这个问题，redis cluster 对这个问题已经有解决方案</p><p>我们来看它的一个实现演示：<br><img src="/img/in-post/2019-01-24/6.png" alt=""></p><h2 id="moved-amp-ask"><a href="#moved-amp-ask" class="headerlink" title="moved &amp; ask"></a>moved &amp; ask</h2><ul><li>两者都是客户端重定向</li><li>moved:槽已确定迁移</li><li>ask:槽还在迁移中</li></ul><h2 id="smart客户端"><a href="#smart客户端" class="headerlink" title="smart客户端"></a>smart客户端</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>追求性能：</p><ol><li>从集群中选一个可运行的节点，使用cluster slots 初始化槽和节点映射</li><li>将cluster slots结果映射到本地，为每个节点创建redisPool</li><li>执行命令</li></ol><p>基本流程：<br><img src="/img/in-post/2019-01-24/7.png" alt=""></p><blockquote><p>关于redis cluster 客户端使用可参考<br><a href="https://github.com/enpsl/redis-go-cluster/tree/master/example" target="_blank" rel="noopener">redis-go-cluster</a></p></blockquote><h3 id="批量操作优化"><a href="#批量操作优化" class="headerlink" title="批量操作优化"></a>批量操作优化</h3><p><strong>批量操作怎么实现?meget meset必须在一个槽</strong></p><h4 id="串行mget"><a href="#串行mget" class="headerlink" title="串行mget"></a>串行mget</h4><p><img src="/img/in-post/2019-01-24/8.png" alt=""></p><h4 id="串行IO"><a href="#串行IO" class="headerlink" title="串行IO"></a>串行IO</h4><p><img src="/img/in-post/2019-01-24/9.png" alt=""></p><h4 id="并行IO"><a href="#并行IO" class="headerlink" title="并行IO"></a>并行IO</h4><p><img src="/img/in-post/2019-01-24/10.png" alt=""></p><h4 id="hash-tag"><a href="#hash-tag" class="headerlink" title="hash_tag"></a>hash_tag</h4><p><img src="/img/in-post/2019-01-24/11.png" alt=""></p><h3 id="四种方案优缺点对比"><a href="#四种方案优缺点对比" class="headerlink" title="四种方案优缺点对比"></a>四种方案优缺点对比</h3><table><tr><td>方案</td><td>优点</td><td>缺点</td><td>网络IO</td></tr><tr><td>串行mget</td><td>编程简单，少量keys满足需求</td><td>大量keys请求延迟严重</td><td>O(keys)</td></tr><tr><td>串行IO</td><td>编程简单，少量节点满足需求</td><td>大量node延迟严重</td><td>O(nodes)</td></tr><tr><td>并行IO</td><td>利用并行特性，延迟取决于最慢的节点</td><td>编程复杂，超市定位问题难</td><td>O(max(node))</td></tr><tr><td>hash_tag</td><td>性能最高</td><td>读写增加tag维护成本，tag分布易出现数据倾斜</td><td>O(1))</td></tr></table>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis cluster 伸缩</title>
      <link href="/2019/01/23/2019-01-23-redis-cluster-operator/"/>
      <url>/2019/01/23/2019-01-23-redis-cluster-operator/</url>
      
        <content type="html"><![CDATA[<h2 id="集群伸缩原理"><a href="#集群伸缩原理" class="headerlink" title="集群伸缩原理"></a>集群伸缩原理</h2><p><img src="/img/in-post/2019-01-23/1.png" alt=""><br><img src="/img/in-post/2019-01-23/2.png" alt=""></p><center style="font-weight:bold">集群伸缩=槽和数据在节点之间的移动</center><h2 id="扩容集群"><a href="#扩容集群" class="headerlink" title="扩容集群"></a>扩容集群</h2><h3 id="准备新节点"><a href="#准备新节点" class="headerlink" title="准备新节点"></a>准备新节点</h3><p>新节点：</p><ul><li>集群模式</li><li>配置和其它节点统一</li><li>启动后仍是孤儿节点</li></ul><p><img src="/img/in-post/2019-01-23/3.png" alt=""></p><h3 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cluster meet 127.0.0.1 6385</span><br><span class="line">cluster meet 127.0.0.1 6386</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-01-23/4.png" alt=""></p><center style="font-weight:bold">加入后的效果</center><p>加入集群的作用：</p><ul><li>为它迁移槽和数据实现扩容</li><li>作为从节点负责故障转移</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node new_host:new_port existing_host:existing_port --cluster-slave --cluster-master-id &lt;arg&gt;</span><br></pre></td></tr></table></figure><blockquote><p>建议使用redis-trib.rb能够避免新节点已经加入了其它集群，造成故障</p></blockquote><h3 id="迁移槽和数据"><a href="#迁移槽和数据" class="headerlink" title="迁移槽和数据"></a>迁移槽和数据</h3><h4 id="槽迁移计划"><a href="#槽迁移计划" class="headerlink" title="槽迁移计划:"></a>槽迁移计划:</h4><p><img src="/img/in-post/2019-01-23/6.png" alt=""><br><img src="/img/in-post/2019-01-23/7.png" alt=""></p><h4 id="迁移数据："><a href="#迁移数据：" class="headerlink" title="迁移数据："></a>迁移数据：</h4><ol><li>对目标节点发送: cluster setslot{slot} importing {sourceNodeId}命令，让目标节点准备导入槽的数据。</li><li>对源节点发送: cluster setslot{slot} migrating {targetNodeId}命令，让源节点准备迁出槽的数据。</li><li>源节点循环执行: cluster getkeysinslot{slot}{count}命令，每次获取count个属于槽的键。</li><li>在源节点执行: migrate {targetIP}{targetPort} key 0 {timeout}命令把指定key迁移。</li><li>重复执行3-4直到槽下所有数据节点均迁移到目标节点。</li><li>向集群内所有主节点发送cluster setslot{slot} node {targetNodeId}命令，通知槽分配给目标节点。</li></ol><h4 id="数据迁移伪python代码"><a href="#数据迁移伪python代码" class="headerlink" title="数据迁移伪python代码:"></a>数据迁移伪python代码:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_slot</span><span class="params">(source,target,slot)</span>:</span></span><br><span class="line">    <span class="comment">#目标节点准备导入槽slot</span></span><br><span class="line">    target.cluster(<span class="string">"setslot"</span>,slot,<span class="string">"importing"</span>,source.nodeID)</span><br><span class="line">    <span class="comment">#目标节点准备全出槽slot</span></span><br><span class="line">    target.cluster(<span class="string">"setslot"</span>,slot,<span class="string">"migrating"</span>,source.nodeID) </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#批量从源节点获取键</span></span><br><span class="line">        keys = source.cluster(<span class="string">"getkeysinslot"</span>,slot,pipeline_size)</span><br><span class="line">        <span class="keyword">if</span> keys.length ==<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#键列表为空时，退出循环</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#批量迁移键到目标节点</span></span><br><span class="line">    source.call(<span class="string">"migrate"</span>,target.host,target.port,<span class="string">""</span>,timeout,<span class="string">"keys"</span>)</span><br><span class="line">    <span class="comment">#向集群所有主节点通知槽slot被分配给目标节点</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        <span class="keyword">if</span> node.flag ==<span class="string">"slave"</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        node.cluster(<span class="string">"setslot"</span>,slot,<span class="string">"node"</span>,target.nodeID)</span><br></pre></td></tr></table></figure><h4 id="pipline迁移"><a href="#pipline迁移" class="headerlink" title="pipline迁移"></a>pipline迁移</h4><p><img src="/img/in-post/2019-01-23/8.png" alt=""></p><blockquote><p>3.0.6 版本pipline数据迁移会有丢失数据bug，在3.2.8已解决</p></blockquote><h2 id="扩容演示"><a href="#扩容演示" class="headerlink" title="扩容演示"></a>扩容演示</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><img src="/img/in-post/2019-01-23/9.png" alt=""><br>当前集群是三主三从结构，此时我们加入两个新节点7006,7007。7007是7006的从节点，我们需要从7001,7002节点把一部分数据迁移给7006。<br>配置准备:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/7000/7006/g'</span> redis-7000.conf &gt; redis-7006.conf</span><br><span class="line">sed <span class="string">'s/7000/7007/g'</span> redis-7000.conf &gt; redis-7007.conf</span><br></pre></td></tr></table></figure></p><h3 id="meet"><a href="#meet" class="headerlink" title="meet:"></a>meet:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7000 cluster meet 127.0.0.1 7006</span><br><span class="line">redis-cli -p 7000 cluster meet 127.0.0.1 7007</span><br></pre></td></tr></table></figure><h3 id="replicate"><a href="#replicate" class="headerlink" title="replicate:"></a>replicate:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7007 cluster replicate d57d27051ce9db7752f894394b621368f9e0a058</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-01-23/10.png" alt=""></p><blockquote><p>此时7007已经属于7006的从节点</p></blockquote><h3 id="迁移数据：-1"><a href="#迁移数据：-1" class="headerlink" title="迁移数据："></a>迁移数据：</h3><blockquote><p>由于槽数量比较多，所以这里使用redis-trib来迁移<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1 7000</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="/img/in-post/2019-01-23/11.png" alt=""><br>此时给我们提示出了当前集群的信息，由于我们现在是4个主节点，所以需要分成四等份来支持向master写入数据<br><img src="/img/in-post/2019-01-23/12.png" alt=""><br><img src="/img/in-post/2019-01-23/13.png" alt=""></p><p>槽迁移后的信息：<br><img src="/img/in-post/2019-01-23/14.png" alt=""></p><h2 id="收缩集群"><a href="#收缩集群" class="headerlink" title="收缩集群"></a>收缩集群</h2><h3 id="下线迁移槽"><a href="#下线迁移槽" class="headerlink" title="下线迁移槽"></a>下线迁移槽</h3><p><img src="/img/in-post/2019-01-23/15.png" alt=""></p><h3 id="忘记节点"><a href="#忘记节点" class="headerlink" title="忘记节点"></a>忘记节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli&gt;cluster forget &#123;downNodeId&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-01-23/16.png" alt=""></p><h3 id="关闭节点"><a href="#关闭节点" class="headerlink" title="关闭节点"></a>关闭节点</h3><h2 id="收缩集群演示"><a href="#收缩集群演示" class="headerlink" title="收缩集群演示"></a>收缩集群演示</h2><p>例：下线7006，7007</p><h3 id="迁移槽："><a href="#迁移槽：" class="headerlink" title="迁移槽："></a>迁移槽：</h3><p>迁移过程命令：</p><p>redis-cli –cluster reshard –cluster-from {7006nodeid} –cluster-to 7000{7000nodeid} –cluster-slots {slot num} 127.0.0.1:7006</p><p>redis-cli –cluster reshard –cluster-from {7006nodeid} –cluster-to 7001{7001nodeid} –cluster-slots {slot num} 127.0.0.1:7006</p><p>redis-cli –cluster reshard –cluster-from {7006nodeid} –cluster-to 7002{7002nodeid} –cluster-slots {slot num} 127.0.0.1:7006</p><p>迁移到7000示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard --cluster-from d57d27051ce9db7752f894394b621368f9e0a058 --cluster-to 092fd7c3cf19693eddec5c0fae9894d681023ce5 --cluster-slots 1365 127.0.0.1:7006</span><br></pre></td></tr></table></figure></p><p>之后选择yes即可</p><p><img src="/img/in-post/2019-01-23/17.png" alt=""><br>可观察出0-1364的槽节点以迁移完毕，重复上述步骤，迁移剩余的槽</p><p>迁移后：<br><img src="/img/in-post/2019-01-23/18.png" alt=""></p><h3 id="忘记节点："><a href="#忘记节点：" class="headerlink" title="忘记节点："></a>忘记节点：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster del-node 127.0.0.1:7000 d57d27051ce9db7752f894394b621368f9e0a058</span><br></pre></td></tr></table></figure><blockquote><p>需要先下线从节点在下线主节点，否则会发生故障转移</p></blockquote><h3 id="完成缩容"><a href="#完成缩容" class="headerlink" title="完成缩容"></a>完成缩容</h3><p><img src="/img/in-post/2019-01-23/19.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis cluster</title>
      <link href="/2019/01/20/2019-01-20-redis-cluster/"/>
      <url>/2019/01/20/2019-01-20-redis-cluster/</url>
      
        <content type="html"><![CDATA[<h2 id="呼唤集群"><a href="#呼唤集群" class="headerlink" title="呼唤集群"></a>呼唤集群</h2><p>当系统应用需要有更大容量和QPS的支撑，此时就需要采用的集群的方式，也可以简单理解为加机器</p><p>数据分区:</p><p><img src="/img/in-post/2019-01-20/1.jpg" alt=""></p><h2 id="分布方式"><a href="#分布方式" class="headerlink" title="分布方式"></a>分布方式</h2><h3 id="顺序分布"><a href="#顺序分布" class="headerlink" title="顺序分布"></a>顺序分布</h3><p><img src="/img/in-post/2019-01-20/2.png" alt=""></p><h3 id="哈希分布"><a href="#哈希分布" class="headerlink" title="哈希分布"></a>哈希分布</h3><p><img src="/img/in-post/2019-01-20/3.png" alt=""></p><ul><li>节点取余</li><li>一致性hash</li><li>虚拟槽分区</li></ul><h4 id="节点取余"><a href="#节点取余" class="headerlink" title="节点取余"></a>节点取余</h4><p><img src="/img/in-post/2019-01-20/3.png" alt=""></p><ul><li>客户端分片: 哈希+取余 </li><li>节点伸缩: 数据节点关系变化，导致数据迁移</li><li>迁移数量和添加节点数量相关：建议翻倍扩容</li></ul><h4 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a>一致性hash</h4><p><img src="/img/in-post/2019-01-20/5.png" alt=""></p><p>一致性hash扩容</p><p><img src="/img/in-post/2019-01-20/4.png" alt=""></p><ul><li>客户端分片：哈希+顺时针（优化取余）</li><li>节点伸缩：只影响临近节点，但是还是有数据迁移</li><li>翻倍伸缩：保证最小迁移数据和负载均衡</li></ul><h4 id="虚拟槽分布"><a href="#虚拟槽分布" class="headerlink" title="虚拟槽分布"></a>虚拟槽分布</h4><p><img src="/img/in-post/2019-01-20/2.jpg" alt=""></p><ul><li>预设虚拟槽：每个槽映射一个数据子集，一般比节点数大</li><li>良好的hash函数：如crc16</li><li>服务端管理节点，槽，数据：例如redis cluster</li></ul><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><table><tr><th>分布方式</th><th>特点</th><th>典型产品</th></tr><tr><td>哈希分布</td><td>数据分散度高<br>key,value分布业务无关<br>无法顺序访问<br>支持批量操作</td><td>一致性hash memcache<br>redis cluster<br>其它缓存产品</td></tr><tr><td>顺序分布</td><td>数据分散度易倾斜<br>key,value业务相关<br>可顺序访问<br>支持批量操作</td><td>BigTable<br>HBase<br></td></tr></table></p><h2 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><ul><li>节点</li><li>meet</li><li>指派槽</li><li>复制</li></ul><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><ul><li>复制</li><li>分片</li><li>高可用</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="原生安装"><a href="#原生安装" class="headerlink" title="原生安装"></a>原生安装</h4><p>1: 配置开启节点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port&#123;$port&#125;</span><br><span class="line">daemonize yes</span><br><span class="line">dir &quot;$&#123;redis-src&#125;/data/&quot;</span><br><span class="line">dbfilename &quot;dump-&#123;$port&#125;.rdb&quot;</span><br><span class="line">logfile &quot;&#123;$port&#125;.log&quot;</span><br><span class="line">cluster-enabled &quot;yes</span><br><span class="line">cluster-config-file nodes-&#123;$port&#125;.conf</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-01-20/6.png" alt=""></p><p>批量生成配置文件:</p><p><img src="/img/in-post/2019-01-20/7.png" alt=""></p><p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis-7000.conf</span><br><span class="line">redis-server redis-7001.conf</span><br><span class="line">redis-server redis-7002.conf</span><br><span class="line">redis-server redis-7003.conf</span><br><span class="line">redis-server redis-7004.conf</span><br><span class="line">redis-server redis-7005.conf</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-01-20/8.png" alt=""></p><p>2: meet</p><p><strong>cluster meet ip port</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 7000 cluster meet 127.0.0.1 7001</span><br><span class="line">redis-cli -h 127.0.0.1 -p 7000 cluster meet 127.0.0.1 7002</span><br><span class="line">redis-cli -h 127.0.0.1 -p 7000 cluster meet 127.0.0.1 7003</span><br><span class="line">redis-cli -h 127.0.0.1 -p 7000 cluster meet 127.0.0.1 7004</span><br><span class="line">redis-cli -h 127.0.0.1 -p 7000 cluster meet 127.0.0.1 7005</span><br></pre></td></tr></table></figure><p>先进行7000和7001的握手</p><p><img src="/img/in-post/2019-01-20/9.png" alt=""></p><p>发现7000和7001已经完成握手，继续meet其他的节点</p><p><img src="/img/in-post/2019-01-20/10.png" alt=""></p><p>此时执行<figure class="highlight plain"><figcaption><span>nodes```和```cluster info```均发现6个节点相互关联，证明已经握手成功</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3: 指派槽</span><br><span class="line"></span><br><span class="line">**cluster addslots slot [slot...]**</span><br><span class="line"></span><br><span class="line">由于一共要分配16384个槽，所以需要借助脚本去分配槽</span><br><span class="line">```bash</span><br><span class="line">start=$1</span><br><span class="line">end=$2</span><br><span class="line">port=$3</span><br><span class="line">for slot in `seq $&#123;start&#125; $&#123;end&#125;`</span><br><span class="line">do</span><br><span class="line">    echo &quot;slot:$&#123;slot&#125;&quot;</span><br><span class="line">    redis-cli -p $&#123;port&#125; cluster addslots $&#123;slot&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>我们要配置的是三主三从，所以要把16384三等分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0-5461 7000 5462-10922 7001 10923-16383 7002</span><br></pre></td></tr></table></figure></p><p>执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh addslots.sh 0 5461 7000</span><br><span class="line">sh addslots.sh 5462 10922 7001</span><br><span class="line">sh addslots.sh 10923 16383 7002</span><br></pre></td></tr></table></figure></p><p>查看槽分配状态</p><p><img src="/img/in-post/2019-01-20/11.png" alt=""><br><img src="/img/in-post/2019-01-20/12.png" alt=""></p><blockquote><p>此时发现16384个槽确实已经分配完毕，槽分配完毕</p></blockquote><p>4: 主从</p><p>cluster replicate node-id</p><p>给7003分配到master7000主节点上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7003 cluster replicate 6d4942b15eb5e02bb6193453443ccb827c13c6df</span><br><span class="line">redis-cli -p 7004 cluster replicate 916f84dee5fbef724ddf2f90fddf51fd654113f1</span><br><span class="line">redis-cli -p 7005 cluster replicate fee14c1f872fc4c7d451f84a616cf735d220538b</span><br></pre></td></tr></table></figure></p><p>主从分配结果：<br><img src="/img/in-post/2019-01-20/13.png" alt=""><br><img src="/img/in-post/2019-01-20/14.png" alt=""></p><h4 id="官方工具"><a href="#官方工具" class="headerlink" title="官方工具"></a>官方工具</h4><p>由于原生安装过程比较麻烦，又容易出错，所以正常的生产环境使用官方工具安装，但是掌握原生安装的方式更容易让我们理解集群分配的原理</p><p><strong>ruby环境准备</strong></p><ol><li>下载编译安装ruby</li><li>安装rubygem redis</li><li>安装redis-trib.rb</li></ol><p><img src="/img/in-post/2019-01-20/15.png" alt=""></p><p>1: 配置开启节点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port&#123;$port&#125;</span><br><span class="line">daemonize yes</span><br><span class="line">dir &quot;$&#123;redis-src&#125;/data/&quot;</span><br><span class="line">dbfilename &quot;dump-&#123;$port&#125;.rdb&quot;</span><br><span class="line">logfile &quot;&#123;$port&#125;.log&quot;</span><br><span class="line">cluster-enabled &quot;yes</span><br><span class="line">cluster-config-file nodes-&#123;$port&#125;.conf</span><br></pre></td></tr></table></figure><p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis-7000.conf</span><br><span class="line">redis-server redis-7001.conf</span><br><span class="line">redis-server redis-7002.conf</span><br><span class="line">redis-server redis-7003.conf</span><br><span class="line">redis-server redis-7004.conf</span><br><span class="line">redis-server redis-7005.conf</span><br></pre></td></tr></table></figure></p><p>2: 集群创建</p><p><img src="/img/in-post/2019-01-20/16.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//1 表示1个主节点分配1个从节点</span><br><span class="line">redis-cli --cluster create --cluster-replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-01-20/17.png" alt=""></p><p>上图分别展示了槽分配，主从和节点信息，符合预期执行yes即可</p><p>分配成功信息：</p><p><img src="/img/in-post/2019-01-20/18.png" alt=""></p><p>集群验证：</p><p><img src="/img/in-post/2019-01-20/19.png" alt=""></p><blockquote><p>当然如果维护上百台集群显然也不是最好的方式，可以借助或构建云平台来管理集群</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis哨兵</title>
      <link href="/2019/01/19/2018-01-11-redis-sentinel/"/>
      <url>/2019/01/19/2018-01-11-redis-sentinel/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-Sentinel基本架构"><a href="#Redis-Sentinel基本架构" class="headerlink" title="Redis Sentinel基本架构"></a>Redis Sentinel基本架构</h2><ol><li>多个sentinel发现并确认master有问题</li><li>选举出一个sentinel作为领导</li><li>选出一个salve作为master</li><li>通知其余slave成为新的master的slave</li><li>通知客户端主从变化</li><li>等待master复活成为新的master的slave</li></ol><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><ol><li>配置开启主从节点</li><li>配置开启sentinel监控master节点</li></ol><p>Redis主节点<br>启动<figure class="highlight plain"><figcaption><span>redis-7000.conf```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### redis配置:</span><br><span class="line">主节点:</span><br></pre></td></tr></table></figure></p><p>port 7000<br>daemonize yes<br>pidfile /var/run/redis/7000.pid<br>logfile 7000.log<br>dir “${redis-src}/data/“<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从节点:</span><br></pre></td></tr></table></figure></p><p>port 7001<br>daemonize yes<br>pidfile /var/run/redis/7001.pid<br>logfile 7001.log<br>dir “${redis-src}/data/“<br>slaveof 127.0.0.1 7000<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">port 7002</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis/7002.pid</span><br><span class="line">logfile 7002.log</span><br><span class="line">dir &quot;$&#123;redis-src&#125;/data/&quot;</span><br><span class="line">slaveof 127.0.0.1 7000</span><br></pre></td></tr></table></figure></p><h3 id="sentinel配置"><a href="#sentinel配置" class="headerlink" title="sentinel配置:"></a>sentinel配置:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port $&#123;port&#125;</span><br><span class="line">dir &quot;$&#123;redis-src&#125;/data/&quot;</span><br><span class="line">logfile $&#123;port&#125;.log</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 7000 2 #监控主节点的名字 2对应当两个sentinel发现主节点有问题就发生故障转移</span><br><span class="line">sentinel down-after-millisenconds mymaster 30000 #ping30秒后不通认为有问题</span><br><span class="line">sentinel parallel-sync mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure><h3 id="安装演示"><a href="#安装演示" class="headerlink" title="安装演示"></a>安装演示</h3><p><strong>配置redis</strong></p><blockquote><p>单机演示实际为能相互ping通的多台机器</p></blockquote><p>1：创建master节点配置</p><p><img src="/img/in-post/2019-01-19/1.png" alt=""></p><p>2：创建7000,7001节点配置</p><p><img src="/img/in-post/2019-01-19/2.png" alt=""><br><img src="/img/in-post/2019-01-19/3.png" alt=""></p><p>3：查看主从状态</p><p><img src="/img/in-post/2019-01-19/4.png" alt=""></p><blockquote><p>到此为止主从的配置搭建完毕了</p></blockquote><p><strong>配置sentinel</strong></p><p>通过官方提供的配置模板导入sentinel配置</p><p><img src="/img/in-post/2019-01-19/5.png" alt=""><br>配置信息：</p><p><img src="/img/in-post/2019-01-19/6.png" alt=""></p><p>查看Sentinel监控状态：</p><p><img src="/img/in-post/2019-01-19/7.png" alt=""></p><p>到此我们可以发现Sentinel已经检测到了matser节点的主从信息，由于我们只启动一个Sentinel所以Sentinel发现的数目为1</p><p>再去看看redis-sentinel-26379.conf的变化:</p><p><img src="/img/in-post/2019-01-19/8.png" alt=""></p><blockquote><p>发现他已经把7000的两个slave节点的信息配置自动写入到了配置文件中</p></blockquote><p>生成另外两个Sentinel配置</p><p><img src="/img/in-post/2019-01-19/9.png" alt=""></p><p>查看sentinel状态</p><p><img src="/img/in-post/2019-01-19/10.png" alt=""></p><blockquote><p>发现26380的Sentinel并没有发现其他节点</p></blockquote><p>查看原因：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/redis/26379.log</span><br><span class="line">cat /var/log/redis/26380.log</span><br><span class="line">cat /var/log/redis/26381.log</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-01-19/11.png" alt=""><br><img src="/img/in-post/2019-01-19/12.png" alt=""></p><p>我们发现三个节点的pid都是一样的，所以需要配置pid<br>编辑26379,26380,26381.conf 去掉配置文件自动生成的myid,并加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidfile &quot;/var/run/redis/redis-sentinel-26379.pid&quot;</span><br><span class="line">pidfile &quot;/var/run/redis/redis-sentinel-26380.pid&quot;</span><br><span class="line">pidfile &quot;/var/run/redis/redis-sentinel-26381.pid&quot;</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-01-19/13.png" alt=""></p><p>状态已正常</p><h2 id="go客户端"><a href="#go客户端" class="headerlink" title="go客户端"></a>go客户端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gomodule/redigo/redis"</span></span><br><span class="line"><span class="string">"github.com/letsfire/redigo"</span></span><br><span class="line"><span class="string">"github.com/letsfire/redigo/mode"</span></span><br><span class="line"><span class="string">"github.com/letsfire/redigo/mode/sentinel"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">i <span class="keyword">int</span></span><br><span class="line">sentinelMode mode.IMode</span><br><span class="line">)</span><br><span class="line">sentinelMode = sentinel.New(</span><br><span class="line">sentinel.Addrs([]<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:26379"</span>, <span class="string">"127.0.0.1:26380"</span>, <span class="string">"127.0.0.1:26381"</span>&#125;),</span><br><span class="line">sentinel.PoolOpts(</span><br><span class="line">mode.MaxActive(<span class="number">20</span>),       <span class="comment">// 最大连接数，默认0无限制</span></span><br><span class="line">mode.MaxIdle(<span class="number">0</span>),         <span class="comment">// 最多保持空闲连接数，默认2*runtime.GOMAXPROCS(0)</span></span><br><span class="line">mode.Wait(<span class="literal">false</span>),        <span class="comment">// 连接耗尽时是否等待，默认false</span></span><br><span class="line">mode.IdleTimeout(<span class="number">0</span>),     <span class="comment">// 空闲连接超时时间，默认0不超时</span></span><br><span class="line">mode.MaxConnLifetime(<span class="number">0</span>), <span class="comment">// 连接的生命周期，默认0不失效</span></span><br><span class="line">mode.TestOnBorrow(<span class="literal">nil</span>),  <span class="comment">// 空间连接取出后检测是否健康，默认nil</span></span><br><span class="line">),</span><br><span class="line">sentinel.DialOpts(</span><br><span class="line">redis.DialReadTimeout(time.Second),    <span class="comment">// 读取超时，默认time.Second</span></span><br><span class="line">redis.DialWriteTimeout(time.Second),   <span class="comment">// 写入超时，默认time.Second</span></span><br><span class="line">redis.DialConnectTimeout(time.Second), <span class="comment">// 连接超时，默认500*time.Millisecond</span></span><br><span class="line">redis.DialPassword(<span class="string">""</span>),                <span class="comment">// 鉴权密码，默认空</span></span><br><span class="line">redis.DialDatabase(<span class="number">0</span>),                 <span class="comment">// 数据库号，默认0</span></span><br><span class="line">redis.DialKeepAlive(time.Minute*<span class="number">5</span>),    <span class="comment">// 默认5*time.Minute</span></span><br><span class="line">redis.DialNetDial(<span class="literal">nil</span>),                <span class="comment">// 自定义dial，默认nil</span></span><br><span class="line">redis.DialUseTLS(<span class="literal">false</span>),               <span class="comment">// 是否用TLS，默认false</span></span><br><span class="line">redis.DialTLSSkipVerify(<span class="literal">false</span>),        <span class="comment">// 服务器证书校验，默认false</span></span><br><span class="line">redis.DialTLSConfig(<span class="literal">nil</span>),              <span class="comment">// 默认nil，详见tls.Config</span></span><br><span class="line">),</span><br><span class="line"><span class="comment">// 连接哨兵配置，用法于sentinel.DialOpts()一致</span></span><br><span class="line"><span class="comment">// 默认未配置的情况则直接使用sentinel.DialOpts()的配置</span></span><br><span class="line"><span class="comment">// sentinel.SentinelDialOpts()</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = redigo.New(sentinelMode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line">res, err := instance.String(<span class="function"><span class="keyword">func</span><span class="params">(c redis.Conn)</span> <span class="params">(res <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Do(<span class="string">"set"</span>, <span class="string">"test"</span> + strconv.Itoa(i), i)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以下命令，并模拟7000端口宕机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run client.go</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-01-19/16.png" alt=""></p><p>执行结果：</p><p><img src="/img/in-post/2019-01-19/14.png" alt=""><br><img src="/img/in-post/2019-01-19/15.png" alt=""></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>查看7001.log</p><p><img src="/img/in-post/2019-01-19/17.png" alt=""></p><p>从日志中发现选举7002为master,执行<code>redis-cli -p 7002 info replication</code>验证下</p><p><img src="/img/in-post/2019-01-19/18.png" alt=""></p><p>看看sentinel日志的变化</p><p><img src="/img/in-post/2019-01-19/19.png" alt=""></p><h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h2><h3 id="三个定时任务"><a href="#三个定时任务" class="headerlink" title="三个定时任务"></a>三个定时任务</h3><ol><li>每10秒每个sentinel对master和slave执行info</li></ol><ul><li>发现slave节点</li><li>确定主从关系</li></ul><ol start="2"><li>每2秒每个sentinel通过master节点的channel节点交换信息(pub/sub)</li></ol><ul><li>通过<strong>sentinel</strong>和:hello频道交互</li><li>交互对节点的看法和自身的信息</li></ul><ol start="3"><li>每1秒每个Sentinel对其它Sentinel和Redis执行ping</li></ol><ul><li>失败判定依据，心跳检测</li></ul><h3 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h3><ul><li>主观下线：每个sentinel节点对Redis节点失败的偏见</li><li>客观下线：所有sentinel节点对Redis节点失败达成共识（quorum:建议节点数/2+1）</li></ul><h3 id="领导者选举"><a href="#领导者选举" class="headerlink" title="领导者选举"></a>领导者选举</h3><ul><li>原因：只有一个sentinel节点完成故障转移</li><li>选举：通过sentinel is-master-down-by-addr命令都希望成为领导者</li></ul><ol><li>每个主观下线的Sentinel节点向其他Sentinel节点发送命令，要求它设置为领导者</li><li>收到命令的Sentinel节点如果没有同意通过其他Sentinel节点发送的命令，那么该同意将被拒绝</li><li>如果该Sentinel节点发现通过的票数已经超过Sentinel集合半数且超过quorum，那么它将成为领导者</li><li>如果此过程中有多个Sentinel节点成为领导者，那么将等待一段时间重新选举</li></ol><h3 id="故障转移-1"><a href="#故障转移-1" class="headerlink" title="故障转移"></a>故障转移</h3><ol><li>从slave节点选出一个”合适的”节点作为新的master节点</li><li>对上面的slave节点执行<code>slaveof no one</code> 命令让其成为master节点</li><li>向剩余的slave节点发送命令，让他们成为新master节点的slave节点，复制规则和parallel-syncs参数有关</li><li>更新原来的master节点并配置为slave,并保持对其”关注”，当其恢复后，命令他去复制新的master节点</li></ol><h3 id="选择”合适的”slave节点"><a href="#选择”合适的”slave节点" class="headerlink" title="选择”合适的”slave节点"></a>选择”合适的”slave节点</h3><ol><li>选择slave-priority(slave节点优先级)最高的slave节点。如果存在则返回，不存在则继续</li><li>选择复制偏移量最大的slave节点(复制的最完整)如果存在则返回，不存在则继续</li><li>选择runid最小的slave节点</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang etcd api</title>
      <link href="/2019/01/05/2019-01-05-golang-etcd/"/>
      <url>/2019/01/05/2019-01-05-golang-etcd/</url>
      
        <content type="html"><![CDATA[<h2 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h2><p>ETCD是用于共享配置和服务发现的分布式，一致性的KV存储系统。ETCD是CoreOS公司发起的一个开源项目，授权协议为Apache。</p><p>核心特性：</p><ul><li>将数据存储在集群中的高可用kv存储</li><li>允许应用实时监控kv变化</li><li>能够容忍单点故障，能够应对网络分区</li></ul><p>复杂特性：</p><ul><li>底层存储是按照key有序排列的，可以顺序遍历</li><li>因为key有序，所以etcd天然支持按目录结果高效遍历</li><li>支持复杂事物，提供if…then…else的事物能力</li><li>基于租约机制实现key的TTL过期</li></ul><h2 id="客户端连接实例"><a href="#客户端连接实例" class="headerlink" title="客户端连接实例"></a>客户端连接实例</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">        config clientv3.Config</span><br><span class="line">        client *clientv3.Client</span><br><span class="line">        err error</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line">config = clientv3.Config&#123;</span><br><span class="line">    Endpoints: []<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:2379"</span>&#125;, <span class="comment">// 集群列表</span></span><br><span class="line">    DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> client, err = clientv3.New(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Printf(<span class="string">"clientv3.New error:"</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="api介绍"><a href="#api介绍" class="headerlink" title="api介绍"></a>api介绍</h2><p><strong>kv操作</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> KV <span class="keyword">interface</span> &#123;</span><br><span class="line">    Put(ctx context.Context, key, val <span class="keyword">string</span>, opts ...OpOption) (*PutResponse, error)</span><br><span class="line"></span><br><span class="line">    Get(ctx context.Context, key <span class="keyword">string</span>, opts ...OpOption) (*GetResponse, error)</span><br><span class="line"></span><br><span class="line">    Delete(ctx context.Context, key <span class="keyword">string</span>, opts ...OpOption) (*DeleteResponse, error)</span><br><span class="line"></span><br><span class="line">    Compact(ctx context.Context, rev <span class="keyword">int64</span>, opts ...CompactOption) (*CompactResponse, error)</span><br><span class="line">    Do(ctx context.Context, op Op) (OpResponse, error)</span><br><span class="line"></span><br><span class="line">    Txn(ctx context.Context) Txn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于租约</strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Lease <span class="keyword">interface</span> &#123;</span><br><span class="line"></span><br><span class="line">    Grant(ctx context.Context, ttl <span class="keyword">int64</span>) (*LeaseGrantResponse, error)</span><br><span class="line"></span><br><span class="line">    Revoke(ctx context.Context, id LeaseID) (*LeaseRevokeResponse, error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    TimeToLive(ctx context.Context, id LeaseID, opts ...LeaseOption) (*LeaseTimeToLiveResponse, error)</span><br><span class="line"></span><br><span class="line">    KeepAlive(ctx context.Context, id LeaseID) (&lt;-<span class="keyword">chan</span> *LeaseKeepAliveResponse, error)</span><br><span class="line"></span><br><span class="line">    KeepAliveOnce(ctx context.Context, id LeaseID) (*LeaseKeepAliveResponse, error)</span><br><span class="line"></span><br><span class="line">    Close() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建、更新key"><a href="#创建、更新key" class="headerlink" title="创建、更新key"></a>创建、更新key</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span>(</span><br><span class="line">       kv clientv3.KV</span><br><span class="line">       putResp *clientv3.PutResponse</span><br><span class="line">   ) </span><br><span class="line">   kv = clientv3.NewKV(client)</span><br><span class="line"><span class="keyword">if</span> putResp, err = kv.Put(context.TODO(), <span class="string">"/cron/jobs/job1"</span>,</span><br><span class="line"><span class="string">"bye"</span>, clientv3.WithPrevKV()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"kv.Put error:"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Revision:"</span>, putResp.Header.Revision)</span><br><span class="line"><span class="keyword">if</span> putResp.PrevKv != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"value:"</span>, <span class="keyword">string</span>(putResp.PrevKv.Value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><tr><th>SessionA</th></tr><tr><td>执行创建key脚本</td></tr><tr><td>再次执行创建key脚本</td></tr></table><blockquote><p>clientv3.WithPrevKV()作用是可以获取put之前key的值；<br>操作示例第一次创建<code>hello</code>的key,第二次创建<code>bye</code>的key</p></blockquote><p>输出结果：</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/2.png" alt=""></p><h3 id="删除key"><a href="#删除key" class="headerlink" title="删除key"></a>删除key</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    kv clientv3.KV</span><br><span class="line">    delResp *clientv3.DeleteResponse</span><br><span class="line">    kvPair *mvccpb.KeyValue</span><br><span class="line">) </span><br><span class="line"><span class="keyword">if</span> delResp, err = kv.Delete(context.TODO(), <span class="string">"/cron/jobs/job1"</span>, clientv3.WithPrevKV()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"kv.delete error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被删除之前的value是什么</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(delResp.PrevKvs) != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, kvPair = <span class="keyword">range</span> delResp.PrevKvs &#123;</span><br><span class="line">        fmt.Println(<span class="string">"删除了"</span>, <span class="keyword">string</span>(kvPair.Key), <span class="keyword">string</span>(kvPair.Value))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/7.png" alt=""></p><h3 id="查询key"><a href="#查询key" class="headerlink" title="查询key"></a>查询key</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span>(</span><br><span class="line">       kv clientv3.KV</span><br><span class="line">       getResp *clientv3.GetResponse</span><br><span class="line">   ) </span><br><span class="line">   <span class="keyword">if</span> getResp, err = kv.Get(context.TODO(), <span class="string">"/cron/jobs/job1"</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"kv.Put error:"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//fmt.Println(getResp.Kvs, getResp.Count)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> getResp, err = kv.Get(context.TODO(), <span class="string">"/cron/jobs/job1"</span>, clientv3.WithCountOnly()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"kv.Put error:"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(getResp.Kvs, getResp.Count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/5.png" alt=""></p><p>加入clientv3.WithCountOnly()输出结果</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/6.png" alt=""></p><blockquote><p>clientv3.WithCountOnly() 只输出count值</p></blockquote><h3 id="watch-key"><a href="#watch-key" class="headerlink" title="watch key"></a>watch key</h3><p>简单demo：</p><blockquote><p>主要工作是开一个新的协程去模拟kv的删除更新操作,用main协程去监听key的put,delete操作，并在5秒后取消监听</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">config clientv3.Config</span><br><span class="line">client *clientv3.Client</span><br><span class="line">err error</span><br><span class="line">kv clientv3.KV</span><br><span class="line">watcher clientv3.Watcher</span><br><span class="line">getResp *clientv3.GetResponse</span><br><span class="line">watchStartRevision <span class="keyword">int64</span></span><br><span class="line">watchRespChan &lt;-<span class="keyword">chan</span> clientv3.WatchResponse</span><br><span class="line">watchResp clientv3.WatchResponse</span><br><span class="line">event *clientv3.Event</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端配置</span></span><br><span class="line">config = clientv3.Config&#123;</span><br><span class="line">Endpoints: []<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:2379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接</span></span><br><span class="line"><span class="keyword">if</span> client, err = clientv3.New(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KV</span></span><br><span class="line">kv = clientv3.NewKV(client)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟etcd中KV的变化</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">kv.Put(context.TODO(), <span class="string">"/cron/jobs/job3"</span>, <span class="string">"i am job3"</span>)</span><br><span class="line"></span><br><span class="line">kv.Delete(context.TODO(), <span class="string">"/cron/jobs/job3"</span>)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先GET到当前的值，并监听后续变化</span></span><br><span class="line"><span class="keyword">if</span> getResp, err = kv.Get(context.TODO(), <span class="string">"/cron/jobs/job3"</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在key是存在的</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(getResp.Kvs) != <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"当前值:"</span>, <span class="keyword">string</span>(getResp.Kvs[<span class="number">0</span>].Value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前etcd集群事务ID, 单调递增的</span></span><br><span class="line">watchStartRevision = getResp.Header.Revision + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个watcher</span></span><br><span class="line">watcher = clientv3.NewWatcher(client)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动监听</span></span><br><span class="line">fmt.Println(<span class="string">"从该版本向后监听:"</span>, watchStartRevision)</span><br><span class="line"></span><br><span class="line">ctx, cancelFunc := context.WithCancel(context.TODO())</span><br><span class="line">time.AfterFunc(<span class="number">5</span> * time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">cancelFunc()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watchRespChan = watcher.Watch(ctx, <span class="string">"/cron/jobs/job3"</span>, clientv3.WithRev(watchStartRevision))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理kv变化事件</span></span><br><span class="line"><span class="keyword">for</span> watchResp = <span class="keyword">range</span> watchRespChan &#123;</span><br><span class="line"><span class="keyword">for</span> _, event = <span class="keyword">range</span> watchResp.Events &#123;</span><br><span class="line"><span class="keyword">switch</span> event.Type &#123;</span><br><span class="line"><span class="keyword">case</span> mvccpb.PUT:</span><br><span class="line">fmt.Println(<span class="string">"修改为:"</span>, <span class="keyword">string</span>(event.Kv.Value), <span class="string">"Revision:"</span>, event.Kv.CreateRevision, event.Kv.ModRevision)</span><br><span class="line"><span class="keyword">case</span> mvccpb.DELETE:</span><br><span class="line">fmt.Println(<span class="string">"删除了"</span>, <span class="string">"Revision:"</span>, event.Kv.ModRevision)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果:</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/10.png" alt=""></p><h3 id="申请租约"><a href="#申请租约" class="headerlink" title="申请租约"></a>申请租约</h3><p>简单demo：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">config clientv3.Config</span><br><span class="line">client *clientv3.Client</span><br><span class="line">err error</span><br><span class="line">lease clientv3.Lease</span><br><span class="line">leaseResp *clientv3.LeaseGrantResponse</span><br><span class="line">leaseId clientv3.LeaseID</span><br><span class="line">kv clientv3.KV</span><br><span class="line">putResp *clientv3.PutResponse</span><br><span class="line">getResp *clientv3.GetResponse</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">config = clientv3.Config&#123;</span><br><span class="line">Endpoints: []<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:2379"</span>&#125;, <span class="comment">// 集群列表</span></span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> client, err = clientv3.New(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"clientv3.New error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请一个4秒生周期的租约</span></span><br><span class="line">lease = clientv3.NewLease(client)</span><br><span class="line"><span class="keyword">if</span> leaseResp, err = lease.Grant(context.TODO(), <span class="number">4</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"lease.Grant error:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拿到租约id</span></span><br><span class="line">leaseId = leaseResp.ID</span><br><span class="line"></span><br><span class="line"><span class="comment">//put一个key</span></span><br><span class="line">kv = clientv3.NewKV(client)</span><br><span class="line"><span class="keyword">if</span> putResp, err = kv.Put(context.TODO(), <span class="string">"/cron/jobs/job2"</span>,</span><br><span class="line"><span class="string">"bye"</span>, clientv3.WithLease(leaseId)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"kv.Put error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"写入成功："</span>, putResp.Header.Revision)</span><br><span class="line"><span class="comment">//循环检测租约是否过期</span></span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line"><span class="keyword">if</span> getResp, err = kv.Get(context.TODO(), <span class="string">"/cron/jobs/job2"</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"kv.Put error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> getResp.Count == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"kv过期了"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"还未过期："</span>, getResp.Kvs)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果:</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/8.png" alt=""></p><h3 id="租约续约"><a href="#租约续约" class="headerlink" title="租约续约"></a>租约续约</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">       keepRespChan &lt;-<span class="keyword">chan</span> *clientv3.LeaseKeepAliveResponse</span><br><span class="line">       keepResp *clientv3.LeaseKeepAliveResponse</span><br><span class="line">   )</span><br><span class="line">   <span class="comment">//租约续租</span></span><br><span class="line"><span class="keyword">if</span> keepRespChan, err = lease.KeepAlive(context.TODO(), leaseId); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费keepRespChan</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> keepResp = &lt;-keepRespChan:</span><br><span class="line"><span class="keyword">if</span> keepRespChan == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"租约已经失效了"</span>)</span><br><span class="line"><span class="keyword">goto</span> END</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 每秒会续租一次, 所以就会受到一次应答</span></span><br><span class="line">fmt.Println(<span class="string">"收到自动续租应答:"</span>, keepResp.ID)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>打印结果:</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/9.png" alt=""></p><h3 id="op操作"><a href="#op操作" class="headerlink" title="op操作"></a>op操作</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">config clientv3.Config</span><br><span class="line">client *clientv3.Client</span><br><span class="line">err error</span><br><span class="line">kv clientv3.KV</span><br><span class="line">op clientv3.Op</span><br><span class="line">opResp clientv3.OpResponse</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端配置</span></span><br><span class="line">config = clientv3.Config&#123;</span><br><span class="line">Endpoints: []<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:2379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接</span></span><br><span class="line"><span class="keyword">if</span> client, err = clientv3.New(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KV</span></span><br><span class="line">kv = clientv3.NewKV(client)</span><br><span class="line"></span><br><span class="line">op = clientv3.OpPut(<span class="string">"/cron/jobs/job4"</span>, <span class="string">"opPut"</span>)</span><br><span class="line"><span class="keyword">if</span> opResp, err = kv.Do(context.TODO(), op); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"clientv3.OpPut error:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"写入Revision："</span>, opResp.Put().Header.Revision)</span><br><span class="line"></span><br><span class="line">op = clientv3.OpGet(<span class="string">"/cron/jobs/job4"</span>)</span><br><span class="line"><span class="keyword">if</span> opResp, err = kv.Do(context.TODO(), op); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"clientv3.OpGet error:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"读取Revision："</span>, opResp.Get().Kvs[<span class="number">0</span>].ModRevision)</span><br><span class="line">fmt.Println(<span class="string">"读取Value："</span>, <span class="keyword">string</span>(opResp.Get().Kvs[<span class="number">0</span>].Value))</span><br></pre></td></tr></table></figure><p>打印结果:</p><p><img src="https://enpsl.github.io/img/in-post/2019-01-05/11.png" alt=""></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><strong>上锁</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   lease = clientv3.NewLease(client)</span><br><span class="line"><span class="comment">//申请一个5秒生周期的租约</span></span><br><span class="line"><span class="keyword">if</span> leaseResp, err = lease.Grant(context.TODO(), <span class="number">5</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"lease.Grant error:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拿到租约id</span></span><br><span class="line">leaseId = leaseResp.ID</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备一个用于取消自动续租的context</span></span><br><span class="line">ctx, cancelFunc = context.WithCancel(context.TODO())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5秒后会取消自动续租</span></span><br><span class="line"><span class="keyword">if</span> keepRespChan, err = lease.KeepAlive(ctx, leaseId); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抢锁</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 创建事务</span></span><br><span class="line">txn = kv.Txn(context.TODO())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果key不存在</span></span><br><span class="line">txn.If(clientv3.Compare(clientv3.CreateRevision(<span class="string">"/cron/lock/job5"</span>), <span class="string">"="</span>, <span class="number">0</span>)).</span><br><span class="line">Then(clientv3.OpPut(<span class="string">"/cron/lock/job5"</span>, <span class="string">"xxx"</span>, clientv3.WithLease(leaseId))).</span><br><span class="line">Else(clientv3.OpGet(<span class="string">"/cron/lock/job5"</span>)) <span class="comment">// 否则抢锁失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line"><span class="keyword">if</span> txnResp, err = txn.Commit(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 没有问题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否抢到了锁</span></span><br><span class="line"><span class="keyword">if</span> !txnResp.Succeeded &#123;</span><br><span class="line">fmt.Println(<span class="string">"锁被占用:"</span>, <span class="keyword">string</span>(txnResp.Responses[<span class="number">0</span>].GetResponseRange().Kvs[<span class="number">0</span>].Value))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>处理业务</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"处理任务"</span>)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br></pre></td></tr></table></figure><p><strong>释放锁</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// defer 会把租约释放掉, 关联的KV就被删除了</span></span><br><span class="line"><span class="comment">// 确保函数退出后, 自动续租会停止</span></span><br><span class="line"><span class="keyword">defer</span> cancelFunc()</span><br><span class="line"><span class="keyword">defer</span> lease.Revoke(context.TODO(), leaseId)</span><br></pre></td></tr></table></figure><p><strong>完整Demo</strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">config clientv3.Config</span><br><span class="line">client *clientv3.Client</span><br><span class="line">err error</span><br><span class="line">lease clientv3.Lease</span><br><span class="line">leaseResp *clientv3.LeaseGrantResponse</span><br><span class="line">leaseId clientv3.LeaseID</span><br><span class="line">kv clientv3.KV</span><br><span class="line">keepRespChan &lt;-<span class="keyword">chan</span> *clientv3.LeaseKeepAliveResponse</span><br><span class="line">keepResp *clientv3.LeaseKeepAliveResponse</span><br><span class="line">ctx context.Context</span><br><span class="line">cancelFunc context.CancelFunc</span><br><span class="line">txn clientv3.Txn</span><br><span class="line">txnResp *clientv3.TxnResponse</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端配置</span></span><br><span class="line">config = clientv3.Config&#123;</span><br><span class="line">Endpoints: []<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:2379"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接</span></span><br><span class="line"><span class="keyword">if</span> client, err = clientv3.New(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KV</span></span><br><span class="line">kv = clientv3.NewKV(client)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1, 上锁 (创建租约, 自动续租, 拿着租约去抢占一个key)</span></span><br><span class="line">lease = clientv3.NewLease(client)</span><br><span class="line"><span class="comment">//申请一个5秒生周期的租约</span></span><br><span class="line"><span class="keyword">if</span> leaseResp, err = lease.Grant(context.TODO(), <span class="number">5</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"lease.Grant error:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拿到租约id</span></span><br><span class="line">leaseId = leaseResp.ID</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备一个用于取消自动续租的context</span></span><br><span class="line">ctx, cancelFunc = context.WithCancel(context.TODO())</span><br><span class="line"></span><br><span class="line"><span class="comment">// defer 会把租约释放掉, 关联的KV就被删除了</span></span><br><span class="line"><span class="comment">// 确保函数退出后, 自动续租会停止</span></span><br><span class="line"><span class="keyword">defer</span> cancelFunc()</span><br><span class="line"><span class="keyword">defer</span> lease.Revoke(context.TODO(), leaseId)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5秒后会取消自动续租</span></span><br><span class="line"><span class="keyword">if</span> keepRespChan, err = lease.KeepAlive(ctx, leaseId); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理续约应答的协程</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> keepResp = &lt;-keepRespChan:</span><br><span class="line"><span class="keyword">if</span> keepRespChan == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"租约已经失效了"</span>)</span><br><span class="line"><span class="keyword">goto</span> END</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 每秒会续租一次, 所以就会受到一次应答</span></span><br><span class="line">fmt.Println(<span class="string">"收到自动续租应答:"</span>, keepResp.ID)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  if 不存在key， then 设置它, else 抢锁失败</span></span><br><span class="line">kv = clientv3.NewKV(client)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事务</span></span><br><span class="line">txn = kv.Txn(context.TODO())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果key不存在</span></span><br><span class="line">txn.If(clientv3.Compare(clientv3.CreateRevision(<span class="string">"/cron/lock/job5"</span>), <span class="string">"="</span>, <span class="number">0</span>)).</span><br><span class="line">Then(clientv3.OpPut(<span class="string">"/cron/lock/job5"</span>, <span class="string">"xxx"</span>, clientv3.WithLease(leaseId))).</span><br><span class="line">Else(clientv3.OpGet(<span class="string">"/cron/lock/job5"</span>)) <span class="comment">// 否则抢锁失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line"><span class="keyword">if</span> txnResp, err = txn.Commit(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 没有问题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否抢到了锁</span></span><br><span class="line"><span class="keyword">if</span> !txnResp.Succeeded &#123;</span><br><span class="line">fmt.Println(<span class="string">"锁被占用:"</span>, <span class="keyword">string</span>(txnResp.Responses[<span class="number">0</span>].GetResponseRange().Kvs[<span class="number">0</span>].Value))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2, 处理业务</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"处理任务"</span>)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br></pre></td></tr></table></figure></p><p><table><tr><th>SessionA</th><th>SessionB</th></tr><tr><td>go run main.go</td><td>go run main.go</td></tr></table><br><img src="https://enpsl.github.io/img/in-post/2019-01-05/13.png" alt=""><br><img src="https://enpsl.github.io/img/in-post/2019-01-05/12.png" alt=""></p><blockquote><p>SesionA先执行main.go先获得一个锁，随后执行SessionB main.go,会提示锁被占用</p></blockquote><blockquote><p>参考</p><ul><li><a href="https://godoc.org/github.com/coreos/etcd/clientv3" target="_blank" rel="noopener">《Go Etcd Docs》</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 调度多个cron</title>
      <link href="/2019/01/01/2019-01-01-golang-cron/"/>
      <url>/2019/01/01/2019-01-01-golang-cron/</url>
      
        <content type="html"><![CDATA[<h2 id="类库引用"><a href="#类库引用" class="headerlink" title="类库引用"></a>类库引用</h2><blockquote><p>下载cron包到$Gopath下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pengshiliang@pengshiliang-virtual-machine:go get github.com/gorhill/cronexpr</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>导入<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/gorhill/cronexpr"</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="一个简单的cron实例"><a href="#一个简单的cron实例" class="headerlink" title="一个简单的cron实例"></a>一个简单的cron实例</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    expr *cronexpr.Expression</span><br><span class="line">    err error</span><br><span class="line">    now time.Time</span><br><span class="line">    nextTime time.Time</span><br><span class="line">    )</span><br><span class="line"><span class="comment">// golang可支持到秒粒度, 年配置(2018-2099)</span></span><br><span class="line"><span class="comment">// 哪一分钟（0-59），哪小时（0-23），哪天（1-31），哪月（1-12），星期几（0-6）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每隔5秒钟执行1次</span></span><br><span class="line"><span class="keyword">if</span> expr, err = cronexpr.Parse(<span class="string">"*/5 * * * * * *"</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前时间</span></span><br><span class="line">now = time.Now()</span><br><span class="line"><span class="comment">// 下次调度时间</span></span><br><span class="line">nextTime = expr.Next(now)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待这个定时器超时</span></span><br><span class="line">time.AfterFunc(nextTime.Sub(now), <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"当前时间：%+v 调度时间:%+v\n"</span>, now, nextTime)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pengshiliang@pengshiliang-virtual-machine:~/code/go/src/cron$ go run sim.go </span><br><span class="line">当前时间：2019-01-01 19:57:30.179548305 +0800 CST m=+0.000772719 调度时间:2019-01-01 19:57:35 +0800 CST</span><br></pre></td></tr></table></figure></p><h2 id="多任务版"><a href="#多任务版" class="headerlink" title="多任务版"></a>多任务版</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CronJob <span class="keyword">struct</span> &#123;</span><br><span class="line">expr *cronexpr.Expression</span><br><span class="line">nextTime time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">expr *cronexpr.Expression</span><br><span class="line">now time.Time</span><br><span class="line">cronJob *CronJob</span><br><span class="line">cronSchedule <span class="keyword">map</span>[<span class="keyword">string</span>]*CronJob</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cronSchedule = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*CronJob)</span><br><span class="line"><span class="comment">//当前时间</span></span><br><span class="line">now = time.Now()</span><br><span class="line"><span class="comment">//添加任务job1到cronSchedule中</span></span><br><span class="line">expr = cronexpr.MustParse(<span class="string">"*/5 * * * * * *"</span>)</span><br><span class="line">cronJob = &amp;CronJob&#123;</span><br><span class="line">expr: expr,</span><br><span class="line">nextTime:expr.Next(now),</span><br><span class="line">&#125;</span><br><span class="line">cronSchedule[<span class="string">"job1"</span>] = cronJob</span><br><span class="line"><span class="comment">//添加任务job2到cronSchedule中</span></span><br><span class="line">expr = cronexpr.MustParse(<span class="string">"*/5 * * * * * *"</span>)</span><br><span class="line">cronJob = &amp;CronJob&#123;</span><br><span class="line">expr: expr,</span><br><span class="line">nextTime:expr.Next(now),</span><br><span class="line">&#125;</span><br><span class="line">cronSchedule[<span class="string">"job2"</span>] = cronJob</span><br><span class="line"><span class="comment">// 启动一个调度协程</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">jobName <span class="keyword">string</span></span><br><span class="line">cronJob *CronJob</span><br><span class="line">now time.Time</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 定时检查一下任务调度表</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">now = time.Now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> jobName, cronJob = <span class="keyword">range</span> cronSchedule &#123;</span><br><span class="line"><span class="comment">// 判断是否过期</span></span><br><span class="line"><span class="keyword">if</span> cronJob.nextTime.Before(now) || cronJob.nextTime.Equal(now) &#123;</span><br><span class="line"><span class="comment">// 启动一个协程, 执行这个任务</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(jobName <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"当前执行时间:%+v执行任务%s\n"</span>, now, jobName)</span><br><span class="line">&#125;(jobName)</span><br><span class="line"><span class="comment">// 计算下一次调度时间</span></span><br><span class="line">cronJob.nextTime = cronJob.expr.Next(now)</span><br><span class="line">fmt.Println(jobName, <span class="string">"下次执行时间:"</span>, cronJob.nextTime)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//防止main协程退出</span></span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pengshiliang@pengshiliang-virtual-machine:~/code/go/src/cron/demo$ go run test1.go</span><br><span class="line">job2 下次执行时间: 2019-01-01 20:04:45 +0800 CST</span><br><span class="line">job1 下次执行时间: 2019-01-01 20:04:45 +0800 CST</span><br><span class="line">当前执行时间:2019-01-01 20:04:40.000827793 +0800 CST m=+0.107461981执行任务job2</span><br><span class="line">当前执行时间:2019-01-01 20:04:40.00104295 +0800 CST m=+0.107677140执行任务job1</span><br><span class="line">job1 下次执行时间: 2019-01-01 20:04:50 +0800 CST</span><br><span class="line">job2 下次执行时间: 2019-01-01 20:04:50 +0800 CST</span><br><span class="line">当前执行时间:2019-01-01 20:04:45.000103213 +0800 CST m=+5.106737398执行任务job1</span><br><span class="line">当前执行时间:2019-01-01 20:04:45.000204198 +0800 CST m=+5.106838391执行任务job2</span><br><span class="line">当前执行时间:2019-01-01 20:04:50.000000023 +0800 CST m=+10.106634228执行任务job1</span><br><span class="line">job1 下次执行时间: 2019-01-01 20:04:55 +0800 CST</span><br><span class="line">job2 下次执行时间: 2019-01-01 20:04:55 +0800 CST</span><br><span class="line">当前执行时间:2019-01-01 20:04:50.001381032 +0800 CST m=+10.108015219执行任务job2</span><br><span class="line">job1 下次执行时间: 2019-01-01 20:05:00 +0800 CST</span><br><span class="line">job2 下次执行时间: 2019-01-01 20:05:00 +0800 CST</span><br><span class="line">当前执行时间:2019-01-01 20:04:55.000000033 +0800 CST m=+15.106634234执行任务job1</span><br><span class="line">当前执行时间:2019-01-01 20:04:55.001663389 +0800 CST m=+15.108297584执行任务job2</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><blockquote><p>cronexpr.MustParse()和cronexpr.Parse()区别,cronexpr.Parse()会多返回一个error变量，<br>如果确定接收到的cron表达式正确的话可以选择用MustParse</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> golang </tag>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello 2019</title>
      <link href="/2018/12/31/2018-12-31-hello-2019/"/>
      <url>/2018/12/31/2018-12-31-hello-2019/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Yeah It’s on. ”</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Psl 的 Blog 就这么开通了。</p><p><a href="#build">跳过废话，直接看技术实现 </a> </p><p>2019 年，Psl 总算有个地方可以好好写点东西了。</p><p>之前一直就有开个博客的想法，但是一直没有开。以前自己学过的知识都是记录在自己的笔记中，<br>但是久而久之却发现一个问题，那就是如果记录的笔记规划不好的话就会丢失，在遇到问题翻以<br>前的记录时也并不好找，不过偶然间在github发现了<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a><br>这个有意思的东东，可以很快的搭建出一个博客，还省了弄域名的功夫，觉得不错就花了几个小时的<br>时间搞了下</p><h2 id=""><a href="#" class="headerlink" title=""></a><p id="build"></p></h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>接下来说说搭建这个博客的技术细节。  </p><p>实现依赖工具 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> + <a href="http://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a> 快速 Building Blog 的技术方案，非常轻松时尚。</p><p>其优点非常明显：</p><ul><li><strong>Markdown</strong> 带来的优雅写作体验</li><li>非常熟悉的 Git workflow ，<strong>Git Commit 即 Blog Post</strong></li><li>利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机<ul><li>如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了 </li></ul></li><li>Jekyll 的自定制非常容易，基本就是个模版引擎</li></ul><hr><p>进入主题我直接 Download 了 Hux的博客主题 的进行修改，简单粗暴，不过遇到了很多坑😂，好在都填完了。。。</p><p>简要说明一下步骤：</p><p>一 ：安装Ruby</p><p>二 ：安装RubyGems</p><p>三：用RubyGems安装Jekyll</p><p>四：cd到博客文件夹，开启服务器</p><p>五：访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>六：提交代码到远程GitHub上</p><p>本地调试环境需要 <code>gem install jekyll</code>，结果 rubygem 的源居然被墙了，后来上网查资料告诉要切话我们的大淘宝镜像，但是切换过程中又出现404错误<br>后来查资料才发现淘宝的源已经停止维护，又换成了OSChina的源 <a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回顾这个博客的诞生，纯粹是出于个人兴趣。希望自己可以利用闲暇时间写点什么</p><p>如果你恰好逛到了这里，希望你也能喜欢这个博客主题。</p><p>—— Psl 后记于 2018.12</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> Meta </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql语句查询性能分析</title>
      <link href="/2018/12/01/2018-12-01-mysql-per-analysis/"/>
      <url>/2018/12/01/2018-12-01-mysql-per-analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般情况下，如果谈起查询性能优化，多数人的第一感知都是想到一些复杂的语句，想到查询需要返回大量的数据。<br>但有些情况下，“查一行”，也会执行得特别慢。今天，就来探讨这个问题，看看什么情况下，会出现这个现象。</p><p>当然，如果 MySQL 数据库本身就有很大的压力，导致数据库服务器 CPU 占用率很高或 ioutil（IO 利用率）很高，<br>这种情况下所有语句的执行都有可能变慢，不属于今天的探讨范围。</p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>首先，先做一个测试表在插入1万条数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t1` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `c` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line"></span><br><span class="line">delimiter ;;</span><br><span class="line">create procedure idata()</span><br><span class="line">begin</span><br><span class="line">  declare i int;</span><br><span class="line">  set i=1;</span><br><span class="line">  while(i&lt;=10000)do</span><br><span class="line">    insert into t1 values(i,i);</span><br><span class="line">    set i=i+1;</span><br><span class="line">  end while;</span><br><span class="line">end;;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call idata();</span><br></pre></td></tr></table></figure></p><h3 id="几种场景类型分析"><a href="#几种场景类型分析" class="headerlink" title="几种场景类型分析"></a>几种场景类型分析</h3><h4 id="第一类：查询长时间不返回"><a href="#第一类：查询长时间不返回" class="headerlink" title="第一类：查询长时间不返回"></a>第一类：查询长时间不返回</h4><p>执行下面的sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 where id=1;</span><br></pre></td></tr></table></figure></p><p>查询长时间不返回</p><p><img src="https://enpsl.github.io/img/in-post/2018-12-01/1.png" alt=""></p><p>一般碰到这种情况的话，大概率是表 t1 被锁住了。接下来分析原因的时候，一般都是首先执行一下 show processlist 命令，看看当前语句处于什么状态。</p><p>然后再根据状态去分析产生的原因，以及能否复现</p><p><strong>等MDL锁</strong></p><p>如下图所示，就是使用 show processlist 命令查看 Waiting for table metadata lock 的示意图。<br><img src="https://enpsl.github.io/img/in-post/2018-12-01/2.png" alt=""><br>这个状态表示的是，现在<strong>有一个线程正在表 t1 上请求或者持有 MDL 写锁，把 select 语句堵住了。</strong></p><p>不过，在 MySQL 5.7 版本下复现这个场景，也很容易。</p><table><tr><th>SessionA</th><th>SessionB</th></tr><tr><td>lock table t1 write</td><td></td></tr><tr><td></td><td>select * from t1 where id=1;</td></tr></table><p>session A 通过 lock table 命令持有表 t1 的 MDL 写锁，而 session B 的查询需要获取 MDL 读锁。所以，session B 进入等待状态。</p><p>这类问题的处理方式，就是找到谁持有 MDL 写锁，然后把它 kill 掉。</p><p>但是，由于在 show processlist 的结果里面，session A 的 Command 列是“Sleep”，导致查找起来很不方便。不过有了 performance_schema 和 sys 系统库以后，就方便多了。（MySQL 启动时需要设置 performance_schema=on，相比于设置为 off 会有 10% 左右的性能损失)</p><p>查看是否支持performance_schema<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines <span class="keyword">where</span> <span class="keyword">engine</span> =<span class="string">'performance_schema'</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://enpsl.github.io/img/in-post/2018-12-01/3.png" alt=""><br>是否开启performance_schema<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'performance_schema'</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://enpsl.github.io/img/in-post/2018-12-01/4.png" alt=""></p><p>通过查询 sys.schema_table_lock_waits 这张表，我们就可以直接找出造成阻塞的 process id，把这个连接用 kill 命令断开即可。</p><p><strong>等FLUSH</strong></p><p>另一种场景<br>我在表t1上执行这样一条sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from information_schema.processlist where id=1;</span><br></pre></td></tr></table></figure></p><p>查出来这个线程的状态是 Waiting for table flush</p><p>这个状态表示的是，现在有一个线程正要对表 t1 做 flush 操作。MySQL 里面对表做 flush 操作的用法，一般有以下两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flush tables t1 with read lock;</span><br><span class="line">flush tables with read lock;</span><br></pre></td></tr></table></figure><p>这两个 flush 语句，如果指定表 t1 的话，代表的是只关闭表 t1；如果没有指定具体的表名，则表示关闭 MySQL 里所有打开的表。</p><p>但是正常这两个语句执行起来都很快，除非它们也被别的线程堵住了。</p><p>所以，出现 Waiting for table flush 状态的可能情况是：有一个 flush tables 命令被别的语句堵住了，然后它又堵住了我们的 select 语句。</p><p>复现一下这种情况:</p><p><table><tr><th>SessionA</th><th>SessionB</th><th>SessionC</th></tr><tr><td>select sleep(1) from t1</td><td></td><td></td></tr><tr><td></td><td>flush table t1</td><td></td></tr><tr><td></td><td></td><td>select * from t1 where id=1;</td></tr></table><br>在 session A 中，我故意每行都调用一次 sleep(1)，这样这个语句默认要执行 1 万秒，在这期间表 t 一直是被 session A“打开”着。然后，session B 的 flush tables t 命令再要去关闭表 t，就需要等 session A 的查询结束。这样，session C 要再次查询的话，就会被 flush 命令堵住了。</p><p>下面是show processlist 结果<br> <img src="https://enpsl.github.io/img/in-post/2018-12-01/5.png" alt=""></p><p> <strong>等行锁</strong></p><p>现在，经过了表级锁的考验，我们的 select 语句终于来到引擎里了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 where id=1 lock in share mode;</span><br></pre></td></tr></table></figure><p>由于访问 id=1 这个记录时要加读锁，如果这时候已经有一个事务在这行记录上持有一个写锁，我们的 select 语句就会被堵住。</p><p>行锁操作复现:</p><p><table><tr><th>SessionA</th><th>SessionB</th></tr><tr><td>begin;<br>update t1 set c=c+1 where id=1;</td><td></td></tr><tr><td></td><td>select * from t1 where id=1 lock in share mode;</td></tr></table><br>下面是show processlist 结果</p><p> <img src="https://enpsl.github.io/img/in-post/2018-12-01/6.png" alt=""></p><p>显然，session A 启动了事务，占有写锁，还不提交，是导致 session B 被堵住的原因。</p><p>这个问题并不难分析，但问题是怎么查出是谁占着这个写锁。如果你用的是 MySQL 5.7 版本，可以通过 sys.innodb_lock_waits 表查到。</p><p>查询方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 sys.innodb_lock_waits where locked_table=&apos;`test`.`t1`&apos;\G</span><br></pre></td></tr></table></figure></p><p> <img src="https://enpsl.github.io/img/in-post/2018-12-01/8.png" alt=""></p><p>可以看到，这个信息很全，9957 号线程是造成堵塞的罪魁祸首。而干掉这个罪魁祸首的方式，就是 KILL QUERY 9957 或 KILL 9957。</p><p>不过，这里不应该显示“KILL QUERY 9957”。这个命令表示停止 9957 号线程当前正在执行的语句，而这个方法其实是没有用的。因为占有行锁的是 update 语句，这个语句已经是之前执行完成了的，现在执行 KILL QUERY，无法让这个事务去掉 id=1 上的行锁。</p><p>实际上，KILL 9957 才有效，也就是说直接断开这个连接。这里隐含的一个逻辑就是，连接被断开的时候，会自动回滚这个连接里面正在执行的线程，也就释放了 id=1 上的行锁。</p><h4 id="第二类：查询慢"><a href="#第二类：查询慢" class="headerlink" title="第二类：查询慢"></a>第二类：查询慢</h4><p>经过了重重封“锁”，再来看看一些查询慢的例子</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 where c=9000 limit 1;</span><br></pre></td></tr></table></figure><p>由于字段 c 上没有索引，这个语句只能走 id 主键顺序扫描，因此需要扫描 5 千行。</p><p>通过slow_log 看一下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log=<span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">set</span> long_query_time=<span class="number">0</span>;  <span class="comment">#我们让所有查询都加入到slow_log中</span></span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%slow%'</span>;</span><br></pre></td></tr></table></figure><p> <img src="https://enpsl.github.io/img/in-post/2018-12-01/10.png" alt=""></p><p> slow_log结果</p><p>  <img src="https://enpsl.github.io/img/in-post/2018-12-01/11.png" alt=""></p><p>Rows_examined 显示扫描了 9000 行。你可能会说，不是很慢呀，6 毫秒就返回了，我们线上一般都配置超过 1 秒才算慢查询。但你要记住：<br><strong>坏查询不一定是慢查询</strong>。我们这个例子里面只有 1 万行记录，数据量大起来的话，执行时间就线性涨上去了。</p><p>扫描行数多，所以执行慢，这个很好理解。</p><p>但是接下来，我们再看一个只扫描一行，但是执行很慢的语句。</p><p>看下面的例子</p><p><table><tr><th>SessionA</th><th>SessionB</th></tr><tr><td>start transaction with consistent snapshot;</td><td></td></tr><tr><td></td><td>update t1 set c=c+1 where id=1;//执行100万次</td></tr><tr><td>select <em> from t1 where id = 1;</em></td><td></td></tr><tr><td>select  from t1 where id = 1 lock in share mode;</td><td></td></tr></table><br>先看看执行一次的结果</p><p><img src="https://enpsl.github.io/img/in-post/2018-12-01/12.png" alt=""></p><p>由此可推出SessionB执行100万次后结果<br>select * from t1 where id = 1 lock in share mode;</p><p><table style="width:15%"><tr><th>id</th><th>c</th></tr><tr><td>1</td><td>1000001</td></tr></table><br>1 row in set (0.00 sec)</p><p>此时，session A 先用 start transaction with consistent snapshot 命令启动了一个事务，之后 session B 才开始执行 update 语句。</p><p>session B 更新完 100 万次，生成了 100 万个回滚日志 (undo log)。</p><p>带 lock in share mode 的 SQL 语句，是当前读，因此会直接读到 1000001 这个结果，所以速度很快；而 select * from t where id=1 这个语句，是一致性读，因此需要从 1000001 开始，依次执行 undo log，执行了 100 万次以后，才将 1 这个结果返回。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>今天列举了在一个简单的表上，执行“查一行”，可能会出现的被锁住和执行慢的例子。这其中涉及到了表锁、行锁和一致性读的概念。<br>在实际使用中，碰到的场景会更复杂。但大同小异。</p><blockquote><p>参考</p><ul><li>《极客时间林晓斌Mysql专场》</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux 学习(一)</title>
      <link href="/2018/11/24/2018-11-24-redux-first/"/>
      <url>/2018/11/24/2018-11-24-redux-first/</url>
      
        <content type="html"><![CDATA[<h2 id="Reudx"><a href="#Reudx" class="headerlink" title="Reudx"></a>Reudx</h2><p>由官网可看出：A JavaScript library for building user interfaces， React是一个非常简单的视图型框架</p><p><img src="/img/in-post/2019-02-02/1.png" alt=""></p><p>Redux是一个流行的JavaScript框架，为应用程序提供一个可预测的状态容器。Redux基于简化版本的Flux框架，Flux是Facebook开发的一个框架。在标准的MVC框架中，数据可以在UI组件和存储之间双向流动，而Redux严格限制了数据只能在一个方向上流动</p><p>在Redux中，所有的数据（比如state）被保存在一个被称为store的容器中 → 在一个应用程序中只能有一个。store本质上是一个状态树，保存了所有对象的状态。任何UI组件都可以直接从store访问特定对象的状态。要通过本地或远程组件更改状态，需要分发一个action。分发在这里意味着将可执行信息发送到store。当一个store接收到一个action，它将把这个action代理给相关的reducer。reducer是一个纯函数，它可以查看之前的状态，执行一个action并且返回一个新的状态。</p><p>Redux=Reducer+Flux</p><h2 id="Redux的工作流程"><a href="#Redux的工作流程" class="headerlink" title="Redux的工作流程"></a>Redux的工作流程</h2><p><img src="/img/in-post/2019-02-02/2.png" alt=""></p><h2 id="Store创建"><a href="#Store创建" class="headerlink" title="Store创建"></a>Store创建</h2><p>创建reducer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const defaultState = &#123;</span><br><span class="line">    inputValue: &quot;123&quot;,</span><br><span class="line">    list: [1,2]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default (state = defaultState, action) =&gt; &#123;</span><br><span class="line">    return state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建Store并引入reducer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createStore&#125; from &quot;redux&quot;;</span><br><span class="line">import reducer from &quot;./reducer&quot;;</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><h2 id="ReduxTools使用"><a href="#ReduxTools使用" class="headerlink" title="ReduxTools使用"></a>ReduxTools使用</h2><p><img src="/img/in-post/2019-02-02/3.png" alt=""></p><p>使用方式详见<a href="https://github.com/zalmoxisus/redux-devtools-extension#usage" target="_blank" rel="noopener">redux-devtools-extension</a></p><p><img src="/img/in-post/2019-02-02/4.png" alt=""></p><h2 id="Action-和-Reducer"><a href="#Action-和-Reducer" class="headerlink" title="Action 和 Reducer"></a>Action 和 Reducer</h2><p>action 传递给reducer:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const action = &#123;</span><br><span class="line">            type: &apos;change_input_value&apos;,</span><br><span class="line">            value: e.target.value</span><br><span class="line">        &#125;;</span><br><span class="line">//传给store</span><br><span class="line">store.dispatch(action);</span><br></pre></td></tr></table></figure></p><p>store变化订阅</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.subscribe(this.handleStoreChange)</span><br></pre></td></tr></table></figure><p>reducer修改state:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (action.type === &apos;change_input_value&apos;) &#123;</span><br><span class="line">    const newState = JSON.parse(JSON.stringify(state));</span><br><span class="line">    newState.inputValue = action.value;</span><br><span class="line">    return newState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="发送异步请求"><a href="#发送异步请求" class="headerlink" title="发送异步请求"></a>发送异步请求</h2><p>react发送异步请求一般都是在componentDidMount中发送的，选择原因可总结为如下几点：</p><p><strong>constructor()</strong></p><p>constructor()中获取数据的话，如果时间太长，或者出错，组件就渲染不出来，整个页面都没法渲染了。</p><p>constructor是作组件state初绐化工作，并不是设计来作加载数据的。</p><p><strong>componentWillMount()</strong></p><p>如果使用SSR（服务端渲染）,componentWillMount会执行2次，一次在服务端，一次在客户端。而componentDidMount不会。</p><p>constructor可以完成state初始化，componentWillMount使用的很少，目前16版本加入了UNSAFE来标识componentWillMount，新的生命周期static getDerivedStateFromProps()   也会替代这个。</p><p>React16之后采用了Fiber架构，只有componentDidMount声明周期函数是确定被执行一次的，类似ComponentWillMount的生命周期钩子都有可能执行多次，所以不加以在这些生命周期中做有副作用的操作，比如请求数据之类。</p><p><strong>render()</strong></p><p>无限render</p><p><strong>componentDidMount()</strong></p><p>确保已经render过一次。提醒我们正确地设置初始状态，这样就不会得到导致错误的”undefined”状态。</p><p>componentDidMount方法中的代码，是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用setState方法，会触发重渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&quot;/list.json&quot;).then((res) =&gt; &#123;</span><br><span class="line">    const data = res.data;</span><br><span class="line">    const action = &#123;</span><br><span class="line">        type: &apos;init_axios_data&apos;,</span><br><span class="line">        data</span><br><span class="line">    &#125;;</span><br><span class="line">    //传给store</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (action.type === &apos;init_axios_data&apos;) &#123;</span><br><span class="line">    const newState = JSON.parse(JSON.stringify(state));</span><br><span class="line">    newState.list = action.data;</span><br><span class="line">    return newState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redux-thunk"><a href="#Redux-thunk" class="headerlink" title="Redux-thunk"></a>Redux-thunk</h2><h3 id="什么是Redux-thunk中间件"><a href="#什么是Redux-thunk中间件" class="headerlink" title="什么是Redux-thunk中间件"></a>什么是Redux-thunk中间件</h3><p>原生的redux的store的dispatch方法只能接收一个对象，Redux Thunk对dispatch方法做了一个升级<br>它允许我们写一个返回function而非action对象的action creators。Redux Thunk可以用来延迟dispatch一个action或者只在某些特定场景下才dispatch。内部函数接受store的dispatch方法和getState方法作为参数。</p><p><img src="/img/in-post/2019-02-02/5.png" alt=""></p><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">import rootReducer from &apos;./reducers/index&apos;;</span><br><span class="line"></span><br><span class="line">// Note: this API requires redux@&gt;=3.1.0</span><br><span class="line">const store = createStore(</span><br><span class="line">  rootReducer,</span><br><span class="line">  applyMiddleware(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>兼容redux-devtools-extension<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;) : compose;</span><br><span class="line"></span><br><span class="line">const enhancer = composeEnhancers(</span><br><span class="line">    applyMiddleware(thunk),</span><br><span class="line">);</span><br><span class="line">const store = createStore(reducer, enhancer);</span><br></pre></td></tr></table></figure></p><p>分离componentDidMount代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;getTodoList&#125; from &quot;../store/actions&quot;</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    store.dispatch(getTodoList())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建actions：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line">export const getTodoList = () =&gt; &#123;</span><br><span class="line">    return (dispatch) =&gt; &#123;</span><br><span class="line">        axios.get(&quot;/list.json&quot;).then((res) =&gt; &#123;</span><br><span class="line">            const data = res.data;</span><br><span class="line">            const action = &#123;</span><br><span class="line">                type: &apos;init_axios_data&apos;,</span><br><span class="line">                data</span><br><span class="line">            &#125;;</span><br><span class="line">            dispatch(action);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 学习(一)</title>
      <link href="/2018/11/22/2018-11-22-react-first/"/>
      <url>/2018/11/22/2018-11-22-react-first/</url>
      
        <content type="html"><![CDATA[<h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><p>简单的jsx示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class JSX extends Component&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;div&gt;jsx语法&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default JSX</span><br></pre></td></tr></table></figure><blockquote><p>jsx语法中 return后面不能有双引号或单引号，并且必须被包含在一个大的根节点中</p></blockquote><p>典型错误示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class JSX extends Component&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;jsx语法&lt;/div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default JSX</span><br></pre></td></tr></table></figure></p><p><img src="/img/in-post/2019-01-26/1.jpg" alt=""></p><p>如何解决：</p><p>外层引入一个div标签或者Fragment占位符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component, Fragment&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class JSX extends Component&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;div&gt;jsx语法&lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/Fragment&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default JSX</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用Fragment， 推荐使用Fragment占位符不生成任何虚拟dom节点</p></blockquote><h2 id="React中的响应式设计思想和事件绑定"><a href="#React中的响应式设计思想和事件绑定" class="headerlink" title="React中的响应式设计思想和事件绑定"></a>React中的响应式设计思想和事件绑定</h2><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>看一个小例子，给input框赋值一个默认值，并能够根据输入改变默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component, Fragment&#125; from &apos;react&apos;</span><br><span class="line">class TodoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            inputValue: &quot;hello!!!!!&quot;,</span><br><span class="line">            list: [],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input</span><br><span class="line">                        value=&#123;this.state.inputValue&#125;</span><br><span class="line">                        onChange=&#123;this.handleInputChange.bind(this)&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;学英语&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;learn react&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/Fragment&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    handleInputChange(e) &#123;</span><br><span class="line">        this.state.inputValue = e.target.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default TodoList</span><br></pre></td></tr></table></figure></p><p>代码分析：首先程序初始化的时候inputValue为”hello!!!!!”,render函数执行的时候把input的内容渲染成数据里面inputValue的值<br>然后给input绑定了一个onchange事件，同时用es6的bind方法传递react的this对象到handleInputChange中，在handleInputChange去<br>改变state中inputValue的值为手动输入的对象</p><h2 id="实现一个todolist"><a href="#实现一个todolist" class="headerlink" title="实现一个todolist"></a>实现一个todolist</h2><h3 id="todolist新增功能"><a href="#todolist新增功能" class="headerlink" title="todolist新增功能"></a>todolist新增功能</h3><p>利用在React中state数据变化dom也会变化的特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component, Fragment&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class TodoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            inputValue: &quot;&quot;,</span><br><span class="line">            list: [],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input</span><br><span class="line">                        value=&#123;this.state.inputValue&#125;</span><br><span class="line">                        onChange=&#123;this.handleInputChange.bind(this)&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                    &lt;button onClick=&#123;this.handleButtonClick.bind(this)&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">                            return &lt;li&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/Fragment&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    handleInputChange(e) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            inputValue: e.target.value,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    handleButtonClick(e) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: [...this.state.list, this.state.inputValue],</span><br><span class="line">            inputValue: &quot;&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default TodoList</span><br></pre></td></tr></table></figure><blockquote><p>Warning: Each child in an array or iterator should have a unique “key” prop. 错误问题<br>es5的map方法中必须指定一个key值否则会报错</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">            return &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="todolist删除功能"><a href="#todolist删除功能" class="headerlink" title="todolist删除功能"></a>todolist删除功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">            return &lt;li</span><br><span class="line">                key=&#123;index&#125;</span><br><span class="line">                onClick=&#123;this.handleDelete.bind(this, index)&#125;</span><br><span class="line">            &gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">handleDelete (index) &#123;</span><br><span class="line">        //immutable</span><br><span class="line">        //state不允许我们做任何的改变，对react性能优化有影响</span><br><span class="line">        const list = [...this.state.list];</span><br><span class="line">        list.splice(index, 1)</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: list</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在handleDelete方法中，不推荐使用this.state.list.splice(index, 1),原因见注释</p></blockquote><h3 id="label属性"><a href="#label属性" class="headerlink" title="label属性"></a>label属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;label htmlFor=&quot;insertArea&quot;&gt;输入内容&lt;/label&gt;</span><br><span class="line">&lt;input</span><br><span class="line">    id=&quot;insertArea&quot;</span><br><span class="line">    value=&#123;this.state.inputValue&#125;</span><br><span class="line">    onChange=&#123;this.handleInputChange.bind(this)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="组件拆分"><a href="#组件拆分" class="headerlink" title="组件拆分"></a>组件拆分</h3><p>我们把li标签中的内容注释掉并提取出来封装为一个组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import ToDoItem from &quot;./ToDoItem&quot;;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;Fragment&gt;</span><br><span class="line">                    &lt;ToDoItem/&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        /*&lt;li</span><br><span class="line">                            key=&#123;index&#125;</span><br><span class="line">                            onClick=&#123;this.handleDelete.bind(this, index)&#125;</span><br><span class="line">                        &gt;&#123;item&#125;&lt;/li&gt;*/</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/Fragment&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component, Fragment&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class ToDoItem extends Component&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;li&gt;item&lt;/li&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default ToDoItem</span><br></pre></td></tr></table></figure><blockquote><p>此时点击提交按钮每次新增的都是一个固定的item值，这也不是我们想要的</p></blockquote><h3 id="组件动态传值"><a href="#组件动态传值" class="headerlink" title="组件动态传值"></a>组件动态传值</h3><p>我们可以利用组件传值解决上面的问题，代码做如下修改<br>传递数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ToDoItem</span><br><span class="line">    content=&#123;item&#125;</span><br><span class="line">    index=&#123;index&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>在ToDoItem中接收：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return &lt;li&gt;&#123;this.props.content&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>传递方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ToDoItem</span><br><span class="line">    content=&#123;item&#125;</span><br><span class="line">    index=&#123;index&#125;</span><br><span class="line">    //把todolist这个组件的this对象强制传递给todoitem,这样在todoitem中才能调用todolist的handleDelete方法成功</span><br><span class="line">    deleteItem=&#123;this.handleDelete.bind(this)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>在ToDoItem中接收：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class ToDoItem extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        //通过bind去修改this指向，保证在handleClick可以使用this.props,并且在组件创建的时候</span><br><span class="line">        //通过第一个执行的方法constructor去改变handleClick的this指向</span><br><span class="line">        this.handleClick = this.handleClick.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;li</span><br><span class="line">            onClick=&#123;this.handleClick&#125;</span><br><span class="line">        &gt;&#123;this.props.content&#125;&lt;/li&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        this.props.deleteItem(this.props.index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单向数据流：<br><strong>子组件不能修改父组件传递的数据值，如果要修改只能通过父组件向子组件传递方法来修改</strong></p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>TodoList</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">class TodoList extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            inputValue: &quot;&quot;,</span><br><span class="line">            list: [],</span><br><span class="line">        &#125;;</span><br><span class="line">        this.handleInputChange = this.handleInputChange.bind(this);</span><br><span class="line">        this.handleButtonClick = this.handleButtonClick.bind(this);</span><br><span class="line">        this.handleDelete = this.handleDelete.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;label htmlFor=&quot;insertArea&quot;&gt;输入内容&lt;/label&gt;</span><br><span class="line">                    &lt;input</span><br><span class="line">                        id=&quot;insertArea&quot;</span><br><span class="line">                        value=&#123;this.state.inputValue&#125;</span><br><span class="line">                        onChange=&#123;this.handleInputChange&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                    &lt;button onClick=&#123;this.handleButtonClick&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;this.getToDoItem()&#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/Fragment&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    handleInputChange(e) &#123;</span><br><span class="line">        const value = e.target.value;</span><br><span class="line">        this.setState(() =&gt; (&#123;</span><br><span class="line">            inputValue: value,</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    handleButtonClick(index) &#123;</span><br><span class="line">        this.setState((prevState) =&gt; (&#123;</span><br><span class="line">            list: [...prevState.list, prevState.inputValue],</span><br><span class="line">            inputValue: &quot;&quot;,</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    handleDelete (index) &#123;</span><br><span class="line">        this.setState((prevState) =&gt; &#123;</span><br><span class="line">            const list = [...this.state.list];</span><br><span class="line">            list.splice(index, 1);</span><br><span class="line">            return &#123;list&#125;   //等价于&#123;list: list&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    getToDoItem () &#123;</span><br><span class="line">        return this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;ToDoItem key=&#123;index&#125;</span><br><span class="line">                    content=&#123;item&#125;</span><br><span class="line">                    index=&#123;index&#125;</span><br><span class="line">                    deleteItem=&#123;this.handleDelete&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TodoItem<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class ToDoItem extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.handleClick = this.handleClick.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123; content &#125; = this.props;</span><br><span class="line">        return &lt;li</span><br><span class="line">            onClick=&#123;this.handleClick&#125;</span><br><span class="line">        &gt;&#123;content&#125;&lt;/li&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        const &#123;deleteItem, index&#125; = this.props;</span><br><span class="line">        deleteItem(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>react特点：</p><ul><li>声明式开发：减少DOM操作</li><li>可以与其它框架并存：flex，redux框架来解决复杂组件通信</li><li>组件化</li><li>单向数据流</li><li>视图层框架：在嵌套包含多个组件的项目中只做视图渲染开发</li><li>函数式编程：方便自动化测试</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> Es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 学习(二)</title>
      <link href="/2018/11/22/2018-11-23-react/"/>
      <url>/2018/11/22/2018-11-23-react/</url>
      
        <content type="html"><![CDATA[<h2 id="props-state-render"><a href="#props-state-render" class="headerlink" title="props state render"></a>props state render</h2><ul><li>当组件的state或props发生变化,render函数就会执行</li><li>当父组件的render函数重新执行时子组件的render也会被执行<br>父组件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component, Fragment&#125; from &apos;react&apos;</span><br><span class="line">import Child from &apos;./child&apos;</span><br><span class="line"></span><br><span class="line">class Parent extends Component&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        //当组件的state或props发生变化,render函数就会执行</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            content: &quot;&quot;,</span><br><span class="line">        &#125;;</span><br><span class="line">        this.handleInputChange = this.handleInputChange.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(&quot;render&quot;);</span><br><span class="line">        const &#123; content &#125; = this.state;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;div&gt;parent&lt;/div&gt;</span><br><span class="line">                &lt;input onChange=&#123;this.handleInputChange&#125;/&gt;</span><br><span class="line">                &lt;Child content=&#123;content&#125;/&gt;</span><br><span class="line">            &lt;/Fragment&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleInputChange(e) &#123;</span><br><span class="line">        const value = e.target.value;</span><br><span class="line">        this.setState(() =&gt; (&#123;</span><br><span class="line">            content: value,</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class Child extends Component&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(&quot;child render&quot;)</span><br><span class="line">        const &#123; content &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;&#123;content&#125;&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Child</span><br></pre></td></tr></table></figure><p><img src="/img/in-post/2019-01-26/2.png" alt=""></p><h2 id="虚拟Dom"><a href="#虚拟Dom" class="headerlink" title="虚拟Dom"></a>虚拟Dom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    //JSX-&gt;createElement-&gt;虚拟DOM（js对象）-&gt;真实的dom</span><br><span class="line">    //return &lt;div&gt;item&lt;/div&gt;;</span><br><span class="line">    return React.createElement(&quot;div&quot;, &#123;&#125;, &apos;item&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>React会在内存中维护一个虚拟DOM树，对这个树进行读或写，实际上是对虚拟DOM进行。当数据变化时，React会自动更新虚拟DOM，然后将新的虚拟DOM和旧的虚拟DOM进行对比，找到变更的部分，得出一个diff，然后将diff放到一个队列里，最终批量更新这些diff到DOM中。</p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>性能提升<br>跨端应用得以实现 React Native</p><h2 id="ref使用"><a href="#ref使用" class="headerlink" title="ref使用"></a>ref使用</h2><p>修改todolist代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    id=&quot;insertArea&quot;</span><br><span class="line">    value=&#123;this.state.inputValue&#125;</span><br><span class="line">    onChange=&#123;this.handleInputChange&#125;</span><br><span class="line">    ref=&#123;(input) =&gt; &#123;this.input = input&#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">handleInputChange(e) &#123;</span><br><span class="line">    //const value = e.target.value;</span><br><span class="line">    const value = this.input.value;</span><br><span class="line">    this.setState(() =&gt; (&#123;</span><br><span class="line">        inputValue: value,</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>this.input指向了<code>&lt;input/&gt;</code>的dom节点</p></blockquote><p>注意事项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul ref=&#123;(ul) =&gt; &#123;this.ul = ul&#125;&#125;&gt;</span><br><span class="line">    &#123;this.getToDoItem()&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">handleButtonClick(index) &#123;</span><br><span class="line">    this.setState((prevState) =&gt; (&#123;</span><br><span class="line">        list: [...prevState.list, prevState.inputValue],</span><br><span class="line">        inputValue: &quot;&quot;,</span><br><span class="line">    &#125;), () =&gt; &#123;</span><br><span class="line">        console.log(this.ul.querySelectorAll(&quot;li&quot;).length)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>console.log(this.ul.querySelectorAll(“li”).length)<br>要在setState第二个参数后使用，由于setState是异步执行<br>所以如果不放在setState执行后调用会导致dom节点数获取不对</p><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><p>定义：在某一时刻组件会自动调用的函数<br><img src="/img/in-post/2019-01-26/3.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//组件挂载到页面之前执行(render函数执行前)</span><br><span class="line">componentWillMount() &#123;</span><br><span class="line">    console.log(&quot;componentWillUnmount&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//组件挂载到页面之后执行(render函数执行后)</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    console.log(&quot;componentDidMount&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//组件更新前执行</span><br><span class="line">shouldComponentUpdate() &#123;</span><br><span class="line">    return true or false    //当return false 时当前组件的值更新会被禁用</span><br><span class="line">&#125;</span><br><span class="line">//组件更新前shouldComponentUpdate后执行</span><br><span class="line">componentWillUpdate() &#123;</span><br><span class="line">    console.log(&quot;componentWillUpdate&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//当一个组件从父组件接收参数</span><br><span class="line">//如果这个组件第一次存在于父组件中，不会被执行</span><br><span class="line">//如果这个组件之前存在于父组件中，才会被执行</span><br><span class="line">componentWillReceiveProps() &#123;</span><br><span class="line">    console.log(&quot;child componentWillReceiveProps&quot; )</span><br><span class="line">&#125;</span><br><span class="line">//当这个组件即将在页面中被剔除</span><br><span class="line">componentWillUnmount() &#123;</span><br><span class="line">    console.log(&quot;child componentWillUnmount&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> Es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis高可用</title>
      <link href="/2018/10/02/2018-01-10-redis-slave/"/>
      <url>/2018/10/02/2018-01-10-redis-slave/</url>
      
        <content type="html"><![CDATA[<h2 id="单机版Redis问题"><a href="#单机版Redis问题" class="headerlink" title="单机版Redis问题"></a>单机版Redis问题</h2><ul><li>机器故障需要做数据手动迁移</li><li>容量瓶颈</li><li>QPS瓶颈</li></ul><h2 id="引入正题"><a href="#引入正题" class="headerlink" title="引入正题"></a>引入正题</h2><p>前面列出的容量瓶颈和QPS瓶颈是redis分布式要解决的问题，本篇还是主要解决<br>redis怎么实现高可用，机器故障的问题</p><h2 id="主从复制介绍"><a href="#主从复制介绍" class="headerlink" title="主从复制介绍"></a>主从复制介绍</h2><p>作用：</p><ul><li>流量分流和负载均衡</li><li>提供多个数据分布</li><li>扩展redis读性能</li></ul><h3 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h3><ul><li>一个master可以有多个slave</li><li>一个slave只能有一个master</li><li>数据流向是单向的，master到slave</li></ul><h2 id="主从复制操作"><a href="#主从复制操作" class="headerlink" title="主从复制操作"></a>主从复制操作</h2><p>master节点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp $&#123;redis_src&#125;/redis.conf redis-6379.conf</span><br><span class="line">vim redis-6379.conf</span><br></pre></td></tr></table></figure><p>改动项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis-6379.pid</span><br><span class="line">logfile &quot;6379.log&quot;</span><br><span class="line">logfile &quot;6379.log&quot;</span><br><span class="line">#save 900 1</span><br><span class="line">#save 300 10</span><br><span class="line">#save 60 10000</span><br><span class="line">dbfilename dump-6379.rdb</span><br><span class="line">dir /opt/soft/data</span><br></pre></td></tr></table></figure><p>slave节点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp $&#123;redis_src&#125;/redis.conf redis-6380.conf</span><br><span class="line">vim redis-6380.conf</span><br></pre></td></tr></table></figure><p>改动项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis-6380.pid</span><br><span class="line">logfile &quot;6380.log&quot;</span><br><span class="line">logfile &quot;6380.log&quot;</span><br><span class="line">#save 900 1</span><br><span class="line">#save 300 10</span><br><span class="line">#save 60 10000</span><br><span class="line">dbfilename dump-6380.rdb</span><br><span class="line">dir /opt/soft/data</span><br><span class="line">salveof 127.0.0.1 6379  #master节点 ip port</span><br><span class="line">masterauth  #主节点设置密码时需要配置</span><br></pre></td></tr></table></figure><p>启动:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server 6379.conf</span><br><span class="line">redis-server 6380.conf</span><br></pre></td></tr></table></figure><p>检查主从状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line">127.0.0.1:6379&gt; set hello world</span><br><span class="line">127.0.0.1:6380&gt; get hello</span><br></pre></td></tr></table></figure><h2 id="runid和复制偏移量"><a href="#runid和复制偏移量" class="headerlink" title="runid和复制偏移量"></a>runid和复制偏移量</h2><h3 id="runid"><a href="#runid" class="headerlink" title="runid"></a>runid</h3><p>redis每次启动后都会随机生成一个runid执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379 info server |grep run</span><br><span class="line">redis-cli -p 6380 info server |grep run</span><br></pre></td></tr></table></figure><blockquote><p>redis每次重启runid会发生变化，redis从节点每次会检测主节点runid变化来进行一次全量复制</p></blockquote><h3 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h3><p>主节点和从节点都会记录执行一条命令时数据写入的字节数，当偏移量达到一致时，数据才会同步完成</p><h2 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h2><p><img src="/img/in-post/2018-01-10/1.png" alt=""></p><p><strong>全量复制开销</strong></p><ul><li>bgsave时间</li><li>RDB文件网络传输时间</li><li>从节点清空数据时间</li><li>从节点加载RDB时间</li><li>如果配置AOF开启会有AOF重写时间</li></ul><h2 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h2><p><img src="/img/in-post/2018-01-10/2.png" alt=""></p><h2 id="开发运维中的问题"><a href="#开发运维中的问题" class="headerlink" title="开发运维中的问题"></a>开发运维中的问题</h2><p><strong>规避全量复制：</strong></p><p>1：第一次全量复制</p><ul><li>问题：第一次不可避免</li><li>解决：小主节点，低峰</li></ul><p>2：节点运行ID不匹配</p><ul><li>问题：主节点重启runid变化</li><li>解决：故障转移，例如哨兵或集群</li></ul><p>3：复制积压缓冲区不足</p><ul><li>问题：网络中断，部分复制无法满足</li><li>解决：增大复制缓冲区配置rel_backlog_size</li></ul><p><strong>规避复制风暴：</strong></p><p>1：单主节点复制风暴</p><ul><li>问题：主节点重启，多从节点复制</li><li>解决：更换复制拓扑(树形架构)</li></ul><p>1：单机器复制风暴</p><ul><li>问题：机器宕机后，大量全量复制</li><li>解决：主节点分散多机器</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2018/10/01/2019-01-08-redis/"/>
      <url>/2018/10/01/2019-01-08-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>话不多说直奔主题…</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="主要触发机制"><a href="#主要触发机制" class="headerlink" title="主要触发机制"></a>主要触发机制</h3><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p><strong>cli命令:</strong> save</p><p><strong>文件策略：</strong> 如果存在老的RDB文件，新的将其替换掉</p><p><strong>时间复杂度：</strong> O(n)</p><p>我们把客户端和服务端用一个图来表示，save时会帮我们生成一个RDB文件<br><img src="/img/in-post/2019-01-08/1.png" alt=""></p><blockquote><p>由于它是同步命令，并且在单线程中执行,在数据量非常多的时候，此时执行save命令，他会将数据进行完整拷贝，可能会造成redis阻塞。</p></blockquote><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p><img src="/img/in-post/2019-01-08/2.png" alt=""></p><blockquote><p>通过在后台fork一个子进程完成复制</p></blockquote><h4 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h4><p>根据REDIS配置定时同步数据到RDB文件</p><table><tr><th>配置</th><th>Seconds</th><th>Changes</th></tr><tr><td>save</td><td>900</td><td>1</td></tr><tr><td>save</td><td>300</td><td>10</td></tr><tr><td>save</td><td>60</td><td>10000</td></tr></table><blockquote><p>eg:60秒中改变了10000次会发生备份RDB</p></blockquote><h4 id="触发机制-不容忽略的方式"><a href="#触发机制-不容忽略的方式" class="headerlink" title="触发机制-不容忽略的方式"></a>触发机制-不容忽略的方式</h4><ul><li>全量复制</li><li>Debug Reload</li><li>shutdown</li></ul><h3 id="save-or-bgsave"><a href="#save-or-bgsave" class="headerlink" title="save or bgsave ?"></a>save or bgsave ?</h3><table><tr><th>命令</th><th>save</th><th>bgsave</th></tr><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>阻塞</td><td>是</td><td>发生在fork时</td></tr><tr><td>复杂度</td><td>O(N)</td><td>O(N)</td></tr><tr><td>优点</td><td>不会消耗内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>消耗内存</td></tr></table><br>### 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir ./</span><br><span class="line">stop-writes-on-bgsave-error yes //bgsave出现问题会停止写入</span><br><span class="line">rdbcompression yes  //压缩模式</span><br><span class="line">rdbchecksum yes //对RDB进行校验和检验</span><br></pre></td></tr></table></figure><br><br>#### 最佳配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbfilename dump-$&#123;port&#125;.rdb</span><br><span class="line">dir bigdiskpath //选择大的硬盘</span><br><span class="line">stop-writes-on-bgsave-error yes //bgsave出现问题会停止写入</span><br><span class="line">rdbcompression yes  //压缩模式</span><br><span class="line">rdbchecksum yes //对RDB进行校验和检验</span><br></pre></td></tr></table></figure><br><br>### 小结<br><em> RDB是Redis内存到硬盘的快照，用于持久化</em> save通常会阻塞Redis<br><em> bgsave不会阻塞Redis，但是会fork子进程</em> save自动配置满足其一就会被执行<br>* 有些触发机制不容忽视<br><br>### RDB问题<br><br><strong>耗时耗性能</strong><br>&gt; O(N)数据耗时<br><br>&gt; fork耗内存<br><br>&gt; Disk I/O:IO性能<br><br><strong>不可控丢失数据</strong><br><table><tr><th>时间戳</th><th>save</th></tr><tr><td>T1</td><td>执行多个命令</td></tr><tr><td>T2</td><td>满足RDB自动创建条件</td></tr><tr><td>T3</td><td>再次执行多条命令</td></tr><tr><td>T4</td><td>宕机</td></tr></table><blockquote><p>宕机会发生数据丢失</p></blockquote><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h3 id="三种策略"><a href="#三种策略" class="headerlink" title="三种策略"></a>三种策略</h3><h4 id="everysec"><a href="#everysec" class="headerlink" title="everysec"></a>everysec</h4><p><img src="/img/in-post/2019-01-08/4.png" alt=""></p><h4 id="always"><a href="#always" class="headerlink" title="always"></a>always</h4><p>同everysec流程，只不过always会把每条命令都写入到AOF文件中</p><h4 id="no"><a href="#no" class="headerlink" title="no"></a>no</h4><p>由操作系统来决定是否刷新</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><table><tr><th>命令</th><th>always</th><th>everysec</th><th>no</th></tr><tr><td>优点</td><td>不丢失数据</td><td>每秒一次fsync丢1秒数据</td><td>不用管理</td></tr><tr><td>缺点</td><td>IO开销比较大</td><td>丢1秒数据</td><td>不可控</td></tr></table><br>### AOF重写<br><br>#### 作用<br><br><em> 减少硬盘占用量</em> 加快回复速度<br><br>### 重写两种方式<br><br>#### bgrewriteaof<br><br><strong>命令：bgrewriteaof</strong><br><br><img src="/img/in-post/2019-01-08/6.png" alt=""><br><br><strong>重写配置</strong><br><table><tr><th>配置名</th><th>含义</th></tr><tr><td>auto-aof-rewirte-min-size</td><td>auto-aof-rewirte-percentage</td></tr><tr><td>AOF文件重写尺寸</td><td>AOF文件增长率</td></tr></table><br><strong>统计</strong><br><table><tr><th>统计名</th><th>含义</th></tr><tr><td>auto-current-size</td><td>auto-base-size</td></tr><tr><td>AOF当前尺寸</td><td>AOF上次启动和重写的尺寸</td></tr></table><br>#### 自动触发时机<br><br><em> auto-current-size &gt; auto-aof-rewirte-min-size</em> (auto-current-size - auto-base-size) / auto-base-size &gt; auto-aof-rewirte-percentage<br><br>### AOF重写流程<br><br><img src="/img/in-post/2019-01-08/8.jpg" alt=""><br><br>### 配置<br><br><em> appendonly yes</em> appendfilename “appendonly-${port}.aof”<br><em> appendfsync everysec</em> dir /bigdisk<br><em> no-appendfsync-on-rewrite no  //aof重写失败是否允许丢失数据</em> auto-aof-rewrite-percentage 100   //增长率<br>* auto-aof-rewrite-min-size 64mb    //最小尺寸<br><br>## RDB 和 AOF 抉择<br><table><tr><th>命令</th><th>RDB</th><th>AOF</th></tr><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>丢数据</td><td>根据策略决定</td></tr><tr><td>轻重</td><td>重</td><td>轻</td></tr></table>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php swoole进程</title>
      <link href="/2018/01/02/2018-01-02-php-swoole-process/"/>
      <url>/2018/01/02/2018-01-02-php-swoole-process/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看了下swoole的相关文档，发现了它弥补了php以前再做异步通信方面的不足，也正如官方文档所说：<br>是一个”面向生产环境的 PHP 异步网络通信引擎”。</p><h2 id="那为什么要使用-Swoole？"><a href="#那为什么要使用-Swoole？" class="headerlink" title="那为什么要使用 Swoole？"></a>那为什么要使用 Swoole？</h2><p>主要有一下几点：</p><ul><li>常驻内存，避免重复加载带来的性能损耗，提升海量性能</li><li>协程异步，提高对 I/O 密集型场景并发处理能力（如：微信开发、支付、登录等）</li><li>方便地开发 Http、WebSocket、TCP、UDP 等应用，可以与硬件通信</li><li>PHP 高性能微服务架构成为现实</li></ul><p>当然今天主要介绍的还是swoole得Process模块得基础学习</p><h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><h3 id="Process-出现的意义"><a href="#Process-出现的意义" class="headerlink" title="Process 出现的意义"></a>Process 出现的意义</h3><p>在1.7.2版本时,swoole增加了一个进程管理模块，用来替代PHP的pcntl。</p><p>PHP自带的pcntl，存在很多不足，如：</p><ul><li>pcntl没有提供进程间通信的功能</li><li>pcntl不支持重定向标准输入和输出</li><li>pcntl只提供了fork这样原始的接口，容易使用错误</li><li>swoole_process提供了比pcntl更强大的功能，更易用的API，使PHP在多进程编程方面更加轻松。</li></ul><p>Swoole\Process提供了如下特性：</p><ul><li>基于Unix Socket和sysvmsg消息队列的进程间通信，只需调用write/read或者push/pop即可</li><li>支持重定向标准输入和输出，在子进程内echo不会打印屏幕，而是写入管道，读键盘输入可以重定向为管道读取数据</li><li>配合Event模块，创建的PHP子进程可以异步的事件驱动模式</li><li>提供了exec接口，创建的进程可以执行其他程序，与原PHP父进程之间可以方便的通信</li></ul><h3 id="一个简单的Process实例"><a href="#一个简单的Process实例" class="headerlink" title="一个简单的Process实例"></a>一个简单的Process实例</h3><p>创建一个http.php脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Swoole</span>\<span class="title">Http</span>\<span class="title">Server</span>;</span><br><span class="line">$http = <span class="keyword">new</span> Server(<span class="string">"0.0.0.0"</span>, <span class="number">9000</span>);</span><br><span class="line">$http-&gt;set(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'worker_num'</span> =&gt; <span class="number">8</span>,    <span class="comment">//worker process num</span></span><br><span class="line">));</span><br><span class="line">$http-&gt;on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($request, $response)</span> </span>&#123;</span><br><span class="line">    $response-&gt;end(<span class="string">"&lt;h1&gt;Hello Swoole. #"</span>.rand(<span class="number">1000</span>, <span class="number">9999</span>).<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>创建一个process.php脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$process = <span class="keyword">new</span> swoole_process(<span class="string">'callback_function'</span>, <span class="keyword">true</span>);   <span class="comment">//true 表示输出到管道中而不输出到屏幕中</span></span><br><span class="line"></span><br><span class="line">$pid = $process-&gt;start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback_function</span><span class="params">(swoole_process $worker)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $worker-&gt;exec(<span class="string">'/usr/local/php/bin/php'</span>, [<span class="keyword">__DIR__</span>.<span class="string">'/http.php'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $pid . PHP_EOL;</span><br><span class="line">swoole_process::wait();</span><br></pre></td></tr></table></figure><p>在终端执行<code>php process</code> 后我们会得到一个 php process 的子进程id<br><img src="https://enpsl.github.io/img/in-post/2018-01-02/1.png" alt=""></p><p> 通过<code>ps -aux|grep process.php</code>我们知道了process脚本的进程号<br><img src="https://enpsl.github.io/img/in-post/2018-01-02/2.png" alt=""></p><p>查看process 进程的详细信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -p 3700</span><br></pre></td></tr></table></figure></p><p><img src="https://enpsl.github.io/img/in-post/2018-01-02/3.png" alt=""></p><p>可以很容易发现出执行<code>php process</code> 输出的进程号3701是当前脚本的一个管理子进程的进程，<br>它的下面有4个子进程和一个管理http_server(3702)的子进程<figure class="highlight plain"><figcaption><span>[__DIR__.'/http.php']);```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">而http_server下面刚好有8个进程（我们在http_server中配置了8个进程,不配置默认4个进程）,这就很好解释了这颗进程树产生的原因。</span><br><span class="line"></span><br><span class="line">那么如何实现多进程呢？</span><br><span class="line"></span><br><span class="line">### 多进程实现</span><br><span class="line"></span><br><span class="line">创建一个worker.php脚本:</span><br><span class="line">```php</span><br><span class="line">function add($i) &#123;</span><br><span class="line">    $i++;</span><br><span class="line">    return $i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建6个子进程</span><br><span class="line">for ($i = 0; $i &lt; 6; $i++) &#123;</span><br><span class="line">    $process = new swoole_process(function (swoole_process $worker) use($i, $arr) &#123;</span><br><span class="line">        $n = add($i);</span><br><span class="line">        //将函数返回结果写入到管道中</span><br><span class="line">        $worker-&gt;write($n);</span><br><span class="line">    &#125;, true);</span><br><span class="line">    $pid = $process-&gt;start();</span><br><span class="line">    $workers[$pid] = $process;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach ($workers as $worker) &#123;</span><br><span class="line">    //遍历worker读取管道中的结果</span><br><span class="line">    var_dump($worker-&gt;read());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><img src="https://enpsl.github.io/img/in-post/2018-01-02/4.png" alt=""></p><p>很好如预期所示</p><p>那么如果管道里传入的是一个数组呢？是否可以像golang的channel可以写入任意类型的数据呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_add_str</span><span class="params">($arr, $i)</span></span>&#123;</span><br><span class="line">    $arr[] = $i;</span><br><span class="line">    <span class="keyword">return</span> $arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr = [</span><br><span class="line">    <span class="string">"hello"</span>,</span><br><span class="line">    <span class="string">"world"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">6</span>; $i++) &#123;</span><br><span class="line">    $process = <span class="keyword">new</span> swoole_process(<span class="function"><span class="keyword">function</span> <span class="params">(swoole_process $worker)</span> <span class="title">use</span><span class="params">($i, $arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//$n = add($i);</span></span><br><span class="line">        $arr = array_add_str($arr, $i);</span><br><span class="line">        $worker-&gt;write($arr);</span><br><span class="line">    &#125;, <span class="keyword">true</span>);</span><br><span class="line">    $pid = $process-&gt;start();</span><br><span class="line">    $workers[$pid] = $process;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($workers <span class="keyword">as</span> $worker) &#123;</span><br><span class="line">    var_dump($worker-&gt;read());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://enpsl.github.io/img/in-post/2018-01-02/4.png" alt=""></p><p>由图可见：数组是不可以传递的，由此可推测出object等等其他复杂类型也是不可以的<br>我们只能通过序列化反序列化的方式去实现通信传输</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过一些代码的演练了解了process的一些使用方式，但是在使用过程中还需要注意：<br><strong>Process进程在系统是非常昂贵的资源，创建进程消耗很大。另外创建的进程过多会导致进程切换开销大幅上升。</strong></p><blockquote><p>参考</p><ul><li><a href="https://wiki.swoole.com/wiki/page/p-process.html" target="_blank" rel="noopener">《Swoole官方文档》</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> swoole </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
